import{_ as a,c as i,o as t,ag as l}from"./chunks/framework.DaePuHLG.js";const _=JSON.parse('{"title":"SOLIDの原則","description":"","frontmatter":{"title":"SOLIDの原則"},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),r={name:"index.md"};function n(o,e,s,c,d,h){return t(),i("div",null,e[0]||(e[0]=[l('<h1 id="solidの原則とは" tabindex="-1">SOLIDの原則とは？ <a class="header-anchor" href="#solidの原則とは" aria-label="Permalink to &quot;SOLIDの原則とは？&quot;">​</a></h1><p><strong>SOLID</strong> は、オブジェクト指向設計における5つの基本原則を指します。<br> このサイトでは、それぞれの原則を TypeScript の実装例と共に解説し、実務に活かせる理解を目指します。</p><h2 id="🔎-各原則の一覧" tabindex="-1">🔎 各原則の一覧 <a class="header-anchor" href="#🔎-各原則の一覧" aria-label="Permalink to &quot;🔎 各原則の一覧&quot;">​</a></h2><ul><li><a href="./single-responsibility-principle.html">単一責任の原則（SRP）</a></li><li><a href="./open-closed-principle.html">オープンクローズドの原則（OCP）</a></li><li><a href="./liskov-substitution-principle.html">リスコフの置換原則（LSP）</a></li><li><a href="./interface-segregation-principle.html">インターフェース分離の原則（ISP）</a></li><li><a href="./dependency-inversion-principle.html">依存性逆転の原則（DIP）</a></li></ul><h2 id="🛠-ケーススタディ" tabindex="-1">🛠 ケーススタディ <a class="header-anchor" href="#🛠-ケーススタディ" aria-label="Permalink to &quot;🛠 ケーススタディ&quot;">​</a></h2><ul><li><a href="./practical-case-studies.html">ECサイトの責務分離と拡張設計</a></li></ul>',6)]))}const f=a(r,[["render",n]]);export{_ as __pageData,f as default};
