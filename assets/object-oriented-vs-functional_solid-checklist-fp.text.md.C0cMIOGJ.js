import{_ as i,c as t,o as e,a2 as o}from"./chunks/framework.M5Qft685.js";const d=JSON.parse('{"title":"関数型プログラミング チェックリスト（Functional Programming Checklist）","description":"","frontmatter":{},"headers":[],"relativePath":"object-oriented-vs-functional/solid-checklist-fp.text.md","filePath":"object-oriented-vs-functional/solid-checklist-fp.text.md"}'),a={name:"object-oriented-vs-functional/solid-checklist-fp.text.md"};function n(r,l,c,p,s,u){return e(),t("div",null,l[0]||(l[0]=[o('<h1 id="関数型プログラミング-チェックリスト-functional-programming-checklist" tabindex="-1">関数型プログラミング チェックリスト（Functional Programming Checklist） <a class="header-anchor" href="#関数型プログラミング-チェックリスト-functional-programming-checklist" aria-label="Permalink to &quot;関数型プログラミング チェックリスト（Functional Programming Checklist）&quot;">​</a></h1><p>※ CLI やプレーンな形式で使いやすい、テキスト版チェックリストです。</p><p>■ 純粋関数（Pure Functions）</p><ul><li>[ ] 同じ入力に対して常に同じ出力を返しているか？</li><li>[ ] 関数内に副作用がないか？</li><li>[ ] I/Oや状態変更、ランダムや日時など非決定的な要素を扱っていないか？</li></ul><p>■ 不変性（Immutability）</p><ul><li>[ ] 状態や変数を変更せず、新しい値を返しているか？</li><li>[ ] ミュータブルなデータ構造を使用していないか？</li></ul><p>■ 合成性（Composability）</p><ul><li>[ ] 関数は小さく分離され、他の関数と組み合わせて使えるか？</li><li>[ ] pipe や compose による構成ができるか？</li><li>[ ] 高凝集・疎結合な設計になっているか？</li></ul><p>■ 宣言的スタイル（Declarative Style）</p><ul><li>[ ] 処理の「手順」ではなく「意図」が記述されているか？</li><li>[ ] 命令型構文（for文やif文）を避け、map / filter / reduce などを使っているか？</li></ul><p>■ 副作用の封じ込め</p><ul><li>[ ] 副作用のある処理（HTTP, ログ出力など）を関数型の外部に隔離しているか？</li><li>[ ] Task / IO / Observable などの制御可能な仕組みで扱っているか？</li></ul><p>■ 高階関数（Higher-Order Functions）</p><ul><li>[ ] 関数を引数に、または戻り値として扱っているか？</li><li>[ ] 汎用的で再利用可能な設計になっているか？</li></ul><p>■ データと処理の分離</p><ul><li>[ ] データ構造と処理が明確に分離されているか？</li><li>[ ] 特定のデータ構造に依存したロジックになっていないか？</li></ul><p>■ エラーハンドリングの明示性</p><ul><li>[ ] 例外ではなく Option / Either / Result などで失敗を表現しているか？</li><li>[ ] エラー処理が関数合成の一部として管理されているか？</li></ul><p>■ テストのしやすさ</p><ul><li>[ ] 関数は小さく、純粋で、単体テストしやすいか？</li><li>[ ] 状態や副作用に依存せずに検証できるか？</li></ul><p>■ 状態の明示的な管理</p><ul><li>[ ] 状態の変化が明示的に設計されているか？</li><li>[ ] ストリームやデータ構造を用いて管理されているか？</li><li>[ ] 暗黙の共有状態を避けているか？</li></ul>',22)]))}const _=i(a,[["render",n]]);export{d as __pageData,_ as default};
