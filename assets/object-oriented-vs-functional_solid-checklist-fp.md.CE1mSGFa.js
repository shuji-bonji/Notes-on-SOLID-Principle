import{_ as d,c as r,o as e,a2 as i}from"./chunks/framework.M5Qft685.js";const m=JSON.parse('{"title":"関数型プログラミング チェックリスト（Functional Programming Checklist）","description":"関数型プログラミング設計チェックリスト。純粋性・不変性・合成性・副作用管理など、FPコードの品質を高めるための実践的な確認項目を網羅。","frontmatter":{"description":"関数型プログラミング設計チェックリスト。純粋性・不変性・合成性・副作用管理など、FPコードの品質を高めるための実践的な確認項目を網羅。"},"headers":[],"relativePath":"object-oriented-vs-functional/solid-checklist-fp.md","filePath":"object-oriented-vs-functional/solid-checklist-fp.md"}'),a={name:"object-oriented-vs-functional/solid-checklist-fp.md"};function o(n,t,c,l,s,h){return e(),r("div",null,t[0]||(t[0]=[i('<h1 id="関数型プログラミング-チェックリスト-functional-programming-checklist" tabindex="-1">関数型プログラミング チェックリスト（Functional Programming Checklist） <a class="header-anchor" href="#関数型プログラミング-チェックリスト-functional-programming-checklist" aria-label="Permalink to &quot;関数型プログラミング チェックリスト（Functional Programming Checklist）&quot;">​</a></h1><p>関数型プログラミングにおける良い設計のためのチェックリストです。以下の観点ごとに、基本項目と詳細項目を整理しています。</p><table tabindex="0"><thead><tr><th>観点</th><th>基本項目</th><th>詳細項目</th></tr></thead><tbody><tr><td>純粋関数（Pure Functions）</td><td>□ 同じ入力に対して常に同じ出力か？<br>□ 副作用を持たないか？</td><td>□ I/Oや状態変更などの副作用を含まないか？<br>□ ランダムや日時など非決定的要素を扱っていないか？</td></tr><tr><td>不変性（Immutability）</td><td>□ 変数や状態を変更していないか？</td><td>□ ミュータブルなデータ構造の使用を避けているか？<br>□ 更新処理が新しい値を返すようになっているか？</td></tr><tr><td>合成性（Composability）</td><td>□ 関数は小さく分離されているか？<br>□ 関数同士が組み合わせられるか？</td><td>□ pipe や compose を使って流れを構成できるか？<br>□ 高凝集・疎結合の設計になっているか？</td></tr><tr><td>宣言的スタイル（Declarative Style）</td><td>□ 「何をしたいか」が記述されているか？</td><td>□ for文やif文など命令型スタイルを避け、map / filter / reduce 等を使っているか？</td></tr><tr><td>副作用の封じ込め</td><td>□ 副作用は関数の外に押し出されているか？</td><td>□ HTTP通信やログ出力などは明示的に管理されているか？<br>□ Task / IO / Observable 等のエフェクト型を利用しているか？</td></tr><tr><td>高階関数（Higher-Order Functions）</td><td>□ 関数を引数や戻り値として使っているか？</td><td>□ 汎用的な関数が再利用可能な構造になっているか？</td></tr><tr><td>データと処理の分離</td><td>□ データ構造と処理が分かれているか？</td><td>□ 関数が特定のデータ構造に依存していないか？<br>□ 型に基づいた処理の分離が行われているか？</td></tr><tr><td>エラーハンドリングの明示性</td><td>□ 例外に依存していないか？</td><td>□ Option / Either / Result などでエラーを表現しているか？<br>□ エラー処理が合成の一部として扱われているか？</td></tr><tr><td>テストのしやすさ</td><td>□ 関数が小さく、純粋でテストしやすいか？</td><td>□ 状態や副作用に依存せず、単体でテスト可能か？</td></tr><tr><td>状態の明示的な管理</td><td>□ 状態の変化が明示的に管理されているか？</td><td>□ ストリームやデータ構造を使って状態変化を記述しているか？<br>□ 暗黙の共有状態を使っていないか？</td></tr></tbody></table><p><a href="./solid-checklist-fp.text.html">テキスト版はこちら</a></p>',4)]))}const b=d(a,[["render",o]]);export{m as __pageData,b as default};
