const i='{"documentCount":191,"nextId":191,"documentIds":{"0":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則-dependency-inversion-principle","1":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則とは","2":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則に違反している例","3":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図","4":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード","5":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#❌-問題点","6":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#原則に違反するとどうなるか","7":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#解決策-抽象に依存する","8":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図-1","9":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード-1","10":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#✅-利点","11":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#他のsolid原則との関連","12":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#関連図","13":"/Notes-on-SOLID-Principle/#🔎-各原則の一覧","14":"/Notes-on-SOLID-Principle/#🛠-ケーススタディ","15":"/Notes-on-SOLID-Principle/#oopと関数型の比較","16":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則-interface-segregation-principle","17":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則とは","18":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則に違反した例","19":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図","20":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード","21":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#❌-問題点","22":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#原則に違反するとどうなるか","23":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#解決策-機能ごとにインターフェースを分割する","24":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図-1","25":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード-1","26":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#他のsolid原則との関連","27":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#関連図","28":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則-liskov-substitution-principle","29":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則とは","30":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図","31":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反した例","32":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-1","33":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード","34":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#❌-問題点","35":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#原則に違反するとどうなるか","36":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策-共通の動作に着目したインターフェースを使う","37":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-2","38":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-1","39":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反するとどうなるか","40":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#振る舞いの変更に気付くには","41":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-2","42":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#テストコード","43":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#補足-契約による設計","44":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件とは","45":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件とは","46":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#契約による設計においての、サブタイプの事前条件と事後条件","47":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件はスーパータイプと同じかそれより弱い条件","48":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ","49":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ","50":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件はスーパータイプと同じかそれより強い条件","51":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ-1","52":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ-1","53":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#tyepscriptコード例","54":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-3","55":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#違反例","56":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-3","57":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果","58":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#ユニットテスト","59":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-1","60":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策","61":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-4","62":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-4","63":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-2","64":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#他のsolid原則との関連","65":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#関連図","66":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#依存性逆転の原則-dip-におけるoopとfpの比較","67":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#oopにおけるdipの典型例","68":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#関数型におけるdipの応用","69":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#比較まとめ","70":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#oopと関数型の比較","71":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#対比の目的","72":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#今後の内容予定","73":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#想定読者","74":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#関数型向けチェックリスト","75":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#インターフェース分離の原則-isp-におけるoopとfpの比較","76":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#oopにおけるispの実装例","77":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#fpにおけるispの実装例","78":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#比較まとめ","79":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#リスコフの置換原則-lsp-におけるoopとfpの比較","80":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#oopにおけるlspの実装例","81":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#fpにおけるlspの実装例","82":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#比較まとめ","83":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#開放-閉鎖原則-ocp-におけるoopとfpの比較","84":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopにおけるocpの実装例","85":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例","86":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpにおけるocpの実装例","87":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-1","88":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#拡張例-新しい図形の追加","89":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopの拡張例","90":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-2","91":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpの拡張例","92":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-3","93":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#ocpにおける比較まとめ","94":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/solid-checklist-fp.html#関数型プログラミング-チェックリスト-functional-programming-checklist","95":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/solid-checklist-fp.text.html#関数型プログラミング-チェックリスト-functional-programming-checklist","96":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#単一責任の原則-srp-におけるoopとfpの比較","97":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#oopにおけるsrpの実装例","98":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#fpにおけるsrpの実装例","99":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#srpにおける比較まとめ","100":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#oopと関数型における設計原則のまとめ","101":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#各原則の適用比較","102":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#共通点と違い","103":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#どちらを選ぶべきか","104":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#最後に","105":"/Notes-on-SOLID-Principle/open-closed-principle.html#オープンクローズドの原則-open-closed-principle","106":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則の要点","107":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則が解決する問題","108":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則に違反した例","109":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図","110":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード","111":"/Notes-on-SOLID-Principle/open-closed-principle.html#❌-問題点-原則に違反","112":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則違反のリスク","113":"/Notes-on-SOLID-Principle/open-closed-principle.html#解決策-通知手段を拡張できる設計にする","114":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-1","115":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-1","116":"/Notes-on-SOLID-Principle/open-closed-principle.html#✅-利点","117":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-2","118":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-2","119":"/Notes-on-SOLID-Principle/open-closed-principle.html#実務で役立つヒント","120":"/Notes-on-SOLID-Principle/open-closed-principle.html#他のsolid原則との関連","121":"/Notes-on-SOLID-Principle/open-closed-principle.html#関連図","122":"/Notes-on-SOLID-Principle/open-closed-principle.html#まとめ","123":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則ケーススタディ-ecサイト機能拡張","124":"/Notes-on-SOLID-Principle/practical-case-studies.html#シナリオ","125":"/Notes-on-SOLID-Principle/practical-case-studies.html#非solidなコード-before","126":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図","127":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード","128":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則に準拠したリファクタリング-after","129":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-単一責任の原則-srp","130":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-1","131":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-1","132":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-オープンクローズド原則-ocp-リスコフの置換原則-lsp","133":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-2","134":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-2","135":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-インターフェース分離の原則-isp","136":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-3","137":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-3","138":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-依存性逆転の原則-dip","139":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-4","140":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-4","141":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-この設計の利点","142":"/Notes-on-SOLID-Principle/relevance-of-solid-principles.html#solid原則間の関連性","143":"/Notes-on-SOLID-Principle/relevance-of-solid-principles.html#solid原則の関連図","144":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則-single-responsibility-principle","145":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則とは","146":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#なぜ「アクター」の観点が重要か","147":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#アクターとは","148":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任に違反している例","149":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#アクターとクラスの関係","150":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図","151":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード","152":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#問題点","153":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#具体的なリスク","154":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#ケース1-給与計算ロジックの変更が人事レポートに影響","155":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#ケース2-データベース変更がビジネスロジックに影響","156":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#解決策-責任を分離する","157":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#アクターとクラスの関係-改善後","158":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-1","159":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-1","160":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例","161":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#分離のメリット","162":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#状態-フィールド-も責任に含まれる","163":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#原則に違反するとどうなるか","164":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#責任の分離の判断基準-リファクタリング時の指針","165":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#他のsolid原則との関連","166":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#関連図","167":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-dry原則との関係","168":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#❌-よくある誤解","169":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-2","170":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-2","171":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#✅-正しい構成例-責任の分離","172":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-3","173":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-3","174":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例-1","175":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-インターフェースを使った責任の分離-typescript","176":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-4","177":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-4","178":"/Notes-on-SOLID-Principle/solid-checklist.html#各原則のチェックリスト-基本-詳細","179":"/Notes-on-SOLID-Principle/solid-checklist.text.html#✅-solid原則-チェックリスト","180":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-単一責任の原則-srp","181":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-オープンクローズドの原則-ocp","182":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-リスコフの置換原則-lsp","183":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-インターフェース分離の原則-isp","184":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-依存性逆転の原則-dip","185":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則とは","186":"/Notes-on-SOLID-Principle/solid-principles.html#なぜsolidが必要なのか","187":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則を適用するメリット","188":"/Notes-on-SOLID-Principle/solid-principles.html#👎-非solidなコードの問題点","189":"/Notes-on-SOLID-Principle/solid-principles.html#👍-solidなコードのメリット","190":"/Notes-on-SOLID-Principle/solid-principles.html#学習を深めるためのリソース"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[5,1,1],"1":[1,5,8],"2":[1,5,6],"3":[1,5,2],"4":[1,5,20],"5":[2,5,7],"6":[1,5,14],"7":[2,5,1],"8":[1,8,2],"9":[1,8,23],"10":[2,6,9],"11":[1,5,1],"12":[1,7,11],"13":[2,1,14],"14":[2,1,2],"15":[1,1,17],"16":[5,1,1],"17":[1,5,8],"18":[1,5,11],"19":[1,5,2],"20":[1,5,21],"21":[2,5,9],"22":[1,5,13],"23":[2,5,1],"24":[1,8,2],"25":[1,8,26],"26":[1,5,1],"27":[1,7,14],"28":[5,1,1],"29":[1,5,10],"30":[1,5,2],"31":[1,5,10],"32":[1,5,2],"33":[1,5,12],"34":[2,5,14],"35":[1,5,20],"36":[2,5,10],"37":[1,8,2],"38":[1,8,22],"39":[1,5,11],"40":[1,5,2],"41":[1,7,15],"42":[1,7,21],"43":[2,5,7],"44":[1,6,4],"45":[1,6,4],"46":[2,6,3],"47":[1,6,1],"48":[1,7,7],"49":[1,7,14],"50":[1,6,1],"51":[1,7,13],"52":[1,7,15],"53":[1,5,1],"54":[1,6,1],"55":[1,5,2],"56":[1,6,30],"57":[1,7,5],"58":[1,6,25],"59":[1,7,5],"60":[1,5,1],"61":[1,6,2],"62":[1,6,33],"63":[1,7,3],"64":[1,5,1],"65":[1,6,18],"66":[3,1,15],"67":[1,3,28],"68":[1,3,29],"69":[1,3,22],"70":[1,1,8],"71":[1,1,7],"72":[1,1,21],"73":[1,1,4],"74":[1,1,6],"75":[3,1,14],"76":[1,3,19],"77":[1,3,19],"78":[1,3,23],"79":[3,1,11],"80":[1,3,35],"81":[1,3,35],"82":[1,3,21],"83":[4,1,19],"84":[1,4,46],"85":[1,5,31],"86":[1,4,33],"87":[1,5,27],"88":[2,4,1],"89":[1,6,19],"90":[1,6,35],"91":[1,6,25],"92":[1,6,38],"93":[1,4,21],"94":[6,1,74],"95":[6,1,77],"96":[3,1,15],"97":[1,3,35],"98":[1,3,32],"99":[1,3,20],"100":[1,1,13],"101":[1,1,28],"102":[1,1,15],"103":[2,1,5],"104":[1,1,6],"105":[5,1,1],"106":[1,5,8],"107":[1,5,5],"108":[1,5,5],"109":[1,5,2],"110":[1,5,20],"111":[4,5,7],"112":[1,5,20],"113":[2,5,4],"114":[1,10,2],"115":[1,10,28],"116":[2,6,12],"117":[1,8,2],"118":[1,8,24],"119":[1,5,13],"120":[1,5,1],"121":[1,7,21],"122":[1,5,7],"123":[2,1,1],"124":[1,2,5],"125":[3,2,1],"126":[1,5,2],"127":[1,5,29],"128":[3,2,1],"129":[4,5,1],"130":[1,8,2],"131":[1,8,21],"132":[6,5,1],"133":[1,10,2],"134":[1,10,23],"135":[4,5,1],"136":[1,8,2],"137":[1,8,14],"138":[4,5,1],"139":[1,8,2],"140":[1,8,27],"141":[2,2,12],"142":[1,1,3],"143":[1,1,29],"144":[5,1,1],"145":[1,5,46],"146":[4,5,30],"147":[2,8,39],"148":[1,5,5],"149":[1,7,7],"150":[1,7,2],"151":[1,7,31],"152":[1,5,20],"153":[1,5,1],"154":[2,6,45],"155":[2,6,35],"156":[2,5,2],"157":[3,7,5],"158":[1,7,2],"159":[1,7,32],"160":[1,6,24],"161":[1,6,12],"162":[3,5,23],"163":[1,5,12],"164":[3,5,13],"165":[1,5,1],"166":[1,6,23],"167":[2,5,13],"168":[2,6,4],"169":[1,8,2],"170":[1,8,34],"171":[3,6,1],"172":[1,9,2],"173":[1,9,37],"174":[1,9,25],"175":[4,5,4],"176":[1,10,2],"177":[1,10,23],"178":[5,1,58],"179":[3,1,1],"180":[4,3,9],"181":[4,3,12],"182":[4,3,8],"183":[4,3,8],"184":[4,3,11],"185":[1,1,47],"186":[2,1,7],"187":[1,1,3],"188":[2,2,11],"189":[2,2,10],"190":[1,1,32]},"averageFieldLength":[1.643979057591623,4.795811518324609,13.958115183246074],"storedFields":{"0":{"title":"依存性逆転の原則 (Dependency Inversion Principle)","titles":[]},"1":{"title":"依存性逆転の原則とは","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"2":{"title":"依存性逆転の原則に違反している例","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"3":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"4":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"5":{"title":"❌ 問題点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"6":{"title":"原則に違反するとどうなるか","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"7":{"title":"解決策：抽象に依存する","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"8":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"9":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"10":{"title":"✅ 利点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する"]},"11":{"title":"他のSOLID原則との関連","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"12":{"title":"関連図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","他のSOLID原則との関連","✅ 利点"]},"13":{"title":"🔎 各原則の一覧","titles":[]},"14":{"title":"🛠 ケーススタディ","titles":[]},"15":{"title":"OOPと関数型の比較","titles":[]},"16":{"title":"インターフェース分離の原則 (Interface Segregation Principle)","titles":[]},"17":{"title":"インターフェース分離の原則とは","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"18":{"title":"インターフェース分離の原則に違反した例","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"19":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"20":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"21":{"title":"❌ 問題点","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"22":{"title":"原則に違反するとどうなるか","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"23":{"title":"解決策：機能ごとにインターフェースを分割する","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"24":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"25":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"26":{"title":"他のSOLID原則との関連","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"27":{"title":"関連図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","他のSOLID原則との関連","❌ 問題点"]},"28":{"title":"リスコフの置換原則 (Liskov Substitution Principle)","titles":[]},"29":{"title":"リスコフの置換原則とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"30":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則とは"]},"31":{"title":"リスコフの置換原則に違反した例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"32":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"33":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"34":{"title":"❌ 問題点","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"35":{"title":"原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"36":{"title":"解決策：共通の動作に着目したインターフェースを使う","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"37":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"38":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"39":{"title":"リスコフの置換原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"40":{"title":"振る舞いの変更に気付くには","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"41":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"42":{"title":"テストコード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"43":{"title":"補足： 契約による設計","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"44":{"title":"事前条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"45":{"title":"事後条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"46":{"title":"契約による設計においての、サブタイプの事前条件と事後条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"47":{"title":"事前条件はスーパータイプと同じかそれより弱い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"48":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"49":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"50":{"title":"事後条件はスーパータイプと同じかそれより強い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"51":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"52":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"53":{"title":"TyepScriptコード例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"54":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","事後条件はスーパータイプと同じかそれより強い条件"]},"55":{"title":"違反例","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"56":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"57":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","コード"]},"58":{"title":"ユニットテスト","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"59":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","ユニットテスト"]},"60":{"title":"解決策","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"61":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"62":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"63":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策","コード"]},"64":{"title":"他のSOLID原則との関連","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"65":{"title":"関連図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","他のSOLID原則との関連","解決策"]},"66":{"title":"依存性逆転の原則（DIP）におけるOOPとFPの比較","titles":[]},"67":{"title":"OOPにおけるDIPの典型例","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"68":{"title":"関数型におけるDIPの応用","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"69":{"title":"比較まとめ","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"70":{"title":"OOPと関数型の比較","titles":[]},"71":{"title":"対比の目的","titles":["OOPと関数型の比較"]},"72":{"title":"今後の内容予定","titles":["OOPと関数型の比較"]},"73":{"title":"想定読者","titles":["OOPと関数型の比較"]},"74":{"title":"関数型向けチェックリスト","titles":["OOPと関数型の比較"]},"75":{"title":"インターフェース分離の原則（ISP）におけるOOPとFPの比較","titles":[]},"76":{"title":"OOPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"77":{"title":"FPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"78":{"title":"比較まとめ","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"79":{"title":"リスコフの置換原則（LSP）におけるOOPとFPの比較","titles":[]},"80":{"title":"OOPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"81":{"title":"FPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"82":{"title":"比較まとめ","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"83":{"title":"開放/閉鎖原則（OCP）におけるOOPとFPの比較","titles":[]},"84":{"title":"OOPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"85":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","OOPにおけるOCPの実装例"]},"86":{"title":"FPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"87":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","FPにおけるOCPの実装例"]},"88":{"title":"拡張例：新しい図形の追加","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"89":{"title":"OOPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"90":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"91":{"title":"FPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"92":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"93":{"title":"OCPにおける比較まとめ","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"94":{"title":"関数型プログラミング チェックリスト（Functional Programming Checklist）","titles":[]},"95":{"title":"関数型プログラミング チェックリスト（Functional Programming Checklist）","titles":[]},"96":{"title":"単一責任の原則（SRP）におけるOOPとFPの比較","titles":[]},"97":{"title":"OOPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"98":{"title":"FPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"99":{"title":"SRPにおける比較まとめ","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"100":{"title":"OOPと関数型における設計原則のまとめ","titles":[]},"101":{"title":"各原則の適用比較","titles":["OOPと関数型における設計原則のまとめ"]},"102":{"title":"共通点と違い","titles":["OOPと関数型における設計原則のまとめ"]},"103":{"title":"どちらを選ぶべきか？","titles":["OOPと関数型における設計原則のまとめ"]},"104":{"title":"最後に","titles":["OOPと関数型における設計原則のまとめ"]},"105":{"title":"オープンクローズドの原則 (Open-Closed Principle)","titles":[]},"106":{"title":"この原則の要点","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"107":{"title":"この原則が解決する問題","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"108":{"title":"原則に違反した例","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"109":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"110":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"111":{"title":"❌ 問題点（原則に違反）","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"112":{"title":"原則違反のリスク","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"113":{"title":"解決策：通知手段を拡張できる設計にする","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"114":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"115":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"116":{"title":"✅ 利点","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする"]},"117":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"118":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"119":{"title":"実務で役立つヒント","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"120":{"title":"他のSOLID原則との関連","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"121":{"title":"関連図","titles":["オープンクローズドの原則 (Open-Closed Principle)","他のSOLID原則との関連","✅ 利点"]},"122":{"title":"まとめ","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"123":{"title":"SOLID原則ケーススタディ：ECサイト機能拡張","titles":[]},"124":{"title":"シナリオ","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"125":{"title":"非SOLIDなコード（Before）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"126":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"127":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"128":{"title":"SOLID原則に準拠したリファクタリング（After）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"129":{"title":"✅ 単一責任の原則（SRP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"130":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"131":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"132":{"title":"✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"133":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"134":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"135":{"title":"✅ インターフェース分離の原則（ISP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"136":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"137":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"138":{"title":"✅ 依存性逆転の原則（DIP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"139":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"140":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"141":{"title":"✅ この設計の利点","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"142":{"title":"SOLID原則間の関連性","titles":[]},"143":{"title":"SOLID原則の関連図","titles":["SOLID原則間の関連性"]},"144":{"title":"単一責任の原則 (Single Responsibility Principle)","titles":[]},"145":{"title":"単一責任の原則とは","titles":["単一責任の原則 (Single Responsibility Principle)"]},"146":{"title":"なぜ「アクター」の観点が重要か？","titles":["単一責任の原則 (Single Responsibility Principle)"]},"147":{"title":"アクターとは？","titles":["単一責任の原則 (Single Responsibility Principle)","なぜ「アクター」の観点が重要か？"]},"148":{"title":"単一責任に違反している例","titles":["単一責任の原則 (Single Responsibility Principle)"]},"149":{"title":"アクターとクラスの関係","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","アクターとは？"]},"150":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","アクターとは？"]},"151":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","アクターとは？"]},"152":{"title":"問題点","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例"]},"153":{"title":"具体的なリスク","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例"]},"154":{"title":"ケース1：給与計算ロジックの変更が人事レポートに影響","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","具体的なリスク"]},"155":{"title":"ケース2：データベース変更がビジネスロジックに影響","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","具体的なリスク"]},"156":{"title":"解決策：責任を分離する","titles":["単一責任の原則 (Single Responsibility Principle)"]},"157":{"title":"アクターとクラスの関係（改善後）","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","具体的なリスク"]},"158":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","具体的なリスク"]},"159":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","具体的なリスク"]},"160":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する"]},"161":{"title":"分離のメリット","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する"]},"162":{"title":"状態（フィールド）も責任に含まれる","titles":["単一責任の原則 (Single Responsibility Principle)"]},"163":{"title":"原則に違反するとどうなるか","titles":["単一責任の原則 (Single Responsibility Principle)"]},"164":{"title":"責任の分離の判断基準（リファクタリング時の指針）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"165":{"title":"他のSOLID原則との関連","titles":["単一責任の原則 (Single Responsibility Principle)"]},"166":{"title":"関連図","titles":["単一責任の原則 (Single Responsibility Principle)","他のSOLID原則との関連","分離のメリット"]},"167":{"title":"補足：DRY原則との関係","titles":["単一責任の原則 (Single Responsibility Principle)"]},"168":{"title":"❌ よくある誤解","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"169":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"170":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"171":{"title":"✅ 正しい構成例：責任の分離","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"172":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"173":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"174":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"175":{"title":"補足：インターフェースを使った責任の分離（TypeScript）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"176":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"177":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"178":{"title":"各原則のチェックリスト（基本 + 詳細）","titles":[]},"179":{"title":"✅ SOLID原則 チェックリスト","titles":[]},"180":{"title":"☑︎ 単一責任の原則（SRP）","titles":["✅ SOLID原則 チェックリスト"]},"181":{"title":"☑︎ オープンクローズドの原則（OCP）","titles":["✅ SOLID原則 チェックリスト"]},"182":{"title":"☑︎ リスコフの置換原則（LSP）","titles":["✅ SOLID原則 チェックリスト"]},"183":{"title":"☑︎ インターフェース分離の原則（ISP）","titles":["✅ SOLID原則 チェックリスト"]},"184":{"title":"☑︎ 依存性逆転の原則（DIP）","titles":["✅ SOLID原則 チェックリスト"]},"185":{"title":"SOLID原則とは","titles":[]},"186":{"title":"なぜSOLIDが必要なのか？","titles":["SOLID原則とは"]},"187":{"title":"SOLID原則を適用するメリット","titles":["SOLID原則とは"]},"188":{"title":"👎 非SOLIDなコードの問題点","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"189":{"title":"👍 SOLIDなコードのメリット","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"190":{"title":"学習を深めるためのリソース","titles":["SOLID原則とは"]}},"dirtCount":0,"index":[["qiita",{"2":{"190":1}}],["quot",{"2":{"146":2}}],["guru",{"2":{"190":1}}],["guide",{"2":{"190":1}}],["generator",{"2":{"97":2}}],["generatereport",{"2":{"98":2}}],["generate",{"2":{"97":2}}],["getarea",{"2":{"41":1,"42":2,"56":2,"58":2,"62":4}}],["学習を深めるためのリソース",{"0":{"190":1}}],["共有がしやすい",{"2":{"189":1}}],["共通点と違い",{"0":{"102":1}}],["共通のインターフェースを定義し",{"2":{"83":1}}],["共通の鳥の性質",{"2":{"38":1,"80":1}}],["共通の動作に着目したインターフェースを使う",{"0":{"36":1},"1":{"37":1,"38":1}}],["チーム開発での理解",{"2":{"189":1}}],["チェックリスト",{"0":{"94":1,"95":1,"179":1},"1":{"180":1,"181":1,"182":1,"183":1,"184":1}}],["予測しやすい",{"2":{"189":1}}],["似たような処理を何度も書いてしまう",{"2":{"188":1}}],["再利用しづらく",{"2":{"188":1}}],["再利用性の高いソフトウェアを構築するための設計指針であり",{"2":{"185":1}}],["全体を理解するのに時間がかかる",{"2":{"188":1}}],["全アクターが共通で使うデータ構造",{"2":{"159":1}}],["多くの既存コードを変更する必要がある",{"2":{"188":1}}],["多機能プリンタ",{"2":{"18":1}}],["簡単な機能追加のはずなのに",{"2":{"188":1}}],["簡略化された表現",{"2":{"145":1}}],["ちょっとした修正が",{"2":{"188":1}}],["現代のソフトウェア開発では",{"2":{"186":1}}],["結合度を下げる",{"2":{"185":1}}],["安全な拡張が可能になる",{"2":{"185":1}}],["安全に置換できる前提",{"2":{"81":1}}],["得られるメリット",{"2":{"185":1}}],["説明",{"2":{"185":1}}],["頭文字",{"2":{"185":1}}],["良い設計",{"2":{"185":1}}],["☑︎",{"0":{"180":1,"181":1,"182":1,"183":1,"184":1}}],["ファクトリなどで依存関係を外部化しているか",{"2":{"178":1,"184":1}}],["フィールドとメソッドが密接に関係している単位で",{"2":{"164":1}}],["フィールド",{"0":{"162":1},"2":{"162":1}}],["派生クラスは親クラスとして振る舞えるか",{"2":{"178":1,"182":1}}],["派生クラスは基底クラスと置き換えてもプログラムの正しさが保たれるべきである",{"2":{"79":1}}],["基底クラス",{"2":{"178":1,"181":1}}],["基本",{"0":{"178":1}}],["基本項目",{"2":{"94":1,"178":1}}],["基本項目と詳細項目を整理しています",{"2":{"94":1}}],["詳細",{"0":{"178":1}}],["詳細項目",{"2":{"94":1,"178":1}}],["後に学ぶ",{"2":{"177":1}}],["役割ごとの設計がしやすくなります",{"2":{"175":1}}],["レポート生成",{"2":{"170":2,"173":1,"174":1}}],["レポート形式の変更",{"2":{"152":1}}],["yourself",{"2":{"167":1}}],["計算責任を分離しておけば",{"2":{"166":1}}],["マージコンフリクトが発生しやすい",{"2":{"163":1}}],["マーティン自身は",{"2":{"145":1}}],["マーティン",{"2":{"145":1}}],["複数のアクターが同じクラスを変更するため",{"2":{"163":1}}],["複雑な状態管理やエンティティ設計にはoopの恩恵を受けやすい",{"2":{"103":1}}],["修正",{"2":{"186":1}}],["修正や拡張がしやすくなる",{"2":{"185":1}}],["修正のリスクが高くなる",{"2":{"163":1}}],["修正に閉じているべき",{"2":{"185":1}}],["修正に閉じていない",{"2":{"112":1}}],["修正に閉じる",{"2":{"122":1}}],["修正に閉じられている",{"2":{"106":2}}],["修正に対して閉じられているべきである",{"2":{"83":1}}],["どの責任に影響があるかを特定するのに時間がかかる",{"2":{"163":1}}],["どちらを選ぶべきか",{"0":{"103":1}}],["どちらも",{"2":{"92":1}}],["どちらもモジュール",{"2":{"1":1}}],["一見よさそうに見えますが",{"2":{"170":1}}],["一部の修正",{"2":{"163":1}}],["一方で関数型では",{"2":{"85":1}}],["賞与",{"2":{"162":1}}],["控除額",{"2":{"162":1}}],["控除項目の追加",{"2":{"152":1}}],["時給",{"2":{"162":1}}],["時間`",{"2":{"151":1,"154":1,"155":1,"159":1,"170":1,"173":1}}],["名前",{"2":{"162":1}}],["あるクラスが従業員の基本情報と給与計算用の一時データを同時に保持している場合",{"2":{"162":1}}],["あなたは既存のecサイトに新しい支払い方法やロイヤリティプログラムを追加する必要があります",{"2":{"124":1}}],["だけでなく",{"2":{"162":1}}],["だが",{"2":{"17":1}}],["処理",{"2":{"162":1}}],["処理の",{"2":{"95":1}}],["も責任に含まれる",{"0":{"162":1}}],["も影響を受ける可能性",{"2":{"154":1}}],["並行開発の実現",{"2":{"161":1}}],["田中太郎",{"2":{"160":3,"174":1}}],["改善後",{"0":{"157":1}}],["問題",{"2":{"154":1,"155":1}}],["問題点",{"0":{"5":1,"21":1,"34":1,"111":1,"152":1},"1":{"8":1,"9":1,"24":1,"25":1,"27":1,"37":1,"38":1,"41":1,"42":1,"114":1,"115":1}}],["5",{"2":{"154":1}}],["50",{"2":{"85":1,"87":1,"90":1,"92":1}}],["正しい構成例",{"0":{"171":1},"1":{"172":1,"173":1,"174":1,"176":1,"177":1}}],["正しい継承",{"2":{"29":1}}],["正規時間と残業時間を分けて計算したい",{"2":{"154":1}}],["ケース2",{"0":{"155":1}}],["ケース1",{"0":{"154":1}}],["ケーススタディ",{"0":{"14":1}}],["保存それぞれの機能に密結合してしまっています",{"2":{"170":1}}],["保存",{"2":{"170":1,"173":1,"174":1}}],["保存形式の変更",{"2":{"152":1}}],["保守が避けられません",{"2":{"186":1}}],["保守が困難になるのです",{"2":{"147":1}}],["保守を行う運用者や管理者",{"2":{"147":1}}],["保守性が向上",{"2":{"189":1}}],["保守性が高い",{"2":{"141":1}}],["保守性",{"2":{"185":1}}],["保守性に課題があります",{"2":{"124":1}}],["保守コストが増大",{"2":{"107":1}}],["集計期間の変更",{"2":{"152":1}}],["残業代の計算ロジックを変更",{"2":{"152":1}}],["技術部門の責任",{"2":{"159":1}}],["技術部門",{"2":{"151":1,"152":1}}],["技術的",{"2":{"147":1}}],["技術的アクター",{"2":{"147":1}}],["労働時間レポートやdb保存",{"2":{"163":1}}],["労働時間レポート",{"2":{"151":1}}],["給与計算仕様を変えたいとき",{"2":{"166":1}}],["給与計算仕様変更",{"2":{"163":1}}],["給与計算用の一時データ",{"2":{"162":1}}],["給与計算のテストはpaycalculatorだけをテストすればよい",{"2":{"161":1}}],["給与計算や労働時間レポートのテストも全てやり直す必要があります",{"2":{"155":1}}],["給与計算ロジックの変更が人事レポートに影響",{"0":{"154":1}}],["給与計算",{"2":{"151":1,"170":1,"173":1,"174":1}}],["経理部門向けの開発",{"2":{"161":1}}],["経理部門の関心",{"2":{"162":1}}],["経理部門の関心事",{"2":{"151":1}}],["経理部門の責任",{"2":{"159":1}}],["経理部門のための変更が",{"2":{"154":1}}],["経理部門が給与計算ロジックを変更しても",{"2":{"161":1}}],["経理部門が",{"2":{"154":1}}],["経理部門",{"2":{"152":1}}],["経営層",{"2":{"147":1}}],["同じ処理をしているから",{"2":{"168":1}}],["同じコードやロジックを繰り返さない",{"2":{"167":1}}],["同じemployeeクラスに対して",{"2":{"149":1}}],["同じ入力に対して常に同じ出力を返しているか",{"2":{"95":1}}],["同じ入力に対して常に同じ出力か",{"2":{"94":1}}],["従業員の基本情報",{"2":{"162":1}}],["従業員",{"2":{"148":1}}],["以下は",{"2":{"148":1}}],["以下のような問題を解決できます",{"2":{"187":1}}],["以下のような視点を持つと",{"2":{"164":1}}],["以下のようなものが該当します",{"2":{"147":1}}],["以下の観点ごとに",{"2":{"94":1}}],["法制度やドメインルールなど",{"2":{"147":1}}],["ルール",{"2":{"147":1}}],["規格",{"2":{"147":1}}],["運用担当",{"2":{"147":1}}],["ビジネス要件の変更を要求する人々",{"2":{"147":1}}],["ビジネスアクター",{"2":{"147":1}}],["顧客など",{"2":{"147":1}}],["営業部門",{"2":{"147":1}}],["外部の制約により変更を強いる存在",{"2":{"147":1}}],["外部システム",{"2":{"147":1}}],["外部インターフェースの仕様策定者なども含まれます",{"2":{"147":1}}],["外の回答",{"2":{"57":1}}],["人事部門向けの開発",{"2":{"161":1}}],["人事部門やdbaの処理には一切影響しない",{"2":{"161":1}}],["人事部門の関心",{"2":{"162":1}}],["人事部門の関心事",{"2":{"151":1}}],["人事部門の責任",{"2":{"159":1}}],["人事部門が使っているreporthours",{"2":{"154":1}}],["人事部門",{"2":{"152":1}}],["人",{"2":{"147":1}}],["提唱者",{"2":{"146":1}}],["しばしば",{"2":{"146":1}}],["しかし現在のコードはsolid原則に従っておらず",{"2":{"124":1}}],["なぜsolidが必要なのか",{"0":{"186":1}}],["なぜ",{"0":{"146":1},"1":{"147":1}}],["など設計上のゴールは共通している",{"2":{"102":1}}],["などで失敗を表現しているか",{"2":{"95":1}}],["などでエラーを表現しているか",{"2":{"94":1}}],["などの制御可能な仕組みで扱っているか",{"2":{"95":1}}],["などを使っているか",{"2":{"95":1}}],["からの変更要求にのみ対応すべきという意味です",{"2":{"145":1}}],["かどうかに注目した設計に変えましょう",{"2":{"36":1}}],["アクターとクラスの関係",{"0":{"149":1,"157":1}}],["アクターとは",{"0":{"147":1},"1":{"149":1,"150":1,"151":1},"2":{"145":1,"147":1}}],["アクター",{"0":{"146":1},"1":{"147":1},"2":{"146":1,"149":1}}],["アプリ通知システム",{"2":{"108":1}}],["uncle",{"2":{"145":1}}],["userid",{"2":{"127":1,"131":1}}],["ログ機能を専用クラスとして分離",{"2":{"173":1}}],["ログ出力の責任が給与計算",{"2":{"170":1}}],["ログ出力を共通化したつもりが",{"2":{"170":1}}],["ログ出力など",{"2":{"95":1}}],["ロバート",{"2":{"145":1}}],["本来の意図は",{"2":{"145":1}}],["本質的な意味です",{"2":{"145":1}}],["本記事では",{"2":{"83":1,"96":1}}],["たった一人のアクター",{"2":{"145":2,"185":1}}],["たとえば",{"2":{"2":1,"18":1,"31":1,"108":1,"147":1,"162":1}}],["矢印元の原則が前提または補助となる",{"2":{"143":1}}],["相互に関連し合っています",{"2":{"142":1}}],["支払い手段の追加",{"2":{"141":1}}],["支払い処理のみに責任を持つ",{"2":{"131":1}}],["支払い処理",{"2":{"127":1}}],["＋リスコフの置換原則",{"0":{"132":1},"1":{"133":1,"134":1}}],["注文確認メール送信",{"2":{"127":2}}],["注意点",{"2":{"69":1,"78":1,"93":1,"99":1}}],["ポイント計算方式の変更が柔軟に",{"2":{"141":1}}],["ポイント計算のみに責任を持つ",{"2":{"131":1}}],["ポイント計算",{"2":{"127":1}}],["ポリモーフィズムや拡張ポイントを利用しているか",{"2":{"178":1,"181":1}}],["ポリモーフィズムを活用して拡張ポイントを明確にする",{"2":{"119":1}}],["ポリモーフィズムを使った拡張",{"2":{"84":1}}],["ポリモーフィズム",{"2":{"84":2}}],["銀行振込処理",{"2":{"127":1,"134":1}}],["クレジットカード処理",{"2":{"127":1,"134":1}}],["クライアントにとって不要なメソッドへの依存を強制しない",{"2":{"185":1}}],["クライアントに返す戻り値",{"2":{"45":1}}],["クライアントが不要なメソッドに依存していないか",{"2":{"178":1,"183":1}}],["クライアントコードに影響なく置き換えられるか",{"2":{"178":1,"182":1}}],["クライアントコードがサブクラスと親クラスを区別せず使えているか",{"2":{"178":1,"182":1}}],["クライアントコードが",{"2":{"22":1}}],["クライアントは自分が使用しないメソッドへの依存を強制されるべきではない",{"2":{"75":1}}],["クラスやモジュールに複数の役割が混在していないか",{"2":{"178":1,"180":1}}],["クラスやインターフェース",{"2":{"102":1}}],["クラス単位で責務を分離する",{"2":{"101":1}}],["クラス単位での責任の明確化を図ります",{"2":{"97":1}}],["クラスの責任が複数あるかを判断しやすくなります",{"2":{"164":1}}],["クラスの振る舞いや構造に対して変更を要求し得る主体を指します",{"2":{"147":1}}],["クラスの変更理由を限定し",{"2":{"143":1}}],["クラスの肥大化",{"2":{"99":1}}],["クラスの継承",{"2":{"93":1}}],["クラスを変更する理由は1つだけであるべき",{"2":{"145":1}}],["クラスを分ける",{"2":{"99":1}}],["クラスを継承した",{"2":{"31":1}}],["クラス",{"2":{"99":1}}],["クラスごとに責務を分離する",{"2":{"97":1}}],["クラスは1つの責任しか持つべきでない",{"2":{"146":1}}],["クラスは",{"2":{"145":1,"185":1}}],["クラスはたった1つの理由でのみ変更されるべきである",{"2":{"96":1}}],["クラスはそれを選んで実装することで",{"2":{"76":1}}],["クラスには変更理由がひとつだけであるべき",{"2":{"146":1}}],["クラスには",{"2":{"31":1}}],["クラスがあるとします",{"2":{"31":1}}],["クラス図",{"0":{"3":1,"8":1,"19":1,"24":1,"30":1,"32":1,"37":1,"54":1,"61":1,"109":1,"114":1,"117":1,"126":1,"130":1,"133":1,"136":1,"139":1,"150":1,"158":1,"169":1,"172":1,"176":1}}],["非solidなコードの問題点",{"0":{"188":1}}],["非solidなコード",{"0":{"125":1},"1":{"126":1,"127":1}}],["システムを利用するユーザーだけでなく",{"2":{"147":1}}],["システムの安定性が保たれます",{"2":{"12":1}}],["シナリオ",{"0":{"124":1}}],["責任の分離",{"0":{"171":1},"1":{"172":1,"173":1,"174":1,"176":1,"177":1}}],["責任の分離の判断基準",{"0":{"164":1}}],["責任",{"2":{"146":1,"178":1,"183":1}}],["責任者",{"2":{"145":1}}],["責任を分離する",{"0":{"156":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1}}],["責任を明確に分離することで",{"2":{"143":1}}],["責任を1つに絞ることで",{"2":{"121":1}}],["責務が明確に分離されているか",{"2":{"178":1,"180":1}}],["責務が複数混在していないか",{"2":{"178":1,"180":1}}],["責務",{"2":{"102":1}}],["責務の分離",{"2":{"99":1,"102":1}}],["責務分離や抽象化を適切に設計することで",{"2":{"69":1}}],["適切に抽象化された",{"2":{"119":1}}],["適用可能な原則と限界",{"2":{"72":1}}],["設計が複雑になる危険があります",{"2":{"167":1}}],["設計がしやすくなる",{"2":{"121":1}}],["設計により",{"2":{"122":1}}],["設計段階で",{"2":{"119":1}}],["設計原則を理解し",{"2":{"104":1}}],["キャンペーンのお知らせ",{"2":{"118":1}}],["いる状態",{"2":{"116":1}}],["いるが",{"2":{"116":1}}],["閉じて",{"2":{"116":1}}],["閉鎖原則",{"0":{"83":1},"1":{"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1},"2":{"15":1,"72":1,"83":2,"101":1}}],["開発後の変更要求に柔軟に対応できる",{"2":{"185":1}}],["開発者など",{"2":{"147":1}}],["開発",{"2":{"147":1}}],["開かれて",{"2":{"116":1}}],["開放",{"0":{"83":1},"1":{"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1},"2":{"15":1,"72":1,"83":2,"101":1}}],["＝単一責任",{"2":{"177":1}}],["＝",{"2":{"112":1}}],["＝リスコフの置換原則",{"2":{"65":1}}],["＝リスコフの置換原則違反",{"2":{"34":1}}],["よくある誤解",{"0":{"168":1},"1":{"169":1,"170":1}}],["ようこそ",{"2":{"112":1}}],["より弱い事前条件になっている",{"2":{"49":1}}],["より強い事前条件になっているため",{"2":{"49":1}}],["通知ごとにクラスを分離すれば",{"2":{"113":1}}],["通知手段を拡張できる設計にする",{"0":{"113":1},"1":{"114":1,"115":1,"116":1,"117":1,"118":1}}],["通知種別ごとの責任が1クラスに集中",{"2":{"111":1}}],["通知方法が増えるたびに",{"2":{"111":1}}],["バグのリスクが高まる",{"2":{"111":1}}],["ユーザーや関係者",{"2":{"145":1}}],["ユーザーに対して様々な方法で通知を送る仕組みです",{"2":{"108":1}}],["ユニオン型",{"2":{"82":1}}],["ユニオン型とパターンマッチにより",{"2":{"81":1}}],["ユニットテスト",{"0":{"58":1},"1":{"59":1}}],["新機能の追加が容易",{"2":{"189":1}}],["新機能追加のたびに既存コードを変更する必要がある",{"2":{"107":1}}],["新たな",{"2":{"166":1}}],["新たに追加",{"2":{"118":1}}],["新規拡張は",{"2":{"116":1}}],["新しい振る舞いを既存コードの変更なしに追加できる構成か",{"2":{"178":1,"181":1}}],["新しい機能追加の際に既存クラスを修正していないか",{"2":{"178":1,"181":1}}],["新しいクラスに抽出する",{"2":{"164":1}}],["新しい支払い方法を追加するたびにこのメソッドを変更する必要がある",{"2":{"127":1}}],["新しい実装の追加が安全に行える",{"2":{"121":1}}],["新しい通知方式を追加しても既存コードを触らずに済みます",{"2":{"113":1}}],["新しい要件や機能を追加できる",{"2":{"106":1}}],["新しい値を返しているか",{"2":{"95":1}}],["新しい図形の追加",{"0":{"88":1},"1":{"89":1,"90":1,"91":1,"92":1},"2":{"89":1,"90":1}}],["新しい図形を追加する場合",{"2":{"84":1}}],["べきという原則です",{"2":{"106":1}}],["ソフトウェアの変更に対する柔軟性と安定性のバランスを実現します",{"2":{"122":1}}],["ソフトウェアの構成要素は",{"2":{"106":1}}],["ソフトウェア実体は拡張に対して開かれており",{"2":{"83":1}}],["補完しあう設計スタイルです",{"2":{"104":1}}],["補足",{"0":{"43":1,"167":1,"175":1},"1":{"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"176":1,"177":1}}],["最後に",{"0":{"104":1}}],["最小構成の関数をテスト可能",{"2":{"78":1}}],["文脈に応じて使い分けるのが理想",{"2":{"103":1}}],["小さなインターフェースを提供し",{"2":{"185":1}}],["小さく目的ごとに分割されたインターフェースを使うことを推奨します",{"2":{"75":1}}],["小規模なロジックや副作用の少ない処理には関数型が適している",{"2":{"103":1}}],["両者とも",{"2":{"102":1}}],["両者は抽象に依存すべきである",{"2":{"66":1}}],["依存オブジェクトをモック注入できる",{"2":{"141":1}}],["依存注入で差し替え可能に",{"2":{"101":1}}],["依存性逆転",{"2":{"178":1}}],["依存性逆転の原則を自然な形で実現できます",{"2":{"69":1}}],["依存性逆転の原則に違反している例",{"0":{"2":1},"1":{"3":1,"4":1,"5":1}}],["依存性逆転の原則とは",{"0":{"1":1}}],["依存性逆転の原則",{"0":{"0":1,"66":1,"138":1,"184":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"67":1,"68":1,"69":1,"139":1,"140":1},"2":{"13":1,"15":1,"27":1,"65":1,"66":1,"72":1,"101":1,"121":1,"143":1,"185":1}}],["依存性の注入",{"2":{"69":1}}],["構成する",{"2":{"101":1}}],["構造",{"2":{"93":1}}],["構造の保証",{"2":{"81":1}}],["生成と出力という異なる責務を別クラスに分けることで",{"2":{"97":1}}],["内容",{"2":{"97":1,"98":1}}],["使用例",{"2":{"97":1,"98":1}}],["使えない機能",{"2":{"21":1}}],["json",{"2":{"97":1,"98":1,"155":1}}],["暗黙の共有状態を避けているか",{"2":{"95":1}}],["暗黙の共有状態を使っていないか",{"2":{"94":1}}],["特定のデータ構造に依存したロジックになっていないか",{"2":{"95":1}}],["特にオブジェクト指向プログラミングにおいて重要です",{"2":{"185":1}}],["特にdiと併用時",{"2":{"93":1}}],["特にsolid",{"2":{"71":1}}],["汎用的で再利用可能な設計になっているか",{"2":{"95":1}}],["汎用的な関数が再利用可能な構造になっているか",{"2":{"94":1}}],["命令型構文",{"2":{"95":1}}],["手順",{"2":{"95":1}}],["疎結合と柔軟な拡張性を両立",{"2":{"143":1}}],["疎結合な設計になっているか",{"2":{"95":1}}],["疎結合の設計になっているか",{"2":{"94":1}}],["ミュータブルなデータ構造を使用していないか",{"2":{"95":1}}],["ミュータブルなデータ構造の使用を避けているか",{"2":{"94":1}}],["ランダムや日時など非決定的な要素を扱っていないか",{"2":{"95":1}}],["ランダムや日時など非決定的要素を扱っていないか",{"2":{"94":1}}],["■",{"2":{"95":10}}],["状態",{"0":{"162":1},"2":{"162":1}}],["状態を持たない分",{"2":{"102":1}}],["状態共有がない代わりにパイプライン管理が必要",{"2":{"99":1}}],["状態や変数を変更せず",{"2":{"95":1}}],["状態や副作用に依存せずに検証できるか",{"2":{"95":1}}],["状態や副作用に依存せず",{"2":{"94":1}}],["状態の変化が明示的に設計されているか",{"2":{"95":1}}],["状態の変化が明示的に管理されているか",{"2":{"94":1}}],["状態の明示的な管理",{"2":{"94":1,"95":1}}],["純粋なデータクラス",{"2":{"159":1}}],["純粋で",{"2":{"95":1}}],["純粋でテストしやすいか",{"2":{"94":1}}],["純粋関数",{"2":{"94":1,"95":1}}],["エラー処理が関数合成の一部として管理されているか",{"2":{"95":1}}],["エラー処理が合成の一部として扱われているか",{"2":{"94":1}}],["エラーハンドリングの明示性",{"2":{"94":1,"95":1}}],["等のエフェクト型を利用しているか",{"2":{"94":1}}],["等を使っているか",{"2":{"94":1}}],["hourreportable",{"2":{"177":1}}],["hourreporter",{"2":{"159":1,"160":3,"166":1,"173":1,"174":3}}],["hoursworked",{"2":{"151":3,"154":5,"155":5,"159":3,"170":2,"173":3}}],["hourlyrate",{"2":{"151":2,"154":3,"155":4,"159":2,"170":1,"173":2}}],["have",{"2":{"146":1}}],["http",{"2":{"95":1}}],["http通信やログ出力などは明示的に管理されているか",{"2":{"94":1}}],["higher",{"2":{"94":1,"95":1}}],["height",{"2":{"41":2,"51":1,"56":10,"62":5,"89":2,"91":2,"92":1}}],["何をしたいか",{"2":{"94":1}}],["宣言的スタイル",{"2":{"94":1,"95":1}}],["や役割を指します",{"2":{"145":1}}],["やプレーンな形式で使いやすい",{"2":{"95":1}}],["や",{"2":{"94":1,"95":1,"166":1}}],["合成性",{"2":{"94":1,"95":1}}],["更新処理が新しい値を返すようになっているか",{"2":{"94":1}}],["変更の影響範囲が局所的で",{"2":{"189":1}}],["変更の影響が他のアクターに波及しません",{"2":{"157":1}}],["変更の局所化",{"2":{"161":1}}],["変更の可能性がある部分を特定し",{"2":{"119":1}}],["変更理由が明確になり",{"2":{"185":1}}],["変更理由が複数になり",{"2":{"147":1}}],["変更理由を1つに絞ることで",{"2":{"166":1}}],["変更理由を限定できる",{"2":{"121":1}}],["変更理由",{"2":{"146":1,"178":1,"180":1}}],["変更を要求する利害関係者",{"2":{"145":1}}],["変更がクラス追加のみで可能",{"2":{"141":1}}],["変数や状態を変更していないか",{"2":{"94":1}}],["変換できるかを探る",{"2":{"71":1}}],["不変性",{"2":{"94":1,"95":1}}],["不要なメソッドの空実装や例外的実装が発生していないか",{"2":{"178":1,"183":1}}],["不要な機能を含まないことで容易になる",{"2":{"78":1}}],["不要な依存を避ける構成が自然に実現されます",{"2":{"77":1}}],["□",{"2":{"94":29,"178":25}}],["柔軟で保守性の高いコードを生む第一歩となります",{"2":{"104":1}}],["柔軟だが型の設計が重要",{"2":{"93":1}}],["柔軟性",{"2":{"93":1}}],["柔軟性に影響を与えるかを明らかにします",{"2":{"70":1}}],["高レベルモジュールが低レベルの具体実装に依存していないか",{"2":{"178":1,"184":1}}],["高階関数や引数による依存関数の注入",{"2":{"101":1}}],["高階関数",{"2":{"94":1,"95":1}}],["高凝集",{"2":{"94":1,"95":1}}],["高い",{"2":{"93":1}}],["高さが変化し",{"2":{"52":1}}],["高さは変化しない",{"2":{"51":1}}],["データ構造が異なるアクターに属する場合もsrp違反となり得ます",{"2":{"162":1}}],["データ構造と処理が明確に分離されているか",{"2":{"95":1}}],["データ構造と処理が分かれているか",{"2":{"94":1}}],["データベース処理のモックを用意する必要がない",{"2":{"161":1}}],["データベースに保存",{"2":{"160":1}}],["データベースの変更のためにemployeeクラスを修正すると",{"2":{"155":1}}],["データベースの種類変更",{"2":{"152":1}}],["データベースをmongodbに変更したい",{"2":{"155":1}}],["データベース変更がビジネスロジックに影響",{"0":{"155":1}}],["データベース保存",{"2":{"151":1}}],["データと処理の分離",{"2":{"94":1,"95":1}}],["データ型と関数の追加",{"2":{"93":1}}],["データ駆動で拡張を行う構成が有効です",{"2":{"85":1}}],["75",{"2":{"90":1,"92":1}}],["6",{"2":{"90":1,"92":1}}],["66",{"2":{"85":1,"87":1}}],["bob",{"2":{"145":1}}],["banktransferpayment",{"2":{"134":1}}],["bank",{"2":{"127":1}}],["base",{"2":{"89":2,"91":2,"92":1}}],["before",{"0":{"125":1},"1":{"126":1,"127":1}}],["birdならばflyできる",{"2":{"35":1}}],["bird",{"2":{"31":2,"33":3,"34":1,"35":3,"38":3,"80":3,"81":5}}],["拡張のために既存のコード",{"2":{"178":1,"181":1}}],["拡張の単位",{"2":{"93":1}}],["拡張しやすい構造を実現できる",{"2":{"121":1}}],["拡張に開かれている",{"2":{"106":1}}],["拡張に開かれ",{"2":{"106":1,"122":1,"185":1}}],["拡張例",{"0":{"88":1},"1":{"89":1,"90":1,"91":1,"92":1}}],["拡張性が高く",{"2":{"189":1}}],["拡張性の確保",{"2":{"102":1}}],["拡張性",{"2":{"69":1,"78":1,"99":1,"185":1}}],["$",{"2":{"87":1,"92":1,"97":1,"98":1,"110":3,"115":3,"118":1,"140":1,"151":2,"154":2,"155":2,"159":2,"170":3,"173":3}}],["2つ以上あればsrp違反の可能性が高い",{"2":{"164":1}}],["2000年代にrobert",{"2":{"185":1}}],["2000",{"2":{"160":1,"174":1}}],["2",{"2":{"86":2,"89":1,"91":3}}],["26548245743669",{"2":{"85":2,"87":2,"90":2,"92":2}}],["パターンマッチングとデータ駆動の拡張",{"2":{"86":1}}],["既存クラスを開いて書き換える必要がある",{"2":{"112":1}}],["既存コードを壊さずに新しい振る舞いを追加できる",{"2":{"185":1}}],["既存コードを変更せずに拡張する",{"2":{"121":1,"166":1}}],["既存コードを変更せずに機能を追加できるが",{"2":{"143":1}}],["既存コードを変更せずに機能を拡張する",{"2":{"65":1}}],["既存コードを変更せずに機能拡張することが可能です",{"2":{"83":1}}],["既存コードの修正によるバグ発生リスク",{"2":{"107":1}}],["既存の",{"2":{"166":1}}],["既存の動作には",{"2":{"116":1}}],["既存のコードは一切変更しない",{"2":{"116":1}}],["既存の安定したコードを変更しなくてもよい",{"2":{"106":1}}],["既存のロジックを変更せずに新しい振る舞いを追加する",{"2":{"92":1}}],["既存の分岐や処理を修正せずに拡張が可能になります",{"2":{"85":1}}],["分離の検討をする",{"2":{"164":1}}],["分離のメリット",{"0":{"161":1},"1":{"166":1}}],["分離すべき設計かもしれません",{"2":{"162":1}}],["分岐の集中を避けるために関数のマッピング",{"2":{"85":1}}],["分割しすぎると煩雑化",{"2":{"78":1}}],["分割の単位",{"2":{"78":1}}],["カプセル化",{"2":{"84":1}}],["オープンクローズド",{"2":{"178":1}}],["オープンクローズド原則",{"0":{"132":1},"1":{"133":1,"134":1}}],["オープンクローズドの原則は",{"2":{"122":1}}],["オープンクローズドの原則に違反する可能性が高まる",{"2":{"39":1}}],["オープンクローズドの原則",{"0":{"105":1,"181":1},"1":{"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1},"2":{"12":1,"13":1,"65":1,"116":1,"143":1,"166":1,"185":1}}],["オブジェクト指向",{"2":{"100":1}}],["オブジェクト指向プログラミング",{"2":{"96":1}}],["オブジェクト指向の三大要素",{"2":{"84":1}}],["異なるアクターの責任をインターフェースとして分離することで",{"2":{"175":1}}],["異なるアクターが関心を持つメソッドが混在していたら",{"2":{"164":1}}],["異なる責任を持つ処理を1つの関数やクラスにまとめるのは危険です",{"2":{"168":1}}],["異なるクラスのオブジェクトが同じインターフェースやメソッドを共有し",{"2":{"84":1}}],["異なるパラダイムでの設計例を通じて読者の理解を深める",{"2":{"71":1}}],["意図しない別の場所に影響してバグが発生する",{"2":{"188":1}}],["意図しないオーバーライドに注意",{"2":{"82":1}}],["意図",{"2":{"95":1}}],["意味的な一致まで注意が必要です",{"2":{"82":1}}],["継承関係の一貫性を保ち",{"2":{"185":1}}],["継承とポリモーフィズム",{"2":{"93":1}}],["継承とインターフェース",{"2":{"82":1}}],["継承",{"2":{"84":1}}],["継承や共通インターフェースを使うoopでは",{"2":{"82":1}}],["明示的な分岐で安全な選択",{"2":{"82":1}}],["明示的に",{"2":{"81":1}}],["置換の安全性",{"2":{"82":1}}],["置き換え可能な設計＝リスコフの置換原則に準拠した設計になります",{"2":{"38":1,"80":1}}],["タグ付き構造",{"2":{"82":1}}],["kind",{"2":{"81":3,"84":3,"85":1,"86":4,"87":3,"89":1,"90":1,"91":4,"92":4}}],["組み合わせで対応",{"2":{"78":1}}],["モジュール単位でのテストが容易",{"2":{"189":1}}],["モジュール同士の結びつきが強く",{"2":{"188":1}}],["モジュール間の独立性が高まる",{"2":{"185":1}}],["モジュール",{"2":{"147":1}}],["モジュールの独立性と再利用性を高める",{"2":{"143":1}}],["モジュールの関心が明確になります",{"2":{"77":1}}],["モックによる検証が必要",{"2":{"82":1}}],["モックオブジェクトの注入",{"2":{"69":1}}],["副作用を外部から注入する形で",{"2":{"102":1}}],["副作用を分離する",{"2":{"99":1,"101":1}}],["副作用を分離することで",{"2":{"98":1}}],["副作用を持たないか",{"2":{"94":1}}],["副作用のある処理",{"2":{"95":1}}],["副作用の封じ込め",{"2":{"94":1,"95":1}}],["副作用は関数の外に押し出されているか",{"2":{"94":1}}],["副作用",{"2":{"77":1}}],["各アクターが自分の関心事だけを持つクラスと関わるため",{"2":{"157":1}}],["各アクターの責任を別々のクラスに分離します",{"2":{"156":1}}],["各原則は独立していますが",{"2":{"142":1}}],["各原則の実装チェックリストはこちら",{"2":{"185":1}}],["各原則のチェックリスト",{"0":{"178":1}}],["各原則の適用比較",{"0":{"101":1}}],["各原則の一覧",{"0":{"13":1}}],["各クラスが1つの責任に集中し",{"2":{"141":1}}],["各機能",{"2":{"77":1}}],["余計な依存を避けることができます",{"2":{"76":1}}],["肥大化したインターフェースから生じる影響を避け",{"2":{"75":1}}],["テキスト版チェックリストです",{"2":{"95":1}}],["テキスト版はこちら",{"2":{"94":1,"178":1}}],["テキスト形式",{"2":{"74":1}}],["テストがしにくい",{"2":{"188":1}}],["テストしやすいように",{"2":{"178":1,"180":1}}],["テスト対象が多く",{"2":{"163":1}}],["テストの簡素化",{"2":{"161":1}}],["テストのしやすさ",{"2":{"94":1,"95":1,"99":1}}],["テスト容易",{"2":{"141":1}}],["テスト容易性",{"2":{"69":1,"78":1,"102":1}}],["テスト済みの既存コードに手を加えることになるため",{"2":{"111":1}}],["テスト範囲が広がり",{"2":{"107":1}}],["テスト性",{"2":{"82":1}}],["テスト用モックや依存注入",{"2":{"99":1}}],["テスト用関数の差し替え",{"2":{"69":1}}],["テスト用のモックロガーなど",{"2":{"67":1}}],["テストに失敗する",{"2":{"42":1,"58":1}}],["テストコード",{"0":{"42":1}}],["テスト時には以下のように差し替えることができます",{"2":{"68":1}}],["テスト時には",{"2":{"10":1}}],["表形式",{"2":{"74":1}}],["まだ対応していない",{"2":{"112":1}}],["また",{"2":{"98":1}}],["または戻り値として扱っているか",{"2":{"95":1}}],["またはエラーの可能性",{"2":{"35":1}}],["まとめ",{"0":{"122":1},"2":{"72":1}}],["比較ページ",{"2":{"72":1}}],["比較まとめ",{"0":{"69":1,"78":1,"82":1}}],["原則は",{"2":{"167":1}}],["原則間の矢印は",{"2":{"143":1}}],["原則違反のリスク",{"0":{"112":1}}],["原則に違反",{"0":{"111":1},"1":{"114":1,"115":1}}],["原則に違反した例",{"0":{"108":1},"1":{"109":1,"110":1,"111":1}}],["原則に違反するとどうなるか",{"0":{"6":1,"22":1,"35":1,"163":1}}],["原則",{"2":{"101":1,"178":1,"185":1}}],["原則名",{"2":{"72":1}}],["今後の内容予定",{"0":{"72":1}}],["対比の目的",{"0":{"71":1}}],["の挙動に影響を与える可能性があります",{"2":{"154":1}}],["の解釈が変わってしまうかもしれない",{"2":{"154":1}}],["の仕様を変更したい",{"2":{"152":3}}],["の関心事",{"2":{"151":1}}],["の視点が本質になります",{"2":{"146":1}}],["の観点が重要か",{"0":{"146":1},"1":{"147":1}}],["の適用方法と考え方の違いを総括します",{"2":{"100":1}}],["の一つです",{"2":{"84":1}}],["の実践です",{"2":{"83":1}}],["の飛行不能を表現することで",{"2":{"81":1}}],["の意図や効果を再確認する",{"2":{"71":1}}],["の考え方を比較し",{"2":{"70":1}}],["の機能をすべて持つ",{"2":{"18":1}}],["別の関数を注入することで対応",{"2":{"69":1}}],["コンストラクタ注入",{"2":{"178":1,"184":1}}],["コンストラクタやsetterなど",{"2":{"69":1}}],["コンパイルエラー",{"2":{"80":1}}],["コードの再利用性が高く",{"2":{"189":1}}],["コードの構造が複雑で",{"2":{"188":1}}],["コード",{"0":{"4":1,"9":1,"20":1,"25":1,"33":1,"38":1,"41":1,"56":1,"62":1,"110":1,"115":1,"118":1,"127":1,"131":1,"134":1,"137":1,"140":1,"151":1,"159":1,"170":1,"173":1,"177":1},"1":{"57":1,"63":1}}],["観点",{"2":{"69":1,"78":1,"82":1,"93":1,"94":1,"99":1}}],["メール送信のみに責任を持つ",{"2":{"131":1}}],["メッセージを配列などに記録することで検証できる",{"2":{"68":1}}],["メソッドごとに",{"2":{"164":1}}],["メソッド",{"2":{"162":1}}],["メソッドの正常終了時のインスタンスの状態",{"2":{"45":1}}],["メソッドの引数",{"2":{"44":1}}],["メソッド正常終了時に保証されるべき条件",{"2":{"45":1}}],["メソッド開始時のインスタンスの状態",{"2":{"44":1}}],["メソッド開始時に保証されるべき条件",{"2":{"44":1}}],["メソッドがあり",{"2":{"31":1}}],["具体的なリスク",{"0":{"153":1},"1":{"154":1,"155":1,"157":1,"158":1,"159":1}}],["具体的な出力方法には依存していません",{"2":{"68":1}}],["具象クラスへの直接依存を避け",{"2":{"121":1}}],["具象クラスではなく抽象",{"2":{"65":1}}],["具象クラスではなく抽象に依存する設計が求められます",{"2":{"27":1}}],["上位モジュールと下位モジュールは抽象に依存すべき",{"2":{"185":1}}],["上位モジュールが下位モジュールに依存していないか",{"2":{"178":1,"184":1}}],["上位モジュールは下位モジュールに依存すべきではない",{"2":{"66":1}}],["上位のモジュールは下位モジュールに依存してはならない",{"2":{"1":1}}],["9",{"2":{"63":1,"90":1,"92":1}}],["想定読者",{"0":{"73":1}}],["想定",{"2":{"57":1}}],["違反例",{"0":{"55":1},"1":{"56":1,"57":1,"58":1,"59":1}}],["with",{"2":{"190":1}}],["width",{"2":{"51":5,"52":5,"56":10,"62":5}}],["wight",{"2":{"41":2}}],["05",{"2":{"137":1}}],["01",{"2":{"127":1,"137":1}}],["0",{"2":{"48":1,"56":2,"62":3,"84":1,"86":1,"127":2,"131":1,"137":2,"154":1}}],[">",{"2":{"48":1,"49":2}}],["x3c",{"2":{"86":1,"91":1}}],["x26",{"2":{"51":2}}],["x",{"2":{"48":2,"49":3}}],["事後条件",{"2":{"51":1,"52":1}}],["事後条件はスーパータイプと同じかそれより強い条件",{"0":{"50":1},"1":{"51":1,"52":1,"54":1}}],["事後条件とは",{"0":{"45":1}}],["事前条件",{"2":{"48":1,"49":2}}],["事前条件はスーパータイプと同じかそれより弱い条件",{"0":{"47":1},"1":{"48":1,"49":1}}],["事前条件とは",{"0":{"44":1}}],["厳密で信頼性の高いソフトウェアを構築するための設計技法",{"2":{"43":1}}],["契約完了",{"2":{"112":1}}],["契約",{"2":{"43":1,"119":1}}],["契約による設計においての",{"0":{"46":1}}],["契約による設計",{"0":{"43":1},"1":{"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1}}],["満たすべき仕様",{"2":{"43":1}}],["プログラムコードの中に",{"2":{"43":1}}],["1つのクラスは1人のアクター",{"2":{"145":1}}],["1つのアクター",{"2":{"145":1}}],["1つの変更理由",{"2":{"145":1}}],["160時間",{"2":{"160":1}}],["160",{"2":{"154":2,"160":1,"174":1}}],["16",{"2":{"57":1,"85":1,"87":1,"90":1,"92":1}}],["16となり",{"2":{"42":1,"58":1}}],["1",{"2":{"49":1,"59":2,"97":1,"98":1,"154":1}}],["10",{"2":{"49":1}}],["12",{"2":{"42":2,"57":2,"58":2,"63":1}}],["4",{"2":{"42":2,"56":2,"58":2,"62":1,"85":2,"87":2,"90":2,"92":2}}],["320000",{"2":{"160":1}}],["3つの異なる部門",{"2":{"149":1}}],["3",{"2":{"42":2,"56":2,"58":2,"62":2,"90":1,"92":1}}],["振る舞いの変更に気付くには",{"0":{"40":1},"1":{"41":1,"42":1}}],["振る舞いの同等性",{"2":{"29":1}}],["robert",{"2":{"146":1,"190":3}}],["radius",{"2":{"84":3,"86":2,"87":1,"91":2,"92":1}}],["runapplication",{"2":{"68":3}}],["run",{"2":{"56":2,"62":2,"67":2}}],["r1",{"2":{"42":4,"58":4}}],["refactoring",{"2":{"190":1}}],["repeat",{"2":{"167":1}}],["repository",{"2":{"160":2,"174":2}}],["reporthours",{"2":{"151":1,"152":1,"154":2,"155":1}}],["report",{"2":{"97":4,"98":4,"159":1,"160":1,"170":1,"173":1,"174":1,"177":1}}],["reportprinter",{"2":{"97":2}}],["reportgenerator",{"2":{"97":2}}],["regularhours",{"2":{"154":2}}],["regularcustomerpoints",{"2":{"137":1}}],["reason",{"2":{"146":1}}],["responsibility",{"0":{"144":1},"1":{"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1},"2":{"96":1,"145":1}}],["result",{"2":{"94":1,"95":1}}],["record",{"2":{"86":1,"91":1}}],["rectable",{"2":{"62":4}}],["rectangle",{"2":{"41":1,"42":3,"56":4,"58":4,"62":2}}],["reduce",{"2":{"84":1,"86":1,"94":1,"95":1}}],["return",{"2":{"41":1,"56":2,"62":2,"84":3,"89":1,"97":1,"127":1,"137":2,"151":2,"154":2,"155":2,"159":2,"170":2,"173":2}}],["r",{"2":{"39":1,"41":4,"56":4}}],["リリース後の機能追加",{"2":{"186":1}}],["リファクタリング時の指針",{"0":{"164":1}}],["リスコフの置換条件違反",{"2":{"49":1,"52":1}}],["リスコフの置換原則に違反するとどうなるか",{"0":{"39":1}}],["リスコフの置換原則に違反した例",{"0":{"31":1},"1":{"32":1,"33":1,"34":1}}],["リスコフの置換原則とは",{"0":{"29":1},"1":{"30":1}}],["リスコフの置換原則",{"0":{"28":1,"79":1,"182":1},"1":{"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"80":1,"81":1,"82":1},"2":{"12":1,"13":1,"15":1,"72":1,"79":1,"101":1,"121":1,"143":1,"178":1,"185":1}}],["リコリスの置換原則に違反したコードを使うと",{"2":{"39":1}}],["ステークホルダー",{"2":{"145":1}}],["ストリームやデータ構造を用いて管理されているか",{"2":{"95":1}}],["ストリームやデータ構造を使って状態変化を記述しているか",{"2":{"94":1}}],["スーパータイプより事後条件となるため",{"2":{"52":1}}],["スーパータイプ",{"0":{"48":1,"51":1},"2":{"56":1}}],["スーパータイプとサブタイプで振る舞いが変更されていることを確認する最も簡単な方法は単体テストを書くこと",{"2":{"40":1}}],["スズメが飛んだ",{"2":{"38":1,"80":1}}],["スキャンできる",{"2":{"22":1}}],["スキャンしました",{"2":{"20":1,"25":1}}],["スキャン",{"2":{"18":1}}],["鳴くなど",{"2":{"38":1,"80":1}}],["例えば",{"2":{"166":1}}],["例外ではなく",{"2":{"95":1}}],["例外に依存していないか",{"2":{"94":1}}],["例",{"2":{"38":1,"80":1,"152":3,"163":1}}],["鳥＝飛ぶもの",{"2":{"36":1}}],["つまり",{"2":{"36":1,"145":1,"147":1}}],["飛べない鳥",{"2":{"36":1}}],["飛べる鳥",{"2":{"36":1}}],["飛べる",{"2":{"36":1}}],["飛べません",{"2":{"34":1}}],["ことが実現しやすくなります",{"2":{"166":1}}],["ことを推奨しますが",{"2":{"167":1}}],["ことを意味します",{"2":{"143":1}}],["ことを目指しますが",{"2":{"65":1}}],["ことでdipの考え方を自然に実現できます",{"2":{"68":1}}],["これらの原則は",{"2":{"185":1}}],["これらを実装するクラスは",{"2":{"177":1}}],["これらが1つのクラスに混在すると",{"2":{"147":1}}],["これを",{"2":{"145":1}}],["これは誰のための処理か",{"2":{"164":1}}],["これはocpに適合した設計です",{"2":{"84":1}}],["これは典型的な",{"2":{"83":1}}],["これは",{"2":{"75":1,"112":1}}],["これによりocpの",{"2":{"121":1}}],["これにより",{"2":{"67":1,"85":1,"166":1}}],["これも",{"2":{"65":1}}],["ここで誤動作",{"2":{"35":1}}],["このクラスは1つの理由でしか変更されないか",{"2":{"178":1,"180":1}}],["このクラスは3つの異なるアクターに対して責任を持っています",{"2":{"152":1}}],["このクラスを変更する理由は何個あるか",{"2":{"164":1}}],["この構造では",{"2":{"157":1}}],["この変更により",{"2":{"154":1}}],["この図が示すように",{"2":{"149":1}}],["この",{"2":{"146":2}}],["この設計の利点",{"0":{"141":1}}],["この設計は",{"2":{"34":1,"177":1}}],["この機能は将来的に種類が増えるかもしれない",{"2":{"119":1}}],["この原則の適用には",{"2":{"143":1}}],["この原則の要点",{"0":{"106":1}}],["この原則が解決する問題",{"0":{"107":1}}],["このセクションでは",{"2":{"70":1,"100":1}}],["このようにログ出力をdryの観点から共通化すると",{"2":{"170":1}}],["このように",{"2":{"92":1,"97":1,"162":1}}],["このようにすれば",{"2":{"38":1,"80":1}}],["このように分離することで",{"2":{"25":1}}],["このプリンタはfaxできません",{"2":{"20":1}}],["このプリンタはスキャンできません",{"2":{"20":1}}],["で",{"2":{"145":1}}],["で抽象化し",{"2":{"102":1}}],["です",{"2":{"34":1,"147":1}}],["ではなく",{"2":{"95":1}}],["では意図しない動作や例外が発生するかもしれません",{"2":{"34":1}}],["では",{"2":{"12":1,"27":1,"65":1}}],["型ガードと構造的な安全性による置換保証",{"2":{"101":1}}],["型に基づいた処理の分離が行われているか",{"2":{"94":1}}],["型に対してのみ",{"2":{"38":1,"80":1}}],["型定義と関数マップを拡張することで対応します",{"2":{"90":1}}],["型の肥大化とcaseの集中化",{"2":{"93":1}}],["型の分離により検証容易",{"2":{"82":1}}],["型の置換が意味的にも安全",{"2":{"81":1}}],["型の置き換えができない",{"2":{"34":1}}],["型で表現され防止しやすい",{"2":{"82":1}}],["型で受け取って",{"2":{"34":1}}],["型ごとの明確な分離",{"2":{"81":1}}],["型不一致",{"2":{"80":1}}],["ペンギン",{"2":{"34":1}}],["空を飛ぶ",{"2":{"33":1}}],["すべての鳥が飛べる前提です",{"2":{"31":1}}],["filter",{"2":{"94":1,"95":1}}],["for文やif文",{"2":{"95":1}}],["for文やif文など命令型スタイルを避け",{"2":{"94":1}}],["foreach",{"2":{"85":1,"87":1,"90":1,"92":1,"115":1}}],["functions",{"2":{"94":2,"95":2}}],["functional",{"0":{"94":1,"95":1}}],["function",{"2":{"84":1}}],["fpでは",{"2":{"102":1}}],["fpでは関数の責任を明示的に分離することで",{"2":{"78":1}}],["fpでは関数の構成と引数単位の依存注入によってispを達成できます",{"2":{"75":1}}],["fpは関数とデータで抽象化する",{"2":{"102":1}}],["fpの拡張例",{"0":{"91":1}}],["fpの例",{"2":{"86":1,"98":1}}],["fpにおける実践",{"2":{"101":1}}],["fpにおけるsrpの実装例",{"0":{"98":1}}],["fpにおけるocpの実装例",{"0":{"86":1},"1":{"87":1}}],["fpにおけるlspの実装例",{"0":{"81":1}}],["fpにおけるispの実装例",{"0":{"77":1}}],["fp",{"2":{"69":1,"70":1,"78":1,"82":1,"93":1,"96":1,"99":1}}],["failed",{"2":{"59":1}}],["faxnotifier",{"2":{"118":2}}],["faxnotifierを新規追加するだけで対応でき",{"2":{"116":1}}],["faxに対応するには",{"2":{"112":1}}],["faxが新しく追加されたが",{"2":{"112":1}}],["faxを送信しました",{"2":{"20":1,"25":1}}],["fax",{"2":{"18":1,"20":3,"25":4,"112":1}}],["from",{"2":{"58":1}}],["f",{"2":{"41":1,"42":2,"56":3,"58":3,"62":3}}],["flyer",{"2":{"38":3,"80":6}}],["fly",{"2":{"31":1,"33":1,"34":1,"35":2,"38":4,"80":5,"81":3}}],["+",{"0":{"178":1},"2":{"29":1,"84":1,"86":1,"154":1}}],["サブクラスで例外的な動作",{"2":{"178":1,"182":1}}],["サブクラスでの実装を強制することができる",{"2":{"17":1}}],["サブクラスが親クラスの期待する振る舞いをすべて満たしているか",{"2":{"178":1,"182":1}}],["サブクラスが期待どおりに機能することで",{"2":{"143":1}}],["サブクラス化や委譲",{"2":{"99":1}}],["サブタイプに置き換えても振る舞いが維持されるため",{"2":{"121":1}}],["サブタイプが安全に置き換え可能であること",{"2":{"65":1}}],["サブタイプが正しく置き換え可能であること",{"2":{"65":1}}],["サブタイプ",{"0":{"49":1,"52":1},"2":{"56":1}}],["サブタイプの事後条件はスーパータイプと同じかそれより強い条件と置き換える",{"2":{"46":1}}],["サブタイプの事前条件はスーパータイプと同じかそれより弱い条件と置き換え",{"2":{"46":1}}],["サブタイプの事前条件と事後条件",{"0":{"46":1}}],["サブタイプはスーパータイプと置換可能でなければならない",{"2":{"185":1}}],["サブタイプは",{"2":{"29":1}}],["必要最小限のインターフェースに依存できるようになり",{"2":{"27":1}}],["必要な関数だけを構成する",{"2":{"78":1}}],["必要な関数だけを構成要素として渡すことで",{"2":{"77":1}}],["必要なインターフェースだけ",{"2":{"25":1}}],["必要な機能だけを持つインターフェースを定義し",{"2":{"76":1}}],["必要な機能だけ",{"2":{"25":1}}],["→",{"2":{"25":1,"152":3,"162":2}}],["機能追加や仕様変更の影響範囲を限定できます",{"2":{"166":1}}],["機能追加のたびに既存コードを変更しなければならず",{"2":{"124":1}}],["機能追加が容易で安全なコードベースを構築できます",{"2":{"122":1}}],["機能単位に分割されたインターフェースを実装",{"2":{"101":1}}],["機能ごとにインターフェースを分割する",{"0":{"23":1},"1":{"24":1,"25":1}}],["機能拡張時に既存コードを変更せずに済むことが重要ですが",{"2":{"12":1}}],["信頼性を損なう",{"2":{"22":1}}],["といって",{"2":{"168":1}}],["という",{"2":{"146":1}}],["という観点から説明しています",{"2":{"145":1}}],["という定義をしており",{"2":{"145":1}}],["ということです",{"2":{"145":1}}],["というocpの目的を実現できます",{"2":{"92":1}}],["という設計原則です",{"2":{"79":1,"83":1}}],["という原則です",{"2":{"75":1}}],["という抽象に依存しており",{"2":{"67":1}}],["という抽象に依存しているので",{"2":{"10":1}}],["という考え方です",{"2":{"66":1,"96":1}}],["という前提ではなく",{"2":{"36":1}}],["と混同すると",{"2":{"167":1}}],["と問い直す",{"2":{"164":1}}],["と要求",{"2":{"154":1,"155":1}}],["と言い換えることもできます",{"2":{"147":1}}],["と表現されますが",{"2":{"146":1}}],["と考える習慣をつける",{"2":{"119":1}}],["として切り出す",{"2":{"119":1}}],["とfp",{"2":{"100":1}}],["と関数型プログラミング",{"2":{"96":1}}],["とは誰のためのものか",{"2":{"146":1}}],["とは",{"2":{"84":1,"146":1}}],["と",{"2":{"36":1,"81":1}}],["と信じて使っているのに",{"2":{"35":1}}],["と誤解して使ってしまう",{"2":{"22":1}}],["実はいくつかの表現方法があります",{"2":{"145":1}}],["実務で役立つヒント",{"0":{"119":1}}],["実行例",{"0":{"160":1,"174":1}}],["実行結果",{"0":{"57":1,"59":1,"63":1}}],["実行時に現れる",{"2":{"82":1}}],["実行時にエラー",{"2":{"22":1}}],["実行時エラーの原因となり",{"2":{"22":1}}],["実際には両者を併用するミックススタイルが現代的であり",{"2":{"103":1}}],["実際には",{"2":{"35":1}}],["実装に依存せず",{"2":{"185":1}}],["実装ではなく抽象",{"2":{"178":1,"184":1}}],["実装ではなく抽象に依存しているか",{"2":{"178":1,"184":1}}],["実装上の理由で変更を要求する人々",{"2":{"147":1}}],["実装",{"2":{"93":1}}],["実装方法",{"2":{"78":1}}],["実装例を比較したい技術者や学生",{"2":{"73":1}}],["実装クラスが必要なものを選択",{"2":{"78":1}}],["実装クラスの追加で対応",{"2":{"69":1}}],["実装クラスに関係ないメソッドがあったしても実装しなければいけない",{"2":{"17":1}}],["実装チェックリスト",{"2":{"13":1}}],["実装の詳細が",{"2":{"1":1}}],["将来の変更時に",{"2":{"21":1}}],["利害関係者",{"2":{"145":1}}],["利用側に応じた適切な粒度のインターフェースが提供されているか",{"2":{"178":1,"183":1}}],["利用側でクラスを判別するための分岐を入れののはng",{"2":{"39":1}}],["利用例",{"0":{"85":1,"87":1,"90":1,"92":1}}],["利用者",{"2":{"145":2}}],["利用者ごとに最小限のインターフェースを提供することで",{"2":{"143":1}}],["利用者がサブタイプまで全て理解した上で利用する必要がある",{"2":{"39":1}}],["利用者が想定しない挙動によるバグが発生する可能性が高まる",{"2":{"39":1}}],["利用者はスーパータイプとサブタイプは同じ挙動を期待して利用する",{"2":{"39":1}}],["利用者は",{"2":{"35":1}}],["利用者に不要な依存を強制することになります",{"2":{"27":1}}],["利用者も",{"2":{"21":1}}],["利点",{"0":{"10":1,"116":1},"1":{"12":1,"117":1,"118":1,"121":1}}],["無理やり実装を強制されている",{"2":{"21":1}}],["employeestorable",{"2":{"177":1}}],["employeemanager",{"2":{"170":1}}],["employeerepository",{"2":{"159":1,"160":1,"166":1,"173":1,"174":1}}],["employeedata",{"2":{"159":4,"160":1,"170":3,"173":4,"174":1,"177":3}}],["employee",{"2":{"148":1,"151":1,"154":1,"155":1,"159":8,"160":4,"170":8,"173":8,"174":4,"177":3}}],["emailservice",{"2":{"131":1,"140":3}}],["emailnotifier",{"2":{"115":1,"118":1}}],["email",{"2":{"110":1,"112":1}}],["ecサイト機能拡張",{"0":{"123":1},"1":{"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1}}],["ecサイトの責務分離と拡張設計",{"2":{"14":1}}],["else",{"2":{"110":2,"127":1}}],["either",{"2":{"94":1,"95":1}}],["export",{"2":{"56":3}}],["expect",{"2":{"42":2,"58":2}}],["extends",{"2":{"33":2,"38":2,"56":1,"80":2}}],["error",{"2":{"20":2}}],["agile",{"2":{"190":1}}],["architecture",{"2":{"190":1}}],["areamap",{"2":{"86":2,"91":1}}],["area",{"2":{"84":4,"85":1,"86":2,"87":1,"89":1,"90":1,"92":1}}],["action",{"2":{"170":2,"173":2}}],["apiの利用者",{"2":{"147":1}}],["app",{"2":{"67":2}}],["application",{"2":{"67":4,"68":1}}],["after",{"0":{"128":1},"1":{"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1}}],["and",{"2":{"190":2}}],["any",{"2":{"86":1,"91":1,"97":1,"98":1}}],["animal",{"2":{"81":6}}],["a",{"2":{"29":1,"81":3,"146":1,"190":1}}],["allinoneprinter",{"2":{"20":1,"25":1}}],["amount",{"2":{"4":4,"6":2,"9":7,"137":5}}],["それぞれが異なるアクターの責任領域であれば",{"2":{"162":1}}],["それぞれの文脈に応じた適用ができることが",{"2":{"104":1}}],["それぞれの設計手法がどのように責務の分離や拡張性",{"2":{"70":1}}],["それぞれ異なる方法でそれを実装できる特性のことです",{"2":{"84":1}}],["それを",{"2":{"119":1}}],["それを実装するクラスを追加することで",{"2":{"83":1}}],["それをすべてのプリンタに強制している例です",{"2":{"18":1}}],["そのような変化に柔軟に対応できる設計を実現するために重要な指針です",{"2":{"186":1}}],["そのクラスの",{"2":{"178":1,"180":1}}],["そのクラスの変更を要求する主体",{"2":{"147":1}}],["そのクラスを利用している者",{"2":{"147":1}}],["そのクラスに変更を求める人や立場＝アクターを意味します",{"2":{"146":1}}],["そのためにはsrpによる分離とlspによる正しいサブタイプ設計が必要",{"2":{"143":1}}],["その前提として",{"2":{"65":1}}],["その前提を作ることができます",{"2":{"12":1}}],["そのスーパータイプと置換可能でなければならない",{"2":{"29":1}}],["その際",{"2":{"27":1}}],["mongodb用の保存処理に変更",{"2":{"155":1}}],["mockpayment",{"2":{"10":1}}],["min",{"2":{"154":1}}],["max",{"2":{"154":1}}],["martin公式サイト",{"2":{"190":1}}],["martin著",{"2":{"190":2}}],["martin氏によって提唱されました",{"2":{"185":1}}],["martin",{"2":{"146":1}}],["map",{"2":{"94":1,"95":1}}],["math",{"2":{"84":1,"86":1,"91":1,"154":2}}],["makefly",{"2":{"80":3,"81":1}}],["makeitfly",{"2":{"35":2}}],["multifunctionprinter",{"2":{"76":1}}],["multifunctiondevice",{"2":{"18":1,"20":3}}],["msg",{"2":{"68":4}}],["message",{"2":{"67":3,"68":1,"110":4,"115":9,"118":2}}],["印刷しました",{"2":{"20":2,"25":2}}],["印刷",{"2":{"18":1}}],["➡️",{"2":{"17":1}}],["インターフェースが1つの関心事",{"2":{"178":1,"183":1}}],["インターフェースが肥大化していると",{"2":{"27":1}}],["インターフェースは肥大化していないか",{"2":{"178":1,"183":1}}],["インターフェース分離",{"2":{"178":1}}],["インターフェース分離の原則はどちらのパラダイムでも自然に適用できます",{"2":{"78":1}}],["インターフェース分離の原則に準拠した設計になります",{"2":{"25":1}}],["インターフェース分離の原則に違反した例",{"0":{"18":1},"1":{"19":1,"20":1,"21":1}}],["インターフェース分離の原則とは",{"0":{"17":1}}],["インターフェース分離の原則",{"0":{"16":1,"75":1,"135":1,"183":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"76":1,"77":1,"78":1,"136":1,"137":1},"2":{"13":1,"15":1,"27":1,"72":1,"75":1,"101":1,"143":1,"177":1,"185":1}}],["インターフェース設計が重要",{"2":{"119":1}}],["インターフェースで通知手段を抽象化し",{"2":{"113":1}}],["インターフェースに依存し",{"2":{"101":1}}],["インターフェースに用意されている不必要なフィールドやメソッドにクライアントが依存しなくてもいいようにインターフェースは適切に分割すべき",{"2":{"17":1}}],["インターフェースの変更を要求し得るもの",{"2":{"147":1}}],["インターフェースの継承における意味的な互換性の保証",{"2":{"101":1}}],["インターフェースのクライアントにとって利用しないフィールドやメソッドへの依存を矯正してはならない",{"2":{"17":1}}],["インターフェースと継承で拡張",{"2":{"101":1}}],["インターフェースを使った責任の分離",{"0":{"175":1},"1":{"176":1,"177":1}}],["インターフェースを通じた拡張",{"2":{"93":1}}],["インターフェースを実装したクラスを追加するだけでよい",{"2":{"84":1}}],["インターフェースを定義し",{"2":{"18":1}}],["インターフェース追加と実装切り替え",{"2":{"78":1}}],["インターフェース",{"2":{"69":1,"78":1,"178":2,"181":1,"184":1}}],["インターフェースなど",{"2":{"65":1,"121":1}}],["インターフェースや抽象クラスの抽象メソッドは未実装のままではエラーとなり",{"2":{"17":1}}],["関数マップやデータ駆動設計で拡張",{"2":{"101":1}}],["関数単位で責務を分離し",{"2":{"101":1}}],["関数単位でテストしやすい",{"2":{"99":1}}],["関数",{"2":{"99":1}}],["関数ごとの責任の明確化",{"2":{"98":1}}],["関数ごとに責務を分離する",{"2":{"98":1}}],["関数は小さく",{"2":{"95":1}}],["関数は小さく分離され",{"2":{"95":1}}],["関数は小さく分離されているか",{"2":{"94":1}}],["関数内に副作用がないか",{"2":{"95":1}}],["関数が小さく",{"2":{"94":1}}],["関数が特定のデータ構造に依存していないか",{"2":{"94":1}}],["関数を機能単位で注入",{"2":{"101":1}}],["関数を分ける",{"2":{"99":1}}],["関数を合成して処理フローを作ることが容易です",{"2":{"98":1}}],["関数を引数に",{"2":{"95":1}}],["関数を引数や戻り値として使っているか",{"2":{"94":1}}],["関数を依存対象として注入する",{"2":{"68":1}}],["関数同士が組み合わせられるか",{"2":{"94":1}}],["関数合成とパターンマッチ",{"2":{"93":1}}],["関数本体の処理構造を変更せずに済むため",{"2":{"90":1}}],["関数ディスパッチ",{"2":{"85":1}}],["関数注入の構造がわかりづらくなる場合がある",{"2":{"78":1}}],["関数と構造体",{"2":{"78":1}}],["関数と高階関数を用いてこの原則を適用することができます",{"2":{"66":1}}],["関数の分離と合成で対応",{"2":{"93":1}}],["関数の修正は不要",{"2":{"84":1}}],["関数の合成や高階関数で拡張",{"2":{"99":1}}],["関数の合成",{"2":{"78":1}}],["関数の引数が多くなると読みにくいこともある",{"2":{"69":1}}],["関数の型",{"2":{"69":1}}],["関数引数として渡す",{"2":{"69":1}}],["関数に依存しており",{"2":{"68":1}}],["関数型向けチェックリスト",{"0":{"74":1}}],["関数型プログラミングにおける良い設計のためのチェックリストです",{"2":{"94":1}}],["関数型プログラミングにおける設計品質を確認するためのチェックリストも用意しています",{"2":{"74":1}}],["関数型プログラミングにおいても",{"2":{"66":1}}],["関数型プログラミングでも設計原則を応用",{"2":{"71":1}}],["関数型プログラミング",{"0":{"94":1,"95":1},"2":{"70":1,"100":1}}],["関数型でも新しい図形を追加する場合は",{"2":{"90":1}}],["関数型でも",{"2":{"69":1}}],["関数型では構造的に明示することで",{"2":{"82":1}}],["関数型では型の整合性と構造の一貫性に注目が集まります",{"2":{"79":1}}],["関数型では",{"2":{"68":1,"81":1,"98":1}}],["関数型におけるdipの応用",{"0":{"68":1}}],["関数型チェックリスト",{"2":{"15":1,"74":2}}],["関係",{"2":{"29":1}}],["関係のない機能まで対応を強いられる",{"2":{"21":1}}],["関連図",{"0":{"12":1,"27":1,"65":1,"121":1,"166":1}}],["|",{"2":{"15":4,"81":1,"86":2,"91":3}}],["👍",{"0":{"189":1}}],["👎",{"0":{"188":1}}],["🔗solid原則間の関連性",{"2":{"185":1}}],["👈",{"2":{"35":1,"42":1,"49":2,"51":1,"52":1,"58":1,"90":1}}],["🛠",{"0":{"14":1}}],["🔎",{"0":{"13":1}}],["software",{"2":{"190":2}}],["solid",{"2":{"190":2}}],["solidなコードのメリット",{"0":{"189":1}}],["solid原則を適用することで",{"2":{"187":1}}],["solid原則を適用するメリット",{"0":{"187":1},"1":{"188":1,"189":1}}],["solid原則を関数型でどう適用できるか知りたい人",{"2":{"73":1}}],["solid原則は",{"2":{"185":1,"186":1}}],["solid原則とは",{"0":{"185":1},"1":{"186":1,"187":1,"188":1,"189":1,"190":1}}],["solid原則",{"0":{"179":1},"1":{"180":1,"181":1,"182":1,"183":1,"184":1}}],["solid原則の関連図",{"0":{"143":1}}],["solid原則に準拠したリファクタリング",{"0":{"128":1},"1":{"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1}}],["solid原則に代表されるオブジェクト指向設計と",{"2":{"70":1}}],["solid原則ケーススタディ",{"0":{"123":1},"1":{"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1}}],["solid原則間の関連性",{"0":{"142":1},"1":{"143":1},"2":{"13":1}}],["switch文など",{"2":{"178":1,"181":1}}],["save",{"2":{"151":1,"152":1,"154":1,"155":1,"159":1,"160":1,"170":1,"173":1,"174":1,"177":1}}],["should",{"2":{"146":1}}],["shapes",{"2":{"84":2,"85":3,"86":2,"87":3,"90":3,"92":3}}],["shape",{"2":{"62":5,"84":7,"85":3,"86":7,"87":5,"89":1,"90":3,"91":2,"92":5}}],["smsnotifier",{"2":{"115":1,"118":1}}],["sms",{"2":{"110":1}}],["s",{"2":{"86":7,"91":8,"185":1,"190":1}}],["single",{"0":{"144":1},"1":{"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1},"2":{"96":1,"145":1}}],["side",{"2":{"84":3,"86":2,"87":1,"91":2,"92":1}}],["simpleprinter",{"2":{"20":1,"21":1,"22":1,"25":1,"76":1}}],["structure",{"2":{"190":1}}],["stringify",{"2":{"97":1,"98":1,"155":1}}],["string",{"2":{"67":2,"68":1,"81":2,"84":1,"97":2,"98":2,"110":2,"115":5,"118":1,"127":1,"131":1,"151":2,"154":2,"155":2,"159":2,"170":2,"173":3,"177":1}}],["style",{"2":{"94":1,"95":1}}],["started",{"2":{"67":1,"68":1}}],["squrare",{"2":{"56":2,"58":1}}],["square",{"2":{"39":1,"42":2,"58":2,"62":5,"84":2,"85":2,"86":2,"87":2,"90":2,"91":2,"92":2}}],["sum",{"2":{"84":2,"86":2}}],["super",{"2":{"52":2,"56":4}}],["substitution",{"0":{"28":1},"1":{"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1},"2":{"79":1}}],["sendconfirmationemail",{"2":{"127":1,"131":1,"140":1}}],["send",{"2":{"115":5,"118":1}}],["service",{"2":{"112":3,"118":2}}],["setlength",{"2":{"62":2}}],["sethight",{"2":{"52":1}}],["setheight",{"2":{"41":1,"56":5,"62":2}}],["setwidth",{"2":{"41":1,"52":1,"56":5,"62":2}}],["segregation",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"75":1}}],["sparrow",{"2":{"33":1,"38":1,"80":4}}],["scanning",{"2":{"76":1}}],["scanner",{"2":{"25":2,"76":2}}],["scan",{"2":{"20":3,"22":1,"25":2,"76":2,"77":4}}],["srpにおける比較まとめ",{"0":{"99":1}}],["srpにおけるoopとfpの比較",{"2":{"72":1}}],["srp",{"0":{"96":1,"129":1,"180":1},"1":{"97":1,"98":1,"99":1,"130":1,"131":1},"2":{"13":1,"15":1,"72":1,"96":1,"100":1,"101":1,"141":1,"143":1,"167":1,"178":1}}],["l",{"2":{"185":1}}],["length",{"2":{"62":6}}],["liskov",{"0":{"28":1},"1":{"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1},"2":{"79":1}}],["lspと連携し",{"2":{"143":1}}],["lspのリスクを低減できます",{"2":{"82":1}}],["lsp違反の危険",{"2":{"82":1}}],["lsp違反を事前に防ぎやすくなっています",{"2":{"81":1}}],["lspにおけるoopとfpの比較",{"2":{"72":1}}],["lsp",{"0":{"79":1,"132":1,"182":1},"1":{"80":1,"81":1,"82":1,"133":1,"134":1},"2":{"13":1,"15":1,"72":1,"79":1,"100":1,"101":1,"143":1,"178":1}}],["logs",{"2":{"68":1}}],["logger",{"2":{"67":6,"68":7,"173":10,"174":5}}],["log",{"2":{"4":1,"6":1,"9":2,"20":4,"25":4,"33":1,"38":1,"56":2,"62":1,"67":4,"68":1,"76":3,"80":1,"85":5,"87":5,"90":6,"92":6,"97":1,"98":1,"110":3,"115":3,"118":1,"127":3,"134":3,"140":1,"151":1,"154":1,"155":1,"159":1,"160":2,"170":7,"173":7,"174":3}}],["loading",{"2":{"3":1,"8":1,"12":1,"19":1,"24":1,"27":1,"30":1,"32":1,"37":1,"43":1,"55":1,"61":1,"65":1,"109":1,"114":1,"117":1,"121":1,"126":1,"130":1,"133":1,"136":1,"139":1,"143":1,"149":1,"150":1,"157":1,"158":1,"166":1,"169":1,"172":1,"176":1}}],["ood",{"2":{"190":1}}],["oopは構造",{"2":{"102":1}}],["oopの拡張例",{"0":{"89":1}}],["oopの例",{"2":{"84":1,"97":1}}],["oopでは",{"2":{"83":1}}],["oopでは継承の安全性が問われるのに対し",{"2":{"79":1}}],["oopではインターフェースの肥大化を避け",{"2":{"78":1}}],["oopではインターフェースの分割と実装によって",{"2":{"75":1}}],["oopではインターフェースと依存性注入",{"2":{"66":1}}],["oopとfpは対立するものではなく",{"2":{"104":1}}],["oopとfpでは異なるアプローチを取りますが",{"2":{"92":1}}],["oopとfpそれぞれにおけるocpの捉え方と実装スタイルを比較します",{"2":{"83":1}}],["oopとfpの両方に関心があるソフトウェア開発者",{"2":{"73":1}}],["oopと関数型における設計原則のまとめ",{"0":{"100":1},"1":{"101":1,"102":1,"103":1,"104":1},"2":{"15":1}}],["oopと関数型の比較",{"0":{"15":1,"70":1},"1":{"71":1,"72":1,"73":1,"74":1}}],["oopにおける実践",{"2":{"101":1}}],["oopにおけるsrpの実装例",{"0":{"97":1}}],["oopにおけるocpの実装例",{"0":{"84":1},"1":{"85":1}}],["oopにおけるlspの実装例",{"0":{"80":1}}],["oopにおけるispの実装例",{"0":{"76":1}}],["oopにおける原則",{"2":{"71":1}}],["oopにおけるdipの典型例",{"0":{"67":1}}],["oop",{"2":{"69":1,"78":1,"82":1,"93":1,"96":1,"99":1,"100":1}}],["of",{"2":{"190":1}}],["o",{"2":{"185":1}}],["overtimepaycalculator",{"2":{"166":1}}],["overtimehours",{"2":{"154":2}}],["one",{"2":{"146":1}}],["only",{"2":{"146":1}}],["oや状態変更",{"2":{"95":1}}],["oや状態変更などの副作用を含まないか",{"2":{"94":1}}],["option",{"2":{"94":1,"95":1}}],["open",{"0":{"105":1},"1":{"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1},"2":{"83":1}}],["order",{"2":{"94":1,"95":1,"127":1,"131":7,"134":11,"140":5}}],["orderservice",{"2":{"2":1,"4":1,"5":1,"6":1,"9":1,"10":1,"140":1}}],["observable",{"2":{"94":1,"95":1}}],["ostrich",{"2":{"81":4}}],["oldheight",{"2":{"51":1}}],["ok",{"2":{"49":1,"80":1}}],["ocpやdipの信頼性を支える",{"2":{"143":1}}],["ocpの前提として重要",{"2":{"121":1}}],["ocpの達成方法",{"2":{"93":1}}],["ocpによる安全な拡張が可能になる",{"2":{"143":1}}],["ocpにおける比較まとめ",{"0":{"93":1}}],["ocpにおけるoopとfpの比較",{"2":{"72":1}}],["ocpに近い形式を保つことができます",{"2":{"90":1}}],["ocp",{"0":{"83":1,"132":1,"181":1},"1":{"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"133":1,"134":1},"2":{"13":1,"15":1,"72":1,"83":1,"100":1,"101":1,"112":1,"116":1,"141":1,"143":2,"166":1,"178":1}}],["単一のインターフェース",{"2":{"177":1}}],["単一の責任を持つべき",{"2":{"145":1}}],["単一責任",{"2":{"178":1}}],["単一責任に違反している例",{"0":{"148":1},"1":{"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1}}],["単一責任の原則は",{"2":{"146":1,"162":1}}],["単一責任の原則とは",{"0":{"145":1}}],["単一責任の原則にも違反している",{"2":{"111":1}}],["単一責任の原則",{"0":{"96":1,"129":1,"144":1,"180":1},"1":{"97":1,"98":1,"99":1,"130":1,"131":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1},"2":{"13":1,"15":1,"72":1,"96":1,"101":1,"121":1,"143":1,"145":1,"166":1,"167":1,"185":1}}],["単位",{"2":{"99":1}}],["単体テストしやすいか",{"2":{"95":1}}],["単体テスト時に支払い部分を差し替えられない",{"2":{"5":1}}],["単体でテスト可能か",{"2":{"94":1}}],["を支えるものです",{"2":{"185":1}}],["をしていないか",{"2":{"178":1,"182":1}}],["を利用して柔軟に設計されているか",{"2":{"178":1,"181":1}}],["を頻繁に修正していないか",{"2":{"178":1,"181":1}}],["を持つことになります",{"2":{"177":1}}],["を変更する必要はありません",{"2":{"166":1}}],["を追加するだけで済み",{"2":{"166":1}}],["を数える",{"2":{"164":1}}],["を通じて機能を切り替えることで",{"2":{"121":1}}],["を通じてこの原則を実現しますが",{"2":{"66":1}}],["を定義する",{"2":{"119":1}}],["を自然に満たしている",{"2":{"116":1}}],["を柔軟に管理できる",{"2":{"102":1}}],["を関数型の外部に隔離しているか",{"2":{"95":1}}],["を関数単位で分離して注入するため",{"2":{"77":1}}],["を避け",{"2":{"95":1}}],["を避けている",{"2":{"81":1}}],["を使って流れを構成できるか",{"2":{"94":1}}],["を用いて",{"2":{"85":1}}],["を明示的に記述することで",{"2":{"43":1}}],["を呼び出せるようになるため",{"2":{"38":1,"80":1}}],["を呼ぶと",{"2":{"34":1}}],["を分けて扱うようにします",{"2":{"36":1}}],["を正しく扱えないためバグの原因になります",{"2":{"35":1}}],["を適用することで",{"2":{"27":1}}],["を実装し",{"2":{"25":1}}],["を見えてしまう",{"2":{"21":1}}],["を考えてみましょう",{"2":{"18":1,"108":1}}],["を満たしていることで",{"2":{"12":1}}],["を注入することで柔軟なテストが可能",{"2":{"10":1}}],["d",{"2":{"185":1}}],["don",{"2":{"167":1}}],["doc",{"2":{"155":2}}],["dry",{"2":{"167":1}}],["dry原則との関係",{"0":{"167":1},"1":{"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1}}],["dba向けの開発を独立して進められる",{"2":{"161":1}}],["dbaが",{"2":{"155":1}}],["dba",{"2":{"147":1,"151":1}}],["data",{"2":{"97":4,"98":4}}],["diコンテナ",{"2":{"178":1,"184":1}}],["di",{"2":{"66":1}}],["dipにおけるoopとfpの比較",{"2":{"72":1}}],["dipによって依存先を抽象化することで",{"2":{"12":1}}],["dipの柔軟性と保守性をさらに高めます",{"2":{"27":1}}],["dip",{"0":{"66":1,"138":1,"184":1},"1":{"67":1,"68":1,"69":1,"139":1,"140":1},"2":{"13":1,"15":1,"27":1,"66":1,"72":1,"100":1,"101":1,"141":1,"143":1,"178":1}}],["dipで注入された具体クラスが安全に置き換え可能となり",{"2":{"12":1}}],["dev",{"2":{"190":1}}],["development",{"2":{"190":1}}],["design",{"2":{"190":1}}],["describe",{"2":{"58":1}}],["declarative",{"2":{"94":1,"95":1}}],["dependency",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"2":{"66":1}}],["他のクラスやモジュールなど",{"2":{"147":1}}],["他のシステム",{"2":{"147":1}}],["他の関数と組み合わせて使えるか",{"2":{"95":1}}],["他の実装と容易に差し替えが可能です",{"2":{"67":1}}],["他のsolid原則との関連",{"0":{"11":1,"26":1,"64":1,"120":1,"165":1},"1":{"12":1,"27":1,"65":1,"121":1,"166":1}}],["他の支払い手段を自由に差し替えられる",{"2":{"10":1}}],["他の支払い方法を使いたくなったときに書き換えが必要になる",{"2":{"5":1}}],["は1種類に限定されているか",{"2":{"178":1,"180":1}}],["は次のように述べています",{"2":{"146":1}}],["は実装しない",{"2":{"38":1,"80":1}}],["は実装の詳細に依存してはならない",{"2":{"1":1}}],["は鳥ではあるが",{"2":{"34":1}}],["はスキャンもfaxもできないのに",{"2":{"21":1}}],["は",{"2":{"10":1,"65":1,"66":1,"67":1,"68":1,"75":1,"79":1,"83":1,"96":1,"121":1,"145":2,"166":1}}],["✅",{"0":{"10":1,"116":1,"129":1,"132":1,"135":1,"138":1,"141":1,"171":1,"179":1},"1":{"12":1,"117":1,"118":1,"121":1,"130":1,"131":1,"133":1,"134":1,"136":1,"137":1,"139":1,"140":1,"172":1,"173":1,"174":1,"176":1,"177":1,"180":1,"181":1,"182":1,"183":1,"184":1},"2":{"13":1,"15":1,"74":1,"80":1,"185":1}}],["items",{"2":{"127":1,"131":1}}],["if文",{"2":{"178":1,"181":1}}],["if",{"2":{"110":3,"127":2}}],["id",{"2":{"97":1,"98":1}}],["io",{"2":{"94":1,"95":1}}],["immutability",{"2":{"94":1,"95":1}}],["implements",{"2":{"9":2,"20":2,"25":2,"38":1,"62":1,"67":1,"76":2,"80":1,"84":2,"89":1,"115":3,"118":1,"134":3,"137":2}}],["i",{"2":{"81":1,"94":1,"95":1,"185":1}}],["isbird",{"2":{"81":2}}],["is",{"2":{"29":1,"81":1}}],["ispにおけるoopとfpの比較",{"2":{"72":1}}],["isp",{"0":{"75":1,"135":1,"183":1},"1":{"76":1,"77":1,"78":1,"136":1,"137":1},"2":{"13":1,"15":1,"27":1,"72":1,"75":1,"100":1,"101":1,"141":1,"143":1,"177":1,"178":1}}],["index",{"2":{"58":1}}],["instanceof",{"2":{"39":1}}],["interface",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"25":2,"75":1,"76":1,"84":1,"177":2}}],["inversion",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"2":{"66":1}}],["解決策",{"0":{"7":1,"23":1,"36":1,"60":1,"113":1,"156":1},"1":{"8":1,"9":1,"10":1,"24":1,"25":1,"37":1,"38":1,"61":1,"62":1,"63":1,"65":1,"114":1,"115":1,"116":1,"117":1,"118":1,"157":1,"158":1,"159":1,"160":1,"161":1}}],["側で直接paypalpaymentに書き換える必要がある",{"2":{"6":1}}],["❌",{"0":{"5":1,"21":1,"34":1,"111":1,"168":1},"1":{"8":1,"9":1,"24":1,"25":1,"27":1,"37":1,"38":1,"41":1,"42":1,"114":1,"115":1,"169":1,"170":1},"2":{"80":1}}],["t",{"2":{"167":1}}],["task",{"2":{"94":1,"95":1}}],["triangle",{"2":{"89":2,"90":2,"91":2,"92":2}}],["typescriptで学ぶsolid原則",{"2":{"190":1}}],["typescriptでは",{"2":{"175":1}}],["typescript",{"0":{"175":1},"1":{"176":1,"177":1},"2":{"190":1}}],["type",{"2":{"77":1,"81":2,"86":1,"110":4}}],["tyepscriptコード例",{"0":{"53":1},"1":{"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1}}],["to",{"2":{"146":1,"190":2}}],["totalprice",{"2":{"127":2,"131":1,"140":1}}],["totalarea",{"2":{"84":2,"85":1,"86":1,"87":1,"90":1,"92":1}}],["total",{"2":{"59":1,"85":2,"87":2,"90":2,"92":2}}],["tobe",{"2":{"42":2,"58":2}}],["testlogger",{"2":{"68":1}}],["testsuites",{"2":{"59":1}}],["test",{"2":{"42":3,"58":3}}],["the",{"2":{"190":1}}],["throwなど",{"2":{"178":1,"182":1}}],["throw",{"2":{"20":2}}],["this",{"2":{"4":1,"9":1,"51":3,"52":1,"56":4,"62":7,"67":1,"84":4,"89":2,"115":1,"127":1,"134":1,"140":3,"151":5,"154":7,"155":7,"170":3,"173":3}}],["tstype",{"2":{"68":1,"77":1,"81":1,"91":1}}],["ts",{"2":{"56":1,"84":1,"86":1,"89":1,"97":1,"98":1,"159":1}}],["tssetwidth",{"2":{"51":1,"52":1}}],["tsmethoda",{"2":{"48":1,"49":1}}],["tsdescribe",{"2":{"42":1}}],["tsexport",{"2":{"41":1}}],["tsimport",{"2":{"58":1}}],["tsif",{"2":{"39":1}}],["tsinterface",{"2":{"9":1,"20":1,"25":1,"38":1,"62":1,"67":1,"76":1,"80":1,"115":1,"134":1,"137":1,"177":1}}],["tsfunction",{"2":{"35":1,"80":1}}],["tsconst",{"2":{"22":1,"68":1,"85":1,"87":1,"90":1,"92":1,"112":1,"160":1,"174":1}}],["tsclass",{"2":{"4":1,"6":1,"33":1,"110":1,"118":1,"127":1,"131":1,"140":1,"151":1,"154":1,"155":1,"170":1,"173":1}}],["name",{"2":{"151":3,"154":3,"155":4,"159":3,"170":2,"173":3}}],["note",{"2":{"145":1}}],["notifiers",{"2":{"115":2}}],["notifier",{"2":{"115":7,"118":1}}],["notificationserviceの中身を書き換える必要がある",{"2":{"111":1}}],["notificationservice",{"2":{"110":1,"112":1,"115":1,"118":1}}],["notifyall",{"2":{"115":1,"118":1}}],["notify",{"2":{"110":1,"112":2}}],["ng",{"2":{"49":1,"52":1}}],["nubmer",{"2":{"48":1,"49":1,"51":1,"52":1}}],["number>",{"2":{"86":1,"91":1}}],["number",{"2":{"4":2,"6":1,"9":4,"41":3,"56":8,"62":9,"84":6,"86":4,"89":3,"91":4,"137":6,"151":3,"154":3,"155":3,"159":3,"170":1,"173":3,"177":1}}],["new",{"2":{"4":1,"20":2,"22":1,"35":1,"42":2,"56":2,"58":2,"62":2,"67":2,"80":2,"85":2,"90":3,"97":2,"112":1,"118":4,"160":4,"174":5}}],["=1人のアクター",{"2":{"145":1}}],["===",{"2":{"51":2,"52":1,"81":1,"110":3,"127":2}}],["=>",{"2":{"41":1,"42":3,"56":2,"58":3,"62":2,"68":4,"77":4,"81":3,"84":1,"85":1,"86":6,"87":1,"90":1,"91":4,"92":1,"98":2,"115":1}}],["=",{"2":{"4":1,"22":1,"29":1,"35":1,"41":1,"42":2,"51":1,"56":6,"58":2,"62":10,"67":1,"68":4,"77":4,"80":2,"81":5,"84":2,"85":1,"86":4,"87":1,"89":1,"90":1,"91":2,"92":1,"97":4,"98":4,"112":1,"118":1,"127":3,"131":3,"140":1,"154":2,"155":1,"160":4,"174":5}}],["`保存",{"2":{"170":1,"173":1}}],["`mongodbに保存",{"2":{"155":1}}],["`データベースに保存",{"2":{"151":1,"154":1,"159":1}}],["`ポイント付与",{"2":{"140":1}}],["`fax送信",{"2":{"118":1}}],["`プッシュ通知",{"2":{"110":1,"115":1}}],["`sms送信",{"2":{"110":1,"115":1}}],["`メール送信",{"2":{"110":1,"115":1}}],["`report",{"2":{"97":1,"98":1}}],["`$",{"2":{"87":1,"92":1,"151":1,"154":1,"155":1,"159":1,"170":1,"173":1}}],["`paypalで$",{"2":{"6":1,"9":1}}],["`",{"2":{"4":1,"6":1,"9":2,"87":1,"92":1,"97":1,"98":1,"110":3,"115":3,"118":1,"151":1,"154":1,"155":1,"159":1,"170":3,"173":3}}],["`クレジットカードで$",{"2":{"4":1,"9":1}}],["円支払いました",{"2":{"4":1,"6":1,"9":2}}],["craftsman",{"2":{"190":1}}],["credit",{"2":{"127":1}}],["creditcardpayment",{"2":{"2":1,"4":2,"5":1,"9":1,"134":1}}],["createsimpleprinter",{"2":{"77":1}}],["createmultifunctionprinter",{"2":{"77":1}}],["cto配下",{"2":{"152":1}}],["cfo配下",{"2":{"152":1}}],["change",{"2":{"146":1}}],["checklist",{"0":{"94":1,"95":1}}],["c",{"2":{"145":1,"146":1,"185":1,"190":3}}],["calculate",{"2":{"159":1,"160":1,"170":1,"173":1,"174":1,"177":1}}],["calculatepay",{"2":{"151":1,"152":1,"154":1,"155":1}}],["calculatepoints",{"2":{"127":1,"131":1,"137":3,"140":1}}],["caution",{"2":{"145":1}}],["cannot",{"2":{"81":1}}],["coo配下",{"2":{"152":1}}],["completeorder",{"2":{"140":1}}],["compose",{"2":{"94":1,"95":1}}],["composability",{"2":{"94":1,"95":1}}],["content",{"2":{"97":1,"98":1}}],["const",{"2":{"35":1,"41":1,"42":2,"56":2,"58":2,"62":4,"67":1,"68":2,"77":2,"80":2,"81":2,"86":3,"91":1,"97":4,"98":4,"118":1,"140":1,"154":2,"155":1,"160":3,"174":4}}],["constructor",{"2":{"9":1,"62":2,"67":1,"84":2,"89":1,"115":1,"134":1,"140":1,"151":1,"154":1,"155":1,"159":1,"173":4}}],["consolelogger",{"2":{"67":3,"68":2}}],["console",{"2":{"4":1,"6":1,"9":2,"20":4,"25":4,"33":1,"38":1,"56":2,"62":1,"67":1,"68":1,"76":3,"80":1,"85":2,"87":2,"90":2,"92":2,"97":1,"98":1,"110":3,"115":3,"118":1,"127":3,"134":3,"140":1,"151":1,"154":1,"155":1,"159":1,"160":2,"170":2,"173":2}}],["circle",{"2":{"84":2,"85":2,"86":2,"87":2,"90":2,"91":2,"92":2}}],["clean",{"2":{"190":1}}],["cli",{"2":{"95":1}}],["closed",{"0":{"105":1},"1":{"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1},"2":{"83":1}}],["class",{"2":{"4":1,"9":3,"20":2,"25":2,"33":2,"38":3,"56":2,"62":2,"67":2,"76":2,"80":3,"84":2,"89":1,"97":2,"115":4,"131":3,"134":4,"137":2,"146":1,"159":4,"173":4}}],["void",{"2":{"4":2,"6":1,"9":4,"20":3,"25":3,"33":1,"38":2,"67":2,"68":1,"76":5,"77":2,"80":3,"97":1,"98":1,"115":4,"118":1,"134":4,"151":1,"154":1,"155":1,"159":1,"170":1,"173":1,"177":1}}],["patterns",{"2":{"190":1}}],["paycalculable",{"2":{"177":1}}],["paycalculatorだけを修正すればよい",{"2":{"161":1}}],["paycalculator",{"2":{"159":1,"160":3,"173":1,"174":3}}],["paypal処理",{"2":{"134":1}}],["paypalpayment",{"2":{"6":1,"9":1,"134":1}}],["paymentprocessor",{"2":{"131":1,"134":1,"140":3}}],["paymenttype",{"2":{"127":3,"131":1}}],["paymentmethod",{"2":{"9":4,"10":1,"134":7}}],["payment",{"2":{"4":2,"9":2}}],["pay",{"2":{"4":2,"6":1,"9":4}}],["pt`",{"2":{"140":1}}],["points",{"2":{"140":2}}],["pointscalculator",{"2":{"131":1,"137":3,"140":3}}],["public",{"2":{"151":3,"154":3,"155":3,"159":3,"173":3}}],["pure",{"2":{"94":1,"95":1}}],["pushnotifier",{"2":{"115":1}}],["push",{"2":{"68":1,"110":1}}],["pipe",{"2":{"94":1,"95":1}}],["pi",{"2":{"84":1,"86":1,"91":1}}],["penguin",{"2":{"31":1,"33":1,"34":2,"35":4,"38":1,"80":4}}],["practices",{"2":{"190":1}}],["premiumcustomerpoints",{"2":{"137":1}}],["process",{"2":{"134":5}}],["processpayment",{"2":{"127":1,"131":1,"134":1,"140":1}}],["processorder",{"2":{"4":1,"9":1}}],["programming",{"0":{"94":1,"95":1}}],["printreport",{"2":{"98":2}}],["printing",{"2":{"76":2}}],["printer",{"2":{"22":2,"25":3,"76":3,"97":2}}],["print",{"2":{"20":3,"25":3,"76":3,"77":7,"97":2}}],["principles",{"2":{"190":3}}],["principle",{"0":{"0":1,"16":1,"28":1,"105":1,"144":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1},"2":{"66":1,"75":1,"79":1,"83":1,"96":1,"145":1}}],["private",{"2":{"4":1,"9":1,"62":3,"67":1,"84":2,"89":2,"115":1,"134":1,"140":3,"170":1,"173":3}}],["に特化しているか",{"2":{"178":1,"183":1}}],["にもつながります",{"2":{"177":1}}],["にも影響する",{"2":{"163":1}}],["にも関係します",{"2":{"162":1}}],["に関する処理を1つのクラスに詰め込んだ例です",{"2":{"148":1}}],["に対してのみ責任を持つ",{"2":{"145":1}}],["に対して責任を持つべき",{"2":{"145":1,"185":1}}],["に対して責任を持つべきという原則です",{"2":{"145":1}}],["に従えば",{"2":{"121":1}}],["に違反している状態",{"2":{"112":1}}],["における設計原則",{"2":{"100":1}}],["におけるsrpの捉え方と実装方法を比較します",{"2":{"96":1}}],["におけるoopとfpの比較",{"0":{"66":1,"75":1,"79":1,"83":1,"96":1},"1":{"67":1,"68":1,"69":1,"76":1,"77":1,"78":1,"80":1,"81":1,"82":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"97":1,"98":1,"99":1},"2":{"15":5}}],["によって提唱された概念ですが",{"2":{"145":1}}],["による構成ができるか",{"2":{"95":1}}],["により",{"2":{"81":1,"121":1}}],["に直接依存していません",{"2":{"67":1}}],["に直接依存している場合を考えます",{"2":{"2":1}}],["に依存しているか",{"2":{"178":1,"184":1}}],["に依存することで拡張性を高めますが",{"2":{"65":1}}],["に依存すべきである",{"2":{"1":1}}],["に依存すべき",{"2":{"1":1}}],["に依存できるようになります",{"2":{"25":1}}],["に強く依存しており",{"2":{"5":1}}],["が目指す",{"2":{"166":1}}],["が他の処理",{"2":{"163":1}}],["が異なる目的で変更を要求する状況になっています",{"2":{"149":1}}],["がsrpの応用となります",{"2":{"98":1}}],["が記述されているか",{"2":{"94":1,"95":1}}],["が前提になります",{"2":{"65":1}}],["が必要です",{"2":{"65":1}}],["が",{"2":{"2":1,"5":1,"35":1,"145":1}}],["抽象クラス",{"2":{"178":1,"184":1}}],["抽象を使った拡張時に",{"2":{"143":1}}],["抽象の乱用",{"2":{"93":1}}],["抽象化手段",{"2":{"82":1}}],["抽象化の単位",{"2":{"69":1}}],["抽象と具象のバランス",{"2":{"69":1}}],["抽象に依存する構造をつくることで",{"2":{"143":1}}],["抽象に依存する",{"0":{"7":1},"1":{"8":1,"9":1,"10":1}}],["抽象",{"2":{"1":3,"119":1,"121":1,"178":1,"181":1}}]],"serializationVersion":2}';export{i as default};
