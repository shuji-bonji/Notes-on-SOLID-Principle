const i='{"documentCount":174,"nextId":174,"documentIds":{"0":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則-dependency-inversion-principle","1":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則とは","2":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則に違反している例","3":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図","4":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード","5":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#❌-問題点","6":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#原則に違反するとどうなるか","7":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#解決策-抽象に依存する","8":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図-1","9":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード-1","10":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#✅-利点","11":"/Notes-on-SOLID-Principle/#📘solidの原則","12":"/Notes-on-SOLID-Principle/#🔎-各原則の一覧","13":"/Notes-on-SOLID-Principle/#🛠-ケーススタディ","14":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則-interface-segregation-principle","15":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則とは","16":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則に違反した例","17":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図","18":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード","19":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#❌-問題点","20":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#原則に違反するとどうなるか","21":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#解決策-機能ごとにインターフェースを分割する","22":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図-1","23":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード-1","24":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則-liskov-substitution-principle","25":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則とは","26":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図","27":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反した例","28":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-1","29":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード","30":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#❌-問題点","31":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#原則に違反するとどうなるか","32":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策-共通の動作に着目したインターフェースを使う","33":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-2","34":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-1","35":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反するとどうなるか","36":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#振る舞いの変更に気付くには","37":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-2","38":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#テストコード","39":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#補足-契約による設計","40":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件とは","41":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件とは","42":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#契約による設計においての、サブタイプの事前条件と事後条件","43":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件はスーパータイプと同じかそれより弱い条件","44":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ","45":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ","46":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件はスーパータイプと同じかそれより強い条件","47":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ-1","48":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ-1","49":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#tyepscriptコード例","50":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-3","51":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#違反例","52":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-3","53":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果","54":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#ユニットテスト","55":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-1","56":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策","57":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-4","58":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-4","59":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-2","60":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#oopと関数型の比較","61":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#対比の目的","62":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#今後の内容予定","63":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#想定読者","64":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-in-functional.html#依存性逆転の原則-dip-における関数型の応用","65":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-in-functional.html#oopにおけるdipの典型例","66":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-in-functional.html#関数型におけるdipの応用","67":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-in-functional.html#比較まとめ","68":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#インターフェース分離の原則-isp-におけるoopとfpの比較","69":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#oopにおけるispの実装例","70":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#fpにおけるispの実装例","71":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#比較まとめ","72":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#リスコフの置換原則-lsp-におけるoopとfpの比較","73":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#oopにおけるlspの実装例","74":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#fpにおけるlspの実装例","75":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#比較まとめ","76":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#開放-閉鎖原則-ocp-におけるoopとfpの比較","77":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopにおけるocpの実装例","78":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例","79":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpにおけるocpの実装例","80":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-1","81":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#拡張例-新しい図形の追加","82":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopの拡張例","83":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-2","84":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpの拡張例","85":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-3","86":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#ocpにおける比較まとめ","87":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#oopと関数型における設計原則のまとめ","88":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#各原則の適用比較","89":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#共通点と違い","90":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#どちらを選ぶべきか","91":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#最後に","92":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#単一責任の原則-srp-におけるoopとfpの比較","93":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#oopにおけるsrpの実装例","94":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#fpにおけるsrpの実装例","95":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#srpにおける比較まとめ","96":"/Notes-on-SOLID-Principle/open-closed-principle.html#オープンクローズドの原則-open-closed-principle","97":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則の要点","98":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則が解決する問題","99":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則に違反した例","100":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図","101":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード","102":"/Notes-on-SOLID-Principle/open-closed-principle.html#❌-問題点-原則に違反","103":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則違反のリスク","104":"/Notes-on-SOLID-Principle/open-closed-principle.html#解決策-通知手段を拡張できる設計にする","105":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-1","106":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-1","107":"/Notes-on-SOLID-Principle/open-closed-principle.html#✅-利点","108":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-2","109":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-2","110":"/Notes-on-SOLID-Principle/open-closed-principle.html#実務で役立つヒント","111":"/Notes-on-SOLID-Principle/open-closed-principle.html#他のsolid原則との関連","112":"/Notes-on-SOLID-Principle/open-closed-principle.html#まとめ","113":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則-single-responsibility-principle","114":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則とは","115":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#なぜ「アクター」の観点が重要か","116":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#アクターとは","117":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#🔎-例-srp違反の構造","118":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任に違反している例","119":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図","120":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード","121":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#問題点","122":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#状態-フィールド-も責任に含まれる","123":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#原則に違反するとどうなるか","124":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#解決策-責任を分離する","125":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-1","126":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-1","127":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#責任の分離の判断基準-リファクタリング時の指針","128":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例","129":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-dry原則との関係","130":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#❌-よくある誤解","131":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-2","132":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-2","133":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#✅-正しい構成例-責任の分離","134":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-3","135":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-3","136":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例-1","137":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-インターフェースを使った責任の分離-typescript","138":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-4","139":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-4","140":"/Notes-on-SOLID-Principle/solid-checklist.html#各原則のチェックリスト-基本-詳細","141":"/Notes-on-SOLID-Principle/solid-checklist.text.html#✅-solid原則-チェックリスト","142":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-単一責任の原則-srp","143":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-オープンクローズドの原則-ocp","144":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-リスコフの置換原則-lsp","145":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-インターフェース分離の原則-isp","146":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-依存性逆転の原則-dip","147":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則とは","148":"/Notes-on-SOLID-Principle/solid-principles.html#なぜsolidが必要なのか","149":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則を適用するメリット","150":"/Notes-on-SOLID-Principle/solid-principles.html#👎-非solidなコードの問題点","151":"/Notes-on-SOLID-Principle/solid-principles.html#👍-solidなコードのメリット","152":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則間の関連性","153":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則の関連性","154":"/Notes-on-SOLID-Principle/solid-principles.html#学習を深めるためのリソース","155":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則ケーススタディ-ecサイト機能拡張","156":"/Notes-on-SOLID-Principle/practical-case-studies.html#シナリオ","157":"/Notes-on-SOLID-Principle/practical-case-studies.html#非solidなコード-before","158":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図","159":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード","160":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則に準拠したリファクタリング-after","161":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-単一責任の原則-srp","162":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-1","163":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-1","164":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-オープンクローズド原則-ocp-リスコフの置換原則-lsp","165":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-2","166":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-2","167":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-インターフェース分離の原則-isp","168":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-3","169":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-3","170":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-依存性逆転の原則-dip","171":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-4","172":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-4","173":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-この設計の利点"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[5,1,1],"1":[1,5,8],"2":[1,5,6],"3":[1,5,2],"4":[1,5,20],"5":[2,5,7],"6":[1,5,14],"7":[2,5,1],"8":[1,8,2],"9":[1,8,23],"10":[2,6,9],"11":[1,1,5],"12":[2,1,12],"13":[2,1,2],"14":[5,1,1],"15":[1,5,8],"16":[1,5,11],"17":[1,5,2],"18":[1,5,21],"19":[2,5,9],"20":[1,5,13],"21":[2,5,1],"22":[1,8,2],"23":[1,8,26],"24":[5,1,1],"25":[1,5,10],"26":[1,5,2],"27":[1,5,10],"28":[1,5,2],"29":[1,5,12],"30":[2,5,14],"31":[1,5,20],"32":[2,5,10],"33":[1,8,2],"34":[1,8,22],"35":[1,5,11],"36":[1,5,2],"37":[1,7,15],"38":[1,7,21],"39":[2,5,4],"40":[1,6,4],"41":[1,6,4],"42":[2,6,3],"43":[1,6,1],"44":[1,7,7],"45":[1,7,14],"46":[1,6,1],"47":[1,7,13],"48":[1,7,15],"49":[1,5,1],"50":[1,6,1],"51":[1,5,2],"52":[1,6,30],"53":[1,7,5],"54":[1,6,25],"55":[1,7,5],"56":[1,5,1],"57":[1,6,2],"58":[1,6,33],"59":[1,7,3],"60":[1,1,8],"61":[1,1,7],"62":[1,1,21],"63":[1,1,6],"64":[3,1,15],"65":[1,3,28],"66":[1,3,29],"67":[1,3,22],"68":[3,1,14],"69":[1,3,19],"70":[1,3,19],"71":[1,3,23],"72":[3,1,11],"73":[1,3,35],"74":[1,3,35],"75":[1,3,21],"76":[4,1,13],"77":[1,4,46],"78":[1,5,24],"79":[1,4,33],"80":[1,5,27],"81":[2,4,1],"82":[1,6,19],"83":[1,6,31],"84":[1,6,25],"85":[1,6,33],"86":[1,4,21],"87":[1,1,13],"88":[1,1,28],"89":[1,1,15],"90":[2,1,5],"91":[1,1,6],"92":[3,1,15],"93":[1,3,35],"94":[1,3,32],"95":[1,3,20],"96":[5,1,1],"97":[1,5,8],"98":[1,5,5],"99":[1,5,5],"100":[1,5,2],"101":[1,5,20],"102":[4,5,7],"103":[1,5,20],"104":[2,5,4],"105":[1,10,2],"106":[1,10,28],"107":[2,6,12],"108":[1,8,2],"109":[1,8,24],"110":[1,5,13],"111":[1,5,11],"112":[1,5,7],"113":[5,1,1],"114":[1,5,46],"115":[4,5,29],"116":[2,8,39],"117":[3,8,16],"118":[1,5,5],"119":[1,8,2],"120":[1,8,21],"121":[1,5,11],"122":[3,5,21],"123":[1,5,51],"124":[2,5,1],"125":[1,7,2],"126":[1,7,25],"127":[3,5,10],"128":[1,7,19],"129":[2,5,13],"130":[2,6,4],"131":[1,8,2],"132":[1,8,30],"133":[3,6,1],"134":[1,9,2],"135":[1,9,33],"136":[1,9,19],"137":[4,5,4],"138":[1,10,2],"139":[1,10,21],"140":[5,1,58],"141":[3,1,1],"142":[4,3,9],"143":[4,3,12],"144":[4,3,8],"145":[4,3,8],"146":[4,3,11],"147":[1,1,46],"148":[2,1,7],"149":[1,1,3],"150":[2,2,11],"151":[2,2,10],"152":[1,1,10],"153":[1,2,2],"154":[1,1,32],"155":[2,1,1],"156":[1,2,5],"157":[3,2,1],"158":[1,5,2],"159":[1,5,29],"160":[3,2,1],"161":[4,5,1],"162":[1,8,2],"163":[1,8,21],"164":[6,5,1],"165":[1,10,2],"166":[1,10,23],"167":[4,5,1],"168":[1,8,2],"169":[1,8,14],"170":[4,5,1],"171":[1,8,2],"172":[1,8,27],"173":[2,2,12]},"averageFieldLength":[1.6379310344827582,4.798850574712646,13.022988505747131],"storedFields":{"0":{"title":"依存性逆転の原則 (Dependency Inversion Principle)","titles":[]},"1":{"title":"依存性逆転の原則とは","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"2":{"title":"依存性逆転の原則に違反している例","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"3":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"4":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"5":{"title":"❌ 問題点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"6":{"title":"原則に違反するとどうなるか","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"7":{"title":"解決策：抽象に依存する","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"8":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"9":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"10":{"title":"✅ 利点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する"]},"11":{"title":"📘SOLIDの原則","titles":[]},"12":{"title":"🔎 各原則の一覧","titles":["📘SOLIDの原則"]},"13":{"title":"🛠 ケーススタディ","titles":["📘SOLIDの原則"]},"14":{"title":"インターフェース分離の原則 (Interface Segregation Principle)","titles":[]},"15":{"title":"インターフェース分離の原則とは","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"16":{"title":"インターフェース分離の原則に違反した例","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"17":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"18":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"19":{"title":"❌ 問題点","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"20":{"title":"原則に違反するとどうなるか","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"21":{"title":"解決策：機能ごとにインターフェースを分割する","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"22":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"23":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"24":{"title":"リスコフの置換原則 (Liskov Substitution Principle)","titles":[]},"25":{"title":"リスコフの置換原則とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"26":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則とは"]},"27":{"title":"リスコフの置換原則に違反した例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"28":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"29":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"30":{"title":"❌ 問題点","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"31":{"title":"原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"32":{"title":"解決策：共通の動作に着目したインターフェースを使う","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"33":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"34":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"35":{"title":"リスコフの置換原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"36":{"title":"振る舞いの変更に気付くには","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"37":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"38":{"title":"テストコード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"39":{"title":"補足： 契約による設計","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"40":{"title":"事前条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"41":{"title":"事後条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"42":{"title":"契約による設計においての、サブタイプの事前条件と事後条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"43":{"title":"事前条件はスーパータイプと同じかそれより弱い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"44":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"45":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"46":{"title":"事後条件はスーパータイプと同じかそれより強い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"47":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"48":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"49":{"title":"TyepScriptコード例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"50":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","事後条件はスーパータイプと同じかそれより強い条件"]},"51":{"title":"違反例","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"52":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"53":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","コード"]},"54":{"title":"ユニットテスト","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"55":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","ユニットテスト"]},"56":{"title":"解決策","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"57":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"58":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"59":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策","コード"]},"60":{"title":"OOPと関数型の比較","titles":[]},"61":{"title":"対比の目的","titles":["OOPと関数型の比較"]},"62":{"title":"今後の内容予定","titles":["OOPと関数型の比較"]},"63":{"title":"想定読者","titles":["OOPと関数型の比較"]},"64":{"title":"依存性逆転の原則（DIP）における関数型の応用","titles":[]},"65":{"title":"OOPにおけるDIPの典型例","titles":["依存性逆転の原則（DIP）における関数型の応用"]},"66":{"title":"関数型におけるDIPの応用","titles":["依存性逆転の原則（DIP）における関数型の応用"]},"67":{"title":"比較まとめ","titles":["依存性逆転の原則（DIP）における関数型の応用"]},"68":{"title":"インターフェース分離の原則（ISP）におけるOOPとFPの比較","titles":[]},"69":{"title":"OOPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"70":{"title":"FPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"71":{"title":"比較まとめ","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"72":{"title":"リスコフの置換原則（LSP）におけるOOPとFPの比較","titles":[]},"73":{"title":"OOPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"74":{"title":"FPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"75":{"title":"比較まとめ","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"76":{"title":"開放/閉鎖原則（OCP）におけるOOPとFPの比較","titles":[]},"77":{"title":"OOPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"78":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","OOPにおけるOCPの実装例"]},"79":{"title":"FPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"80":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","FPにおけるOCPの実装例"]},"81":{"title":"拡張例：新しい図形の追加","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"82":{"title":"OOPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"83":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"84":{"title":"FPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"85":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"86":{"title":"OCPにおける比較まとめ","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"87":{"title":"OOPと関数型における設計原則のまとめ","titles":[]},"88":{"title":"各原則の適用比較","titles":["OOPと関数型における設計原則のまとめ"]},"89":{"title":"共通点と違い","titles":["OOPと関数型における設計原則のまとめ"]},"90":{"title":"どちらを選ぶべきか？","titles":["OOPと関数型における設計原則のまとめ"]},"91":{"title":"最後に","titles":["OOPと関数型における設計原則のまとめ"]},"92":{"title":"単一責任の原則（SRP）におけるOOPとFPの比較","titles":[]},"93":{"title":"OOPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"94":{"title":"FPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"95":{"title":"SRPにおける比較まとめ","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"96":{"title":"オープンクローズドの原則 (Open-Closed Principle)","titles":[]},"97":{"title":"この原則の要点","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"98":{"title":"この原則が解決する問題","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"99":{"title":"原則に違反した例","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"100":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"101":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"102":{"title":"❌ 問題点（原則に違反）","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"103":{"title":"原則違反のリスク","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"104":{"title":"解決策：通知手段を拡張できる設計にする","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"105":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"106":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"107":{"title":"✅ 利点","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする"]},"108":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"109":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"110":{"title":"実務で役立つヒント","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"111":{"title":"他のSOLID原則との関連","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"112":{"title":"まとめ","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"113":{"title":"単一責任の原則 (Single Responsibility Principle)","titles":[]},"114":{"title":"単一責任の原則とは","titles":["単一責任の原則 (Single Responsibility Principle)"]},"115":{"title":"なぜ「アクター」の観点が重要か？","titles":["単一責任の原則 (Single Responsibility Principle)"]},"116":{"title":"アクターとは？","titles":["単一責任の原則 (Single Responsibility Principle)","なぜ「アクター」の観点が重要か？"]},"117":{"title":"🔎 例：SRP違反の構造","titles":["単一責任の原則 (Single Responsibility Principle)","なぜ「アクター」の観点が重要か？"]},"118":{"title":"単一責任に違反している例","titles":["単一責任の原則 (Single Responsibility Principle)"]},"119":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","🔎 例：SRP違反の構造"]},"120":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","🔎 例：SRP違反の構造"]},"121":{"title":"問題点","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例"]},"122":{"title":"状態（フィールド）も責任に含まれる","titles":["単一責任の原則 (Single Responsibility Principle)"]},"123":{"title":"原則に違反するとどうなるか","titles":["単一責任の原則 (Single Responsibility Principle)"]},"124":{"title":"解決策：責任を分離する","titles":["単一責任の原則 (Single Responsibility Principle)"]},"125":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","問題点"]},"126":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","問題点"]},"127":{"title":"責任の分離の判断基準（リファクタリング時の指針）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"128":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","責任の分離の判断基準（リファクタリング時の指針）"]},"129":{"title":"補足：DRY原則との関係","titles":["単一責任の原則 (Single Responsibility Principle)"]},"130":{"title":"❌ よくある誤解","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"131":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"132":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"133":{"title":"✅ 正しい構成例：責任の分離","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"134":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"135":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"136":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"137":{"title":"補足：インターフェースを使った責任の分離（TypeScript）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"138":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"139":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"140":{"title":"各原則のチェックリスト（基本 + 詳細）","titles":[]},"141":{"title":"✅ SOLID原則 チェックリスト","titles":[]},"142":{"title":"☑︎ 単一責任の原則（SRP）","titles":["✅ SOLID原則 チェックリスト"]},"143":{"title":"☑︎ オープンクローズドの原則（OCP）","titles":["✅ SOLID原則 チェックリスト"]},"144":{"title":"☑︎ リスコフの置換原則（LSP）","titles":["✅ SOLID原則 チェックリスト"]},"145":{"title":"☑︎ インターフェース分離の原則（ISP）","titles":["✅ SOLID原則 チェックリスト"]},"146":{"title":"☑︎ 依存性逆転の原則（DIP）","titles":["✅ SOLID原則 チェックリスト"]},"147":{"title":"SOLID原則とは","titles":[]},"148":{"title":"なぜSOLIDが必要なのか？","titles":["SOLID原則とは"]},"149":{"title":"SOLID原則を適用するメリット","titles":["SOLID原則とは"]},"150":{"title":"👎 非SOLIDなコードの問題点","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"151":{"title":"👍 SOLIDなコードのメリット","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"152":{"title":"SOLID原則間の関連性","titles":["SOLID原則とは"]},"153":{"title":"SOLID原則の関連性","titles":["SOLID原則とは","SOLID原則間の関連性"]},"154":{"title":"学習を深めるためのリソース","titles":["SOLID原則とは"]},"155":{"title":"SOLID原則ケーススタディ：ECサイト機能拡張","titles":[]},"156":{"title":"シナリオ","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"157":{"title":"非SOLIDなコード（Before）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"158":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"159":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"160":{"title":"SOLID原則に準拠したリファクタリング（After）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"161":{"title":"✅ 単一責任の原則（SRP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"162":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"163":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"164":{"title":"✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"165":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"166":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"167":{"title":"✅ インターフェース分離の原則（ISP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"168":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"169":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"170":{"title":"✅ 依存性逆転の原則（DIP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"171":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"172":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"173":{"title":"✅ この設計の利点","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]}},"dirtCount":0,"index":[["支払い手段の追加",{"2":{"173":1}}],["支払い処理のみに責任を持つ",{"2":{"163":1}}],["支払い処理",{"2":{"159":1}}],["＋リスコフの置換原則",{"0":{"164":1},"1":{"165":1,"166":1}}],["注文確認メール送信",{"2":{"159":2}}],["注意点",{"2":{"67":1,"71":1,"86":1,"95":1}}],["ポイント計算方式の変更が柔軟に",{"2":{"173":1}}],["ポイント計算のみに責任を持つ",{"2":{"163":1}}],["ポイント計算",{"2":{"159":1}}],["ポリモーフィズムや拡張ポイントを利用しているか",{"2":{"140":1,"143":1}}],["ポリモーフィズムを活用して拡張ポイントを明確にする",{"2":{"110":1}}],["ポリモーフィズムを使った拡張",{"2":{"77":1}}],["ポリモーフィズム",{"2":{"77":2}}],["銀行振込処理",{"2":{"159":1,"166":1}}],["クレジットカード処理",{"2":{"159":1,"166":1}}],["クライアントにとって不要なメソッドへの依存を強制しない",{"2":{"147":1}}],["クライアントに返す戻り値",{"2":{"41":1}}],["クライアントが不要なメソッドに依存していないか",{"2":{"140":1,"145":1}}],["クライアントコードに影響なく置き換えられるか",{"2":{"140":1,"144":1}}],["クライアントコードがサブクラスと親クラスを区別せず使えているか",{"2":{"140":1,"144":1}}],["クライアントコードが",{"2":{"20":1}}],["クライアントは自分が使用しないメソッドへの依存を強制されるべきではない",{"2":{"68":1}}],["クラスやモジュールに複数の役割が混在していないか",{"2":{"140":1,"142":1}}],["クラスやインターフェース",{"2":{"89":1}}],["クラスの責任が複数あるかを判断しやすくなります",{"2":{"127":1}}],["クラスの振る舞いや構造に対して変更を要求し得る主体を指します",{"2":{"116":1}}],["クラスの肥大化",{"2":{"95":1}}],["クラスの継承",{"2":{"86":1}}],["クラスを変更する理由は1つだけであるべき",{"2":{"114":1}}],["クラスを分ける",{"2":{"95":1}}],["クラスを継承した",{"2":{"27":1}}],["クラス",{"2":{"95":1}}],["クラス単位での責任の明確化を図ります",{"2":{"93":1}}],["クラス単位で責務を分離する",{"2":{"88":1}}],["クラスごとに責務を分離する",{"2":{"93":1}}],["クラスは1つの責任しか持つべきでない",{"2":{"115":1}}],["クラスは",{"2":{"114":1,"147":1}}],["クラスはたった1つの理由でのみ変更されるべきである",{"2":{"92":1}}],["クラスはそれを選んで実装することで",{"2":{"69":1}}],["クラスには変更理由がひとつだけであるべき",{"2":{"115":1}}],["クラスには",{"2":{"27":1}}],["クラスがあるとします",{"2":{"27":1}}],["クラス図",{"0":{"3":1,"8":1,"17":1,"22":1,"26":1,"28":1,"33":1,"50":1,"57":1,"100":1,"105":1,"108":1,"119":1,"125":1,"131":1,"134":1,"138":1,"158":1,"162":1,"165":1,"168":1,"171":1}}],["userid",{"2":{"159":1,"163":1}}],["uncle",{"2":{"114":1}}],["非solidなコード",{"0":{"157":1},"1":{"158":1,"159":1}}],["非solidなコードの問題点",{"0":{"150":1}}],["しかし現在のコードはsolid原則に従っておらず",{"2":{"156":1}}],["しばしば",{"2":{"115":1}}],["あなたは既存のecサイトに新しい支払い方法やロイヤリティプログラムを追加する必要があります",{"2":{"156":1}}],["あるクラスがレポートの内容とメール送信先の設定を同時に保持している場合",{"2":{"122":1}}],["シナリオ",{"0":{"156":1}}],["システムを利用するユーザーだけでなく",{"2":{"116":1}}],["qiita",{"2":{"154":1}}],["guru",{"2":{"154":1}}],["guide",{"2":{"154":1}}],["generator",{"2":{"93":2}}],["generatereport",{"2":{"94":2,"117":1}}],["generate",{"2":{"93":2}}],["getarea",{"2":{"37":1,"38":2,"52":2,"54":2,"58":4}}],["学習を深めるためのリソース",{"0":{"154":1}}],["疎結合なモジュール設計を促進します",{"2":{"152":1}}],["相互に関連し合っています",{"2":{"152":1}}],["共有がしやすい",{"2":{"151":1}}],["共通点と違い",{"0":{"89":1}}],["共通の鳥の性質",{"2":{"34":1,"73":1}}],["共通の動作に着目したインターフェースを使う",{"0":{"32":1},"1":{"33":1,"34":1}}],["チーム開発での理解",{"2":{"151":1}}],["チェックリスト",{"0":{"141":1},"1":{"142":1,"143":1,"144":1,"145":1,"146":1}}],["予測しやすい",{"2":{"151":1}}],["似たような処理を何度も書いてしまう",{"2":{"150":1}}],["再利用しづらく",{"2":{"150":1}}],["再利用性の高いソフトウェアを構築するための設計指針であり",{"2":{"147":1}}],["全体を理解するのに時間がかかる",{"2":{"150":1}}],["多くの既存コードを変更する必要がある",{"2":{"150":1}}],["多機能プリンタ",{"2":{"16":1}}],["簡単な機能追加のはずなのに",{"2":{"150":1}}],["簡略化された表現",{"2":{"114":1}}],["ちょっとした修正が",{"2":{"150":1}}],["現代のソフトウェア開発では",{"2":{"148":1}}],["結合度を下げる",{"2":{"147":1}}],["安全な拡張が可能になる",{"2":{"147":1}}],["安全に置換できる前提",{"2":{"74":1}}],["得られるメリット",{"2":{"147":1}}],["説明",{"2":{"147":1}}],["頭文字",{"2":{"147":1}}],["良い設計",{"2":{"147":1}}],["☑︎",{"0":{"142":1,"143":1,"144":1,"145":1,"146":1}}],["テキスト版はこちら",{"2":{"140":1}}],["テスト容易",{"2":{"173":1}}],["テスト容易性",{"2":{"67":1,"71":1,"89":1}}],["テストがしにくい",{"2":{"150":1}}],["テストしやすいように",{"2":{"140":1,"142":1}}],["テスト対象が多く",{"2":{"123":1}}],["テスト済みの既存コードに手を加えることになるため",{"2":{"102":1}}],["テスト範囲が広がり",{"2":{"98":1}}],["テストのしやすさ",{"2":{"95":1}}],["テスト性",{"2":{"75":1}}],["テスト用モックや依存注入",{"2":{"95":1}}],["テスト用関数の差し替え",{"2":{"67":1}}],["テスト用のモックロガーなど",{"2":{"65":1}}],["テストに失敗する",{"2":{"38":1,"54":1}}],["テストコード",{"0":{"38":1}}],["テスト時には以下のように差し替えることができます",{"2":{"66":1}}],["テスト時には",{"2":{"10":1}}],["派生クラスは親クラスとして振る舞えるか",{"2":{"140":1,"144":1}}],["派生クラスは基底クラスと置き換えてもプログラムの正しさが保たれるべきである",{"2":{"72":1}}],["基底クラス",{"2":{"140":1,"143":1}}],["基本項目",{"2":{"140":1}}],["基本",{"0":{"140":1}}],["□",{"2":{"140":25}}],["詳細項目",{"2":{"140":1}}],["詳細",{"0":{"140":1}}],["後に学ぶ",{"2":{"139":1}}],["役割ごとの設計がしやすくなります",{"2":{"137":1}}],["月次レポート",{"2":{"136":1}}],["一つのクラスが複数の役割を持たなくなり",{"2":{"152":1}}],["一見よさそうに見えますが",{"2":{"132":1}}],["一部の修正",{"2":{"123":1}}],["ログ機能を専用クラスとして分離",{"2":{"135":1}}],["ログ出力の責任が印刷",{"2":{"132":1}}],["ログ出力を共通化したつもりが",{"2":{"132":1}}],["ロバート",{"2":{"114":1}}],["送信それぞれの機能に密結合してしまっています",{"2":{"132":1}}],["送信",{"2":{"132":1,"135":1}}],["送信する処理を1つのクラスに詰め込んだ例です",{"2":{"118":1}}],["同じ処理をしているから",{"2":{"130":1}}],["同じコードやロジックを繰り返さない",{"2":{"129":1}}],["yourself",{"2":{"129":1}}],["売上は前年比120",{"2":{"128":1}}],["売上レポート",{"2":{"128":1}}],["挙動にも影響が出る可能性がある",{"2":{"123":1}}],["宛先やフォーマット変更を行いたい",{"2":{"123":1}}],["修正",{"2":{"148":1}}],["修正や拡張がしやすくなる",{"2":{"147":1}}],["修正のリスクが高くなる",{"2":{"123":1}}],["修正に閉じているべき",{"2":{"147":1}}],["修正に閉じていない",{"2":{"103":1}}],["修正に閉じる",{"2":{"112":1}}],["修正に閉じられている",{"2":{"97":2}}],["修正に対して閉じられているべきである",{"2":{"76":1}}],["どの責任に影響があるかを特定するのに時間がかかる",{"2":{"123":1}}],["どちらを選ぶべきか",{"0":{"90":1}}],["どちらもモジュール",{"2":{"1":1}}],["データ構造が異なるアクターに属する場合もsrp違反となり得ます",{"2":{"122":1}}],["データ型と関数の追加",{"2":{"86":1}}],["運用やインフラ担当の関心",{"2":{"122":1}}],["運用担当",{"2":{"116":1,"117":1}}],["営業部など",{"2":{"122":1}}],["営業部門",{"2":{"116":1}}],["レポートの内容",{"2":{"122":1}}],["レポートを印刷",{"2":{"118":1}}],["分離の検討をする",{"2":{"127":1}}],["分離すべき設計かもしれません",{"2":{"122":1}}],["分割しすぎると煩雑化",{"2":{"71":1}}],["分割の単位",{"2":{"71":1}}],["だけでなく",{"2":{"122":1}}],["だが",{"2":{"15":1}}],["処理",{"2":{"122":1}}],["も責任に含まれる",{"0":{"122":1}}],["ファクトリなどで依存関係を外部化しているか",{"2":{"140":1,"146":1}}],["ファイル管理者の責任",{"2":{"121":1}}],["フィールドとメソッドが密接に関係している単位で",{"2":{"127":1}}],["フィールド",{"0":{"122":1},"2":{"122":1}}],["通信",{"2":{"121":1}}],["通知ごとにクラスを分離すれば",{"2":{"104":1}}],["通知手段を拡張できる設計にする",{"0":{"104":1},"1":{"105":1,"106":1,"107":1,"108":1,"109":1}}],["通知種別ごとの責任が1クラスに集中",{"2":{"102":1}}],["通知方法が増えるたびに",{"2":{"102":1}}],["プリンタ担当者の責任",{"2":{"121":1}}],["プログラムコードの中にプログラムが満たすべき仕様について記述することで",{"2":{"39":1}}],["保存",{"2":{"118":1,"132":2,"135":1}}],["保守が避けられません",{"2":{"148":1}}],["保守が困難になるのです",{"2":{"116":1}}],["保守性が高い",{"2":{"173":1}}],["保守性が向上",{"2":{"151":1}}],["保守性に課題があります",{"2":{"156":1}}],["保守性",{"2":{"147":1}}],["保守を行う運用者や管理者",{"2":{"116":1}}],["保守コストが増大",{"2":{"98":1}}],["以下のような問題を解決できます",{"2":{"149":1}}],["以下のような視点を持つと",{"2":{"127":1}}],["以下のようなものが該当します",{"2":{"116":1}}],["以下は",{"2":{"118":1}}],["法制度やドメインルールなど",{"2":{"116":1}}],["ルール",{"2":{"116":1}}],["規格",{"2":{"116":1}}],["技術的",{"2":{"116":1}}],["技術的アクター",{"2":{"116":1}}],["ビジネス要件の変更を要求する人々",{"2":{"116":1}}],["ビジネスアクター",{"2":{"116":1,"122":1}}],["顧客など",{"2":{"116":1}}],["経営層",{"2":{"116":1,"117":1}}],["外部の制約により変更を強いる存在",{"2":{"116":1}}],["外部システム",{"2":{"116":1}}],["外部インターフェースの仕様策定者なども含まれます",{"2":{"116":1}}],["外の回答",{"2":{"53":1}}],["人",{"2":{"116":1}}],["have",{"2":{"115":1}}],["height",{"2":{"37":2,"47":1,"52":10,"58":5,"82":2,"84":2,"85":1}}],["提唱者",{"2":{"115":1}}],["なぜsolidが必要なのか",{"0":{"148":1}}],["なぜ",{"0":{"115":1},"1":{"116":1,"117":1}}],["など設計上のゴールは共通している",{"2":{"89":1}}],["からの変更要求にのみ対応すべきという意味です",{"2":{"114":1}}],["かどうかに注目した設計に変えましょう",{"2":{"32":1}}],["や役割を指します",{"2":{"114":1}}],["アクターが異なる処理が1つのクラスに混在しており",{"2":{"121":1}}],["アクター",{"0":{"115":1},"1":{"116":1,"117":1},"2":{"115":1}}],["アクターとは",{"0":{"116":1},"2":{"114":1,"116":1}}],["アプリ通知システム",{"2":{"99":1}}],["マーティン自身は",{"2":{"114":1}}],["マーティン",{"2":{"114":1}}],["本来の意図は",{"2":{"114":1}}],["本質的な意味です",{"2":{"114":1}}],["本記事では",{"2":{"76":1,"92":1}}],["たった一人のアクター",{"2":{"114":2,"147":1}}],["たとえば",{"2":{"2":1,"16":1,"27":1,"99":1,"116":1,"122":1}}],["具体的な実装の変更に強くなる",{"2":{"111":1}}],["具体的な出力方法には依存していません",{"2":{"66":1}}],["責任の分離",{"0":{"133":1},"1":{"134":1,"135":1,"136":1,"138":1,"139":1}}],["責任の分離の判断基準",{"0":{"127":1},"1":{"128":1}}],["責任を分離する",{"0":{"124":1},"1":{"125":1,"126":1}}],["責任を分離することで",{"2":{"111":1}}],["責任",{"2":{"115":1,"140":1,"145":1}}],["責任者",{"2":{"114":1}}],["責務が明確に分離されているか",{"2":{"140":1,"142":1}}],["責務が複数混在していないか",{"2":{"140":1,"142":1}}],["責務",{"2":{"89":1}}],["責務の分離",{"2":{"89":1,"95":1}}],["責務分離や抽象化を適切に設計することで",{"2":{"67":1}}],["適切に抽象化された",{"2":{"110":1}}],["適用可能な原則と限界",{"2":{"62":1}}],["設計が複雑になる危険があります",{"2":{"129":1}}],["設計により",{"2":{"112":1}}],["設計段階で",{"2":{"110":1}}],["設計原則を理解し",{"2":{"91":1}}],["変更がクラス追加のみで可能",{"2":{"173":1}}],["変更の影響範囲が局所的で",{"2":{"151":1}}],["変更の可能性がある部分を特定し",{"2":{"110":1}}],["変更理由が明確になり",{"2":{"147":1}}],["変更理由が複数になり",{"2":{"116":1}}],["変更理由",{"2":{"115":1,"140":1,"142":1}}],["変更理由も分離され",{"2":{"111":1}}],["変更を要求する利害関係者",{"2":{"114":1}}],["変換できるかを探る",{"2":{"61":1}}],["キャンペーンのお知らせ",{"2":{"109":1}}],["いる状態",{"2":{"107":1}}],["いるが",{"2":{"107":1}}],["閉じて",{"2":{"107":1}}],["閉鎖原則",{"0":{"76":1},"1":{"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1},"2":{"62":1,"76":1,"88":1}}],["開発後の変更要求に柔軟に対応できる",{"2":{"147":1}}],["開発者など",{"2":{"116":1}}],["開発",{"2":{"116":1}}],["開かれて",{"2":{"107":1}}],["開放",{"0":{"76":1},"1":{"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1},"2":{"62":1,"76":1,"88":1}}],["＝単一責任",{"2":{"139":1}}],["＝",{"2":{"103":1}}],["＝リスコフの置換原則違反",{"2":{"30":1}}],["契約",{"2":{"110":1}}],["契約完了",{"2":{"103":1}}],["契約による設計においての",{"0":{"42":1}}],["契約による設計",{"0":{"39":1},"1":{"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1}}],["よくある誤解",{"0":{"130":1},"1":{"131":1,"132":1}}],["ようこそ",{"2":{"103":1}}],["より弱い事前条件になっている",{"2":{"45":1}}],["より強い事前条件になっているため",{"2":{"45":1}}],["バグのリスクが高まる",{"2":{"102":1}}],["ユーザーや関係者",{"2":{"114":1}}],["ユーザーに対して様々な方法で通知を送る仕組みです",{"2":{"99":1}}],["ユニオン型",{"2":{"75":1}}],["ユニオン型とパターンマッチにより",{"2":{"74":1}}],["ユニットテスト",{"0":{"54":1},"1":{"55":1}}],["既存コードを壊さずに新しい振る舞いを追加できる",{"2":{"147":1}}],["既存コードを変更せずに拡張できる",{"2":{"111":1}}],["既存コードの修正によるバグ発生リスク",{"2":{"98":1}}],["既存の動作には",{"2":{"107":1}}],["既存のコードは一切変更しない",{"2":{"107":1}}],["既存の安定したコードを変更しなくてもよい",{"2":{"97":1}}],["既存クラスを開いて書き換える必要がある",{"2":{"103":1}}],["新機能の追加が容易",{"2":{"151":1}}],["新機能追加のたびに既存コードを変更する必要がある",{"2":{"98":1}}],["新たに追加",{"2":{"109":1}}],["新規拡張は",{"2":{"107":1}}],["新しい支払い方法を追加するたびにこのメソッドを変更する必要がある",{"2":{"159":1}}],["新しい振る舞いを既存コードの変更なしに追加できる構成か",{"2":{"140":1,"143":1}}],["新しい機能追加の際に既存クラスを修正していないか",{"2":{"140":1,"143":1}}],["新しいクラスに抽出する",{"2":{"127":1}}],["新しい通知方式を追加しても既存コードを触らずに済みます",{"2":{"104":1}}],["新しい要件や機能を追加できる",{"2":{"97":1}}],["新しい図形の追加",{"0":{"81":1},"1":{"82":1,"83":1,"84":1,"85":1},"2":{"82":1,"83":1}}],["新しい図形を追加する場合",{"2":{"77":1}}],["べきという原則です",{"2":{"97":1}}],["ソフトウェアの変更に対する柔軟性と安定性のバランスを実現します",{"2":{"112":1}}],["ソフトウェアの構成要素は",{"2":{"97":1}}],["ソフトウェア実体は拡張に対して開かれており",{"2":{"76":1}}],["状態",{"0":{"122":1},"2":{"122":1}}],["状態共有がない代わりにパイプライン管理が必要",{"2":{"95":1}}],["状態を持たない分",{"2":{"89":1}}],["生成と出力という異なる責務を別クラスに分けることで",{"2":{"93":1}}],["内容",{"2":{"93":1,"94":1}}],["使用例",{"2":{"93":1,"94":1}}],["使えない機能",{"2":{"19":1}}],["json",{"2":{"93":1,"94":1}}],["補完しあう設計スタイルです",{"2":{"91":1}}],["補足",{"0":{"39":1,"129":1,"137":1},"1":{"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"138":1,"139":1}}],["最後に",{"0":{"91":1}}],["最小構成の関数をテスト可能",{"2":{"71":1}}],["文脈に応じて使い分けるのが理想",{"2":{"90":1}}],["複雑な状態管理やエンティティ設計にはoopの恩恵を受けやすい",{"2":{"90":1}}],["小さなインターフェースを提供し",{"2":{"147":1}}],["小さく目的ごとに分割されたインターフェースを使うことを推奨します",{"2":{"68":1}}],["小規模なロジックや副作用の少ない処理には関数型が適している",{"2":{"90":1}}],["両者とも",{"2":{"89":1}}],["両者は抽象に依存すべきである",{"2":{"64":1}}],["構成する",{"2":{"88":1}}],["構造",{"2":{"86":1}}],["構造の保証",{"2":{"74":1}}],["機能追加のたびに既存コードを変更しなければならず",{"2":{"156":1}}],["機能追加が容易で安全なコードベースを構築できます",{"2":{"112":1}}],["機能単位に分割されたインターフェースを実装",{"2":{"88":1}}],["機能ごとにインターフェースを分割する",{"0":{"21":1},"1":{"22":1,"23":1}}],["依存オブジェクトをモック注入できる",{"2":{"173":1}}],["依存注入で差し替え可能に",{"2":{"88":1}}],["依存性逆転",{"2":{"140":1}}],["依存性逆転の原則を自然な形で実現できます",{"2":{"67":1}}],["依存性逆転の原則に違反している例",{"0":{"2":1},"1":{"3":1,"4":1,"5":1}}],["依存性逆転の原則とは",{"0":{"1":1}}],["依存性逆転の原則",{"0":{"0":1,"64":1,"146":1,"170":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"65":1,"66":1,"67":1,"171":1,"172":1},"2":{"12":1,"62":1,"64":1,"88":1,"111":1,"147":1}}],["依存性の注入",{"2":{"67":1}}],["柔軟で保守性の高いコードを生む第一歩となります",{"2":{"91":1}}],["柔軟だが型の設計が重要",{"2":{"86":1}}],["柔軟性",{"2":{"86":1}}],["柔軟性に影響を与えるかを明らかにします",{"2":{"60":1}}],["特にオブジェクト指向プログラミングにおいて重要です",{"2":{"147":1}}],["特にdiと併用時",{"2":{"86":1}}],["特にsolid",{"2":{"61":1}}],["高レベルモジュールが低レベルの具体実装に依存していないか",{"2":{"140":1,"146":1}}],["高階関数や引数による依存関数の注入",{"2":{"88":1}}],["高い",{"2":{"86":1}}],["高さが変化し",{"2":{"48":1}}],["高さは変化しない",{"2":{"47":1}}],["75",{"2":{"83":1,"85":1}}],["6",{"2":{"83":1,"85":1}}],["66",{"2":{"78":1,"80":1}}],["banktransferpayment",{"2":{"166":1}}],["bank",{"2":{"159":1}}],["base",{"2":{"82":2,"84":2,"85":1}}],["before",{"0":{"157":1},"1":{"158":1,"159":1}}],["bob",{"2":{"114":1}}],["birdならばflyできる",{"2":{"31":1}}],["bird",{"2":{"27":2,"29":3,"30":1,"31":3,"34":3,"73":3,"74":5}}],["拡張のために既存のコード",{"2":{"140":1,"143":1}}],["拡張の単位",{"2":{"86":1}}],["拡張に開かれている",{"2":{"97":1}}],["拡張に開かれ",{"2":{"97":1,"112":1,"147":1}}],["拡張例",{"0":{"81":1},"1":{"82":1,"83":1,"84":1,"85":1}}],["拡張性の高いコードを実現します",{"2":{"152":1}}],["拡張性の確保",{"2":{"89":1}}],["拡張性が高く",{"2":{"151":1}}],["拡張性",{"2":{"67":1,"71":1,"95":1,"147":1}}],["$",{"2":{"80":1,"85":1,"93":1,"94":1,"101":3,"106":3,"109":1,"120":3,"123":4,"126":3,"132":4,"135":4,"172":1}}],["2000年代にrobert",{"2":{"147":1}}],["2",{"2":{"79":2,"82":1,"84":3}}],["26548245743669",{"2":{"78":2,"80":2,"83":2,"85":2}}],["パターンマッチングとデータ駆動の拡張",{"2":{"79":1}}],["50",{"2":{"78":1,"80":1,"83":1,"85":1}}],["カプセル化",{"2":{"77":1}}],["オープンクローズド原則",{"0":{"164":1},"1":{"165":1,"166":1}}],["オープンクローズド",{"2":{"140":1}}],["オープンクローズドの原則の適用が容易になります",{"2":{"152":1}}],["オープンクローズドの原則は",{"2":{"112":1}}],["オープンクローズドの原則に違反する可能性が高まる",{"2":{"35":1}}],["オープンクローズドの原則",{"0":{"96":1,"143":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1},"2":{"12":1,"107":1,"147":1}}],["オブジェクト指向プログラミング",{"2":{"92":1}}],["オブジェクト指向",{"2":{"87":1}}],["オブジェクト指向の三大要素",{"2":{"77":1}}],["異なるアクターの責任をインターフェースとして分離することで",{"2":{"137":1}}],["異なるアクターが関心を持つメソッドが混在していたら",{"2":{"127":1}}],["異なる責任を持つ処理を1つの関数やクラスにまとめるのは危険です",{"2":{"130":1}}],["異なるクラスのオブジェクトが同じインターフェースやメソッドを共有し",{"2":{"77":1}}],["異なるパラダイムでの設計例を通じて読者の理解を深める",{"2":{"61":1}}],["意図しない別の場所に影響してバグが発生する",{"2":{"150":1}}],["意図しないオーバーライドに注意",{"2":{"75":1}}],["意味的な一致まで注意が必要です",{"2":{"75":1}}],["継承関係の一貫性を保ち",{"2":{"147":1}}],["継承とポリモーフィズム",{"2":{"86":1}}],["継承とインターフェース",{"2":{"75":1}}],["継承",{"2":{"77":1}}],["継承や共通インターフェースを使うoopでは",{"2":{"75":1}}],["明示的な分岐で安全な選択",{"2":{"75":1}}],["明示的に",{"2":{"74":1}}],["置換の安全性",{"2":{"75":1}}],["置き換え可能な設計＝リスコフの置換原則に準拠した設計になります",{"2":{"34":1,"73":1}}],["タグ付き構造",{"2":{"75":1}}],["|",{"2":{"74":1,"79":2,"84":3}}],["kind",{"2":{"74":3,"77":3,"78":1,"79":4,"80":3,"82":1,"83":1,"84":4,"85":4}}],["不要なメソッドの空実装や例外的実装が発生していないか",{"2":{"140":1,"145":1}}],["不要な機能を含まないことで容易になる",{"2":{"71":1}}],["不要な依存を避ける構成が自然に実現されます",{"2":{"70":1}}],["組み合わせで対応",{"2":{"71":1}}],["モジュール単位でのテストが容易",{"2":{"151":1}}],["モジュール同士の結びつきが強く",{"2":{"150":1}}],["モジュール間の独立性が高まる",{"2":{"147":1}}],["モジュール",{"2":{"116":1}}],["モジュールの関心が明確になります",{"2":{"70":1}}],["モックによる検証が必要",{"2":{"75":1}}],["モックオブジェクトの注入",{"2":{"67":1}}],["副作用を外部から注入する形で",{"2":{"89":1}}],["副作用を分離することで",{"2":{"94":1}}],["副作用を分離する",{"2":{"88":1,"95":1}}],["副作用",{"2":{"70":1}}],["各クラスが1つの責任に集中し",{"2":{"173":1}}],["各原則は独立していますが",{"2":{"152":1}}],["各原則の実装チェックリストはこちら",{"2":{"147":1}}],["各原則のチェックリスト",{"0":{"140":1}}],["各原則の適用比較",{"0":{"88":1}}],["各原則の一覧",{"0":{"12":1}}],["各機能を別クラスに分離するのが望ましい設計です",{"2":{"117":1}}],["各機能",{"2":{"70":1}}],["余計な依存を避けることができます",{"2":{"69":1}}],["肥大化したインターフェースから生じる影響を避け",{"2":{"68":1}}],["別の関数を注入することで対応",{"2":{"67":1}}],["コンストラクタ注入",{"2":{"140":1,"146":1}}],["コンストラクタやsetterなど",{"2":{"67":1}}],["コンパイルエラー",{"2":{"73":1}}],["コードの再利用性が高く",{"2":{"151":1}}],["コードの構造が複雑で",{"2":{"150":1}}],["コード",{"0":{"4":1,"9":1,"18":1,"23":1,"29":1,"34":1,"37":1,"52":1,"58":1,"101":1,"106":1,"109":1,"120":1,"126":1,"132":1,"135":1,"139":1,"159":1,"163":1,"166":1,"169":1,"172":1},"1":{"53":1,"59":1}}],["観点",{"2":{"67":1,"71":1,"75":1,"86":1,"95":1}}],["比較まとめ",{"0":{"67":1,"71":1,"75":1}}],["比較ページ",{"2":{"62":1}}],["メール仕様変更",{"2":{"123":1}}],["メール送信のみに責任を持つ",{"2":{"163":1}}],["メール送信の仕様を変更するだけなのに",{"2":{"123":1}}],["メール送信仕様を変更したいが",{"2":{"123":1}}],["メール送信仕様変更",{"2":{"123":1}}],["メール送信先",{"2":{"122":1}}],["メール担当の責任",{"2":{"121":1}}],["メッセージを配列などに記録することで検証できる",{"2":{"66":1}}],["メソッドごとに",{"2":{"127":1}}],["メソッド",{"2":{"122":1}}],["メソッドの正常終了時のインスタンスの状態",{"2":{"41":1}}],["メソッドの引数",{"2":{"40":1}}],["メソッド正常終了時に保証されるべき条件",{"2":{"41":1}}],["メソッド開始時のインスタンスの状態",{"2":{"40":1}}],["メソッド開始時に保証されるべき条件",{"2":{"40":1}}],["メソッドがあり",{"2":{"27":1}}],["他の処理も巻き込んでしまう例",{"2":{"123":1}}],["他のクラスやモジュールなど",{"2":{"116":1}}],["他のシステム",{"2":{"116":1}}],["他のsolid原則との関連",{"0":{"111":1}}],["他の実装と容易に差し替えが可能です",{"2":{"65":1}}],["他の支払い手段を自由に差し替えられる",{"2":{"10":1}}],["他の支払い方法を使いたくなったときに書き換えが必要になる",{"2":{"5":1}}],["上位モジュールと下位モジュールは抽象に依存すべき",{"2":{"147":1}}],["上位モジュールが下位モジュールに依存していないか",{"2":{"140":1,"146":1}}],["上位モジュールは下位モジュールに依存すべきではない",{"2":{"64":1}}],["上位のモジュールは下位モジュールに依存してはならない",{"2":{"1":1}}],["まだ対応していない",{"2":{"103":1}}],["また",{"2":{"94":1}}],["またはエラーの可能性",{"2":{"31":1}}],["まとめ",{"0":{"112":1},"2":{"62":1}}],["原則は",{"2":{"129":1}}],["原則違反のリスク",{"0":{"103":1}}],["原則に違反",{"0":{"102":1},"1":{"105":1,"106":1}}],["原則に違反した例",{"0":{"99":1},"1":{"100":1,"101":1,"102":1}}],["原則に違反するとどうなるか",{"0":{"6":1,"20":1,"31":1,"123":1}}],["原則",{"2":{"88":1,"140":1,"147":1}}],["原則名",{"2":{"62":1}}],["今後の内容予定",{"0":{"62":1}}],["対比の目的",{"0":{"61":1}}],["の関心",{"2":{"122":1}}],["ので",{"2":{"117":1}}],["の視点が本質になります",{"2":{"115":1}}],["の観点が重要か",{"0":{"115":1},"1":{"116":1,"117":1}}],["の適用方法と考え方の違いを総括します",{"2":{"87":1}}],["の一つです",{"2":{"77":1}}],["の飛行不能を表現することで",{"2":{"74":1}}],["の意図や効果を再確認する",{"2":{"61":1}}],["の考え方を比較し",{"2":{"60":1}}],["の機能をすべて持つ",{"2":{"16":1}}],["関数単位でテストしやすい",{"2":{"95":1}}],["関数単位で責務を分離し",{"2":{"88":1}}],["関数",{"2":{"95":1}}],["関数ごとの責任の明確化",{"2":{"94":1}}],["関数ごとに責務を分離する",{"2":{"94":1}}],["関数を分ける",{"2":{"95":1}}],["関数を合成して処理フローを作ることが容易です",{"2":{"94":1}}],["関数を機能単位で注入",{"2":{"88":1}}],["関数を依存対象として注入する",{"2":{"66":1}}],["関数マップやデータ駆動設計で拡張",{"2":{"88":1}}],["関数合成とパターンマッチ",{"2":{"86":1}}],["関数注入の構造がわかりづらくなる場合がある",{"2":{"71":1}}],["関数と構造体",{"2":{"71":1}}],["関数と高階関数を用いてこの原則を適用することができます",{"2":{"64":1}}],["関数の分離と合成で対応",{"2":{"86":1}}],["関数の修正は不要",{"2":{"77":1}}],["関数の合成や高階関数で拡張",{"2":{"95":1}}],["関数の合成",{"2":{"71":1}}],["関数の引数が多くなると読みにくいこともある",{"2":{"67":1}}],["関数の型",{"2":{"67":1}}],["関数引数として渡す",{"2":{"67":1}}],["関数に依存しており",{"2":{"66":1}}],["関数型でも",{"2":{"67":1}}],["関数型では構造的に明示することで",{"2":{"75":1}}],["関数型では型の整合性と構造の一貫性に注目が集まります",{"2":{"72":1}}],["関数型では",{"2":{"66":1,"74":1,"94":1}}],["関数型におけるdipの応用",{"0":{"66":1}}],["関数型プログラミングにおいても",{"2":{"64":1}}],["関数型プログラミングでも設計原則を応用",{"2":{"61":1}}],["関数型プログラミング",{"2":{"60":1,"87":1}}],["関係",{"2":{"25":1}}],["関係のない機能まで対応を強いられる",{"2":{"19":1}}],["9",{"2":{"59":1,"83":1,"85":1}}],["想定読者",{"0":{"63":1}}],["想定",{"2":{"53":1}}],["違反例",{"0":{"51":1},"1":{"52":1,"53":1,"54":1,"55":1}}],["with",{"2":{"154":1}}],["width",{"2":{"47":5,"48":5,"52":10,"58":5}}],["wight",{"2":{"37":2}}],["05",{"2":{"169":1}}],["01",{"2":{"159":1,"169":1}}],["0",{"2":{"44":1,"52":2,"58":3,"77":1,"79":1,"159":2,"163":1,"169":2}}],[">",{"2":{"44":1,"45":2}}],["x3c",{"2":{"79":1,"84":1}}],["x26",{"2":{"47":2}}],["x",{"2":{"44":2,"45":3}}],["事後条件",{"2":{"47":1,"48":1}}],["事後条件はスーパータイプと同じかそれより強い条件",{"0":{"46":1},"1":{"47":1,"48":1,"50":1}}],["事後条件とは",{"0":{"41":1}}],["事前条件",{"2":{"44":1,"45":2}}],["事前条件はスーパータイプと同じかそれより弱い条件",{"0":{"43":1},"1":{"44":1,"45":1}}],["事前条件とは",{"0":{"40":1}}],["正しい構成例",{"0":{"133":1},"1":{"134":1,"135":1,"136":1,"138":1,"139":1}}],["正しい継承",{"2":{"25":1}}],["正確で眼瞼なソフトウェアとする設計技法",{"2":{"39":1}}],["1クラスが3つのアクターに責任を持っている",{"2":{"117":1}}],["1つのクラスは1人のアクター",{"2":{"114":1}}],["1つのアクター",{"2":{"114":1}}],["1つの変更理由",{"2":{"114":1}}],["16",{"2":{"53":1,"78":1,"80":1,"83":1,"85":1}}],["16となり",{"2":{"38":1,"54":1}}],["1",{"2":{"45":1,"55":2,"93":1,"94":1}}],["10",{"2":{"45":1}}],["12",{"2":{"38":2,"53":2,"54":2,"59":1}}],["4",{"2":{"38":2,"52":2,"54":2,"58":1,"78":2,"80":2,"83":2,"85":2}}],["3",{"2":{"38":2,"52":2,"54":2,"58":2,"83":1,"85":1}}],["振る舞いの変更に気付くには",{"0":{"36":1},"1":{"37":1,"38":1}}],["振る舞いの同等性",{"2":{"25":1}}],["robert",{"2":{"115":1,"154":3}}],["radius",{"2":{"77":3,"79":2,"80":1,"84":2,"85":1}}],["runapplication",{"2":{"66":3}}],["run",{"2":{"52":2,"58":2,"65":2}}],["r1",{"2":{"38":4,"54":4}}],["regularcustomerpoints",{"2":{"169":1}}],["refactoring",{"2":{"154":1}}],["repeat",{"2":{"129":1}}],["reportmanager",{"2":{"117":1,"120":1,"123":2,"132":1}}],["report",{"2":{"93":4,"94":4,"126":11,"128":5,"132":9,"135":10,"136":5,"139":6}}],["reportprinter",{"2":{"93":2}}],["reportgenerator",{"2":{"93":2}}],["reason",{"2":{"115":1}}],["responsibility",{"0":{"113":1},"1":{"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1},"2":{"92":1,"114":1}}],["recipient",{"2":{"123":2}}],["record",{"2":{"79":1,"84":1}}],["rectable",{"2":{"58":4}}],["rectangle",{"2":{"37":1,"38":3,"52":4,"54":4,"58":2}}],["reduce",{"2":{"77":1,"79":1}}],["return",{"2":{"37":1,"52":2,"58":2,"77":3,"82":1,"93":1,"159":1,"169":2}}],["r",{"2":{"35":1,"37":4,"52":4}}],["リリース後の機能追加",{"2":{"148":1}}],["リファクタリング時の指針",{"0":{"127":1},"1":{"128":1}}],["リスコフの置換条件違反",{"2":{"45":1,"48":1}}],["リスコフの置換原則はオープンクローズドの原則を支え",{"2":{"152":1}}],["リスコフの置換原則に違反するとどうなるか",{"0":{"35":1}}],["リスコフの置換原則に違反した例",{"0":{"27":1},"1":{"28":1,"29":1,"30":1}}],["リスコフの置換原則とは",{"0":{"25":1},"1":{"26":1}}],["リスコフの置換原則",{"0":{"24":1,"72":1,"144":1},"1":{"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"73":1,"74":1,"75":1},"2":{"12":1,"62":1,"72":1,"88":1,"111":1,"140":1,"147":1}}],["リコリスの置換原則に違反したコードを使うと",{"2":{"35":1}}],["ステークホルダー",{"2":{"114":1}}],["スーパータイプより事後条件となるため",{"2":{"48":1}}],["スーパータイプ",{"0":{"44":1,"47":1},"2":{"52":1}}],["スーパータイプとサブタイプで振る舞いが変更されていることを確認する最も簡単な方法は単体テストを書くこと",{"2":{"36":1}}],["スズメが飛んだ",{"2":{"34":1,"73":1}}],["スキャンできる",{"2":{"20":1}}],["スキャンしました",{"2":{"18":1,"23":1}}],["スキャン",{"2":{"16":1}}],["鳴くなど",{"2":{"34":1,"73":1}}],["例",{"0":{"117":1},"1":{"119":1,"120":1},"2":{"34":1,"73":1,"123":1}}],["鳥＝飛ぶもの",{"2":{"32":1}}],["つまり",{"2":{"32":1,"114":1,"116":1}}],["飛べない鳥",{"2":{"32":1}}],["飛べる鳥",{"2":{"32":1}}],["飛べる",{"2":{"32":1}}],["飛べません",{"2":{"30":1}}],["ことを推奨しますが",{"2":{"129":1}}],["ことでdipの考え方を自然に実現できます",{"2":{"66":1}}],["これらの原則は",{"2":{"147":1}}],["これらを実装するクラスは",{"2":{"139":1}}],["これらが1つのクラスに混在すると",{"2":{"116":1}}],["これを",{"2":{"114":1}}],["これは誰のための処理か",{"2":{"127":1}}],["これはocpに適合した設計です",{"2":{"77":1}}],["これは",{"2":{"68":1,"103":1,"117":1}}],["これにより",{"2":{"65":1}}],["ここで誤動作",{"2":{"31":1}}],["この設計の利点",{"0":{"173":1}}],["この設計は",{"2":{"30":1,"139":1}}],["このクラスは1つの理由でしか変更されないか",{"2":{"140":1,"142":1}}],["この",{"2":{"115":2}}],["この機能は将来的に種類が増えるかもしれない",{"2":{"110":1}}],["この原則が解決する問題",{"0":{"98":1}}],["この原則の要点",{"0":{"97":1}}],["この比較はどちらの立場を優劣とするものではなく",{"2":{"63":1}}],["このセクションでは",{"2":{"60":1,"87":1}}],["このようにログ出力をdryの観点から共通化すると",{"2":{"132":1}}],["このように",{"2":{"93":1,"122":1}}],["このようにすれば",{"2":{"34":1,"73":1}}],["このように分離することで",{"2":{"23":1}}],["このプリンタはfaxできません",{"2":{"18":1}}],["このプリンタはスキャンできません",{"2":{"18":1}}],["このサイトは",{"2":{"11":1}}],["でした",{"2":{"128":1}}],["で",{"2":{"114":1}}],["で抽象化し",{"2":{"89":1}}],["です",{"2":{"30":1,"116":1,"117":1}}],["では意図しない動作や例外が発生するかもしれません",{"2":{"30":1}}],["型ガードと構造的な安全性による置換保証",{"2":{"88":1}}],["型の肥大化とcaseの集中化",{"2":{"86":1}}],["型の分離により検証容易",{"2":{"75":1}}],["型の置換が意味的にも安全",{"2":{"74":1}}],["型の置き換えができない",{"2":{"30":1}}],["型で表現され防止しやすい",{"2":{"75":1}}],["型で受け取って",{"2":{"30":1}}],["型ごとの明確な分離",{"2":{"74":1}}],["型不一致",{"2":{"73":1}}],["型に対してのみ",{"2":{"34":1,"73":1}}],["ペンギン",{"2":{"30":1}}],["空を飛ぶ",{"2":{"29":1}}],["すべての鳥が飛べる前提です",{"2":{"27":1}}],["filesaver",{"2":{"126":1,"128":1,"135":1,"136":1}}],["foreach",{"2":{"78":1,"80":1,"83":1,"85":1,"106":1}}],["function",{"2":{"77":1}}],["fpでは",{"2":{"89":1}}],["fpでは関数の責任を明示的に分離することで",{"2":{"71":1}}],["fpでは関数の構成と引数単位の依存注入によってispを達成できます",{"2":{"68":1}}],["fpは関数とデータで抽象化する",{"2":{"89":1}}],["fpの拡張例",{"0":{"84":1}}],["fpの例",{"2":{"79":1,"94":1}}],["fpにおけるsrpの実装例",{"0":{"94":1}}],["fpにおける実践",{"2":{"88":1}}],["fpにおけるocpの実装例",{"0":{"79":1},"1":{"80":1}}],["fpにおけるlspの実装例",{"0":{"74":1}}],["fpにおけるispの実装例",{"0":{"70":1}}],["fpにおけるdipの応用",{"2":{"62":1}}],["fp",{"2":{"60":1,"67":1,"71":1,"75":1,"86":1,"92":1,"95":1}}],["failed",{"2":{"55":1}}],["faxnotifier",{"2":{"109":2}}],["faxnotifierを新規追加するだけで対応でき",{"2":{"107":1}}],["faxに対応するには",{"2":{"103":1}}],["faxが新しく追加されたが",{"2":{"103":1}}],["faxを送信しました",{"2":{"18":1,"23":1}}],["fax",{"2":{"16":1,"18":3,"23":4,"103":1}}],["from",{"2":{"54":1}}],["f",{"2":{"37":1,"38":2,"52":3,"54":3,"58":3}}],["flyer",{"2":{"34":3,"73":6}}],["fly",{"2":{"27":1,"29":1,"30":1,"31":2,"34":4,"73":5,"74":3}}],["+",{"0":{"140":1},"2":{"25":1,"77":1,"79":1}}],["そのような変化に柔軟に対応できる設計を実現するために重要な指針です",{"2":{"148":1}}],["その結果",{"2":{"123":1}}],["そのものを変更してしまう",{"2":{"123":1}}],["そのクラスの",{"2":{"140":1,"142":1}}],["そのクラスの変更を要求する主体",{"2":{"116":1}}],["そのクラスを利用している者",{"2":{"116":1}}],["そのクラスに変更を求める人や立場＝アクターを意味します",{"2":{"115":1}}],["そのスーパータイプと置換可能でなければならない",{"2":{"25":1}}],["それを",{"2":{"110":1}}],["それをすべてのプリンタに強制している例です",{"2":{"16":1}}],["それぞれが異なるアクターの責任領域であれば",{"2":{"122":1}}],["それぞれ異なる方法でそれを実装できる特性のことです",{"2":{"77":1}}],["それぞれの文脈に応じた適用ができることが",{"2":{"91":1}}],["それぞれの長所と特徴を理解することを目的としています",{"2":{"63":1}}],["それぞれの設計手法がどのように責務の分離や拡張性",{"2":{"60":1}}],["サブクラスで例外的な動作",{"2":{"140":1,"144":1}}],["サブクラスでの実装を強制することができる",{"2":{"15":1}}],["サブクラスが親クラスの期待する振る舞いをすべて満たしているか",{"2":{"140":1,"144":1}}],["サブクラス化や委譲",{"2":{"95":1}}],["サブタイプが正しく設計されていれば",{"2":{"111":1}}],["サブタイプ",{"0":{"45":1,"48":1},"2":{"52":1}}],["サブタイプの事後条件はスーパータイプと同じかそれより強い条件と置き換える",{"2":{"42":1}}],["サブタイプの事前条件はスーパータイプと同じかそれより弱い条件と置き換え",{"2":{"42":1}}],["サブタイプの事前条件と事後条件",{"0":{"42":1}}],["サブタイプはスーパータイプと置換可能でなければならない",{"2":{"147":1}}],["サブタイプは",{"2":{"25":1}}],["→",{"2":{"23":1,"121":3,"122":2,"123":1}}],["必要な関数だけを構成する",{"2":{"71":1}}],["必要な関数だけを構成要素として渡すことで",{"2":{"70":1}}],["必要なインターフェースだけ",{"2":{"23":1}}],["必要な機能だけを持つインターフェースを定義し",{"2":{"69":1}}],["必要な機能だけ",{"2":{"23":1}}],["信頼性を損なう",{"2":{"20":1}}],["といって",{"2":{"130":1}}],["という",{"2":{"115":1}}],["という観点から説明しています",{"2":{"114":1}}],["という定義をしており",{"2":{"114":1}}],["ということです",{"2":{"114":1}}],["という設計原則です",{"2":{"72":1,"76":1}}],["という原則です",{"2":{"68":1}}],["という抽象に依存しており",{"2":{"65":1}}],["という抽象に依存しているので",{"2":{"10":1}}],["という考え方です",{"2":{"64":1,"92":1}}],["という前提ではなく",{"2":{"32":1}}],["と混同すると",{"2":{"129":1}}],["と問い直す",{"2":{"127":1}}],["と言い換えることもできます",{"2":{"116":1}}],["と表現されますが",{"2":{"115":1}}],["と考える習慣をつける",{"2":{"110":1}}],["として切り出す",{"2":{"110":1}}],["と関数型プログラミング",{"2":{"92":1}}],["とfp",{"2":{"87":1}}],["とは誰のためのものか",{"2":{"115":1}}],["とは",{"2":{"77":1,"115":1}}],["と",{"2":{"32":1,"74":1}}],["と信じて使っているのに",{"2":{"31":1}}],["と誤解して使ってしまう",{"2":{"20":1}}],["将来の変更時に",{"2":{"19":1}}],["利害関係者",{"2":{"114":1}}],["利用側に応じた適切な粒度のインターフェースが提供されているか",{"2":{"140":1,"145":1}}],["利用側でクラスを判別するための分岐を入れののはng",{"2":{"35":1}}],["利用例",{"0":{"78":1,"80":1,"83":1,"85":1}}],["利用者",{"2":{"114":2}}],["利用者がサブタイプまで全て理解した上で利用する必要がある",{"2":{"35":1}}],["利用者が想定しない挙動によるバグが発生する可能性が高まる",{"2":{"35":1}}],["利用者はスーパータイプとサブタイプは同じ挙動を期待して利用する",{"2":{"35":1}}],["利用者は",{"2":{"31":1}}],["利用者も",{"2":{"19":1}}],["利点",{"0":{"10":1,"107":1},"1":{"108":1,"109":1}}],["無理やり実装を強制されている",{"2":{"19":1}}],["ecサイト機能拡張",{"0":{"155":1},"1":{"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1}}],["ecサイトの責務分離と拡張設計",{"2":{"13":1}}],["else",{"2":{"101":2,"159":1}}],["emailservice",{"2":{"163":1,"172":3}}],["emailsender",{"2":{"126":1,"128":1,"135":1,"136":1}}],["emailable",{"2":{"139":1}}],["emailnotifier",{"2":{"106":1,"109":1}}],["email",{"2":{"101":1,"103":1}}],["example",{"2":{"123":1}}],["export",{"2":{"52":3}}],["expect",{"2":{"38":2,"54":2}}],["extends",{"2":{"29":2,"34":2,"52":1,"73":2}}],["error",{"2":{"18":2}}],["after",{"0":{"160":1},"1":{"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1}}],["agile",{"2":{"154":1}}],["architecture",{"2":{"154":1}}],["areamap",{"2":{"79":2,"84":1}}],["area",{"2":{"77":4,"78":1,"79":2,"80":1,"82":1,"83":1,"85":1}}],["action",{"2":{"132":2,"135":2}}],["admin",{"2":{"123":1}}],["apiの利用者",{"2":{"116":1}}],["app",{"2":{"65":2}}],["application",{"2":{"65":4,"66":1}}],["and",{"2":{"154":2}}],["any",{"2":{"79":1,"84":1,"93":1,"94":1}}],["animal",{"2":{"74":6}}],["a",{"2":{"25":1,"74":3,"115":1,"154":1}}],["allinoneprinter",{"2":{"18":1,"23":1}}],["amount",{"2":{"4":4,"6":2,"9":7,"169":5}}],["martin公式サイト",{"2":{"154":1}}],["martin著",{"2":{"154":2}}],["martin氏によって提唱されました",{"2":{"147":1}}],["martin",{"2":{"115":1}}],["math",{"2":{"77":1,"79":1,"84":1}}],["makefly",{"2":{"73":3,"74":1}}],["makeitfly",{"2":{"31":2}}],["multifunctionprinter",{"2":{"69":1}}],["multifunctiondevice",{"2":{"16":1,"18":3}}],["msg",{"2":{"66":4}}],["message",{"2":{"65":3,"66":1,"101":4,"106":9,"109":2,"123":2}}],["mockpayment",{"2":{"10":1}}],["印刷処理や保存処理のテスト",{"2":{"123":1}}],["印刷や保存",{"2":{"123":1}}],["印刷しました",{"2":{"18":2,"23":2}}],["印刷",{"2":{"16":1,"132":1,"135":1}}],["を支えるものです",{"2":{"147":1}}],["をしていないか",{"2":{"140":1,"144":1}}],["を利用して柔軟に設計されているか",{"2":{"140":1,"143":1}}],["を頻繁に修正していないか",{"2":{"140":1,"143":1}}],["を持つことになります",{"2":{"139":1}}],["を定義する",{"2":{"110":1}}],["を自然に満たしている",{"2":{"107":1}}],["を柔軟に管理できる",{"2":{"89":1}}],["を避けている",{"2":{"74":1}}],["を関数単位で分離して注入するため",{"2":{"70":1}}],["を通じてこの原則を実現しますが",{"2":{"64":1}}],["を呼び出せるようになるため",{"2":{"34":1,"73":1}}],["を呼ぶと",{"2":{"30":1}}],["を分けて扱うようにします",{"2":{"32":1}}],["を正しく扱えないためバグの原因になります",{"2":{"31":1}}],["を実装し",{"2":{"23":1}}],["を見えてしまう",{"2":{"19":1}}],["を考えてみましょう",{"2":{"16":1,"99":1}}],["を注入することで柔軟なテストが可能",{"2":{"10":1}}],["➡️",{"2":{"15":1}}],["インターフェースが1つの関心事",{"2":{"140":1,"145":1}}],["インターフェースは肥大化していないか",{"2":{"140":1,"145":1}}],["インターフェース分離",{"2":{"140":1}}],["インターフェース分離の原則と依存性逆転の原則は互いに補完し合い",{"2":{"152":1}}],["インターフェース分離の原則とは",{"0":{"15":1}}],["インターフェース分離の原則はどちらのパラダイムでも自然に適用できます",{"2":{"71":1}}],["インターフェース分離の原則に準拠した設計になります",{"2":{"23":1}}],["インターフェース分離の原則に違反した例",{"0":{"16":1},"1":{"17":1,"18":1,"19":1}}],["インターフェース分離の原則",{"0":{"14":1,"68":1,"145":1,"167":1},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"69":1,"70":1,"71":1,"168":1,"169":1},"2":{"12":1,"62":1,"68":1,"88":1,"139":1,"147":1}}],["インターフェース設計が重要",{"2":{"110":1}}],["インターフェースで通知手段を抽象化し",{"2":{"104":1}}],["インターフェースの変更を要求し得るもの",{"2":{"116":1}}],["インターフェースの継承における意味的な互換性の保証",{"2":{"88":1}}],["インターフェースのクライアントにとって利用しないフィールドやメソッドへの依存を矯正してはならない",{"2":{"15":1}}],["インターフェースに依存し",{"2":{"88":1}}],["インターフェースに用意されている不必要なフィールドやメソッドにクライアントが依存しなくてもいいようにインターフェースは適切に分割すべき",{"2":{"15":1}}],["インターフェースと継承で拡張",{"2":{"88":1}}],["インターフェースを使った責任の分離",{"0":{"137":1},"1":{"138":1,"139":1}}],["インターフェースを通じた拡張",{"2":{"86":1}}],["インターフェースを実装したクラスを追加するだけでよい",{"2":{"77":1}}],["インターフェースを定義し",{"2":{"16":1}}],["インターフェース追加と実装切り替え",{"2":{"71":1}}],["インターフェース",{"2":{"67":1,"71":1,"140":2,"143":1,"146":1}}],["インターフェースや抽象クラスの抽象メソッドは未実装のままではエラーとなり",{"2":{"15":1}}],["ケーススタディ",{"0":{"13":1}}],["d",{"2":{"147":1}}],["don",{"2":{"129":1}}],["dry",{"2":{"129":1}}],["dry原則との関係",{"0":{"129":1},"1":{"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1}}],["dba",{"2":{"116":1,"117":1}}],["data",{"2":{"93":4,"94":4}}],["diコンテナ",{"2":{"140":1,"146":1}}],["di",{"2":{"64":1}}],["dip",{"0":{"64":1,"146":1,"170":1},"1":{"65":1,"66":1,"67":1,"171":1,"172":1},"2":{"12":1,"62":1,"64":1,"87":1,"88":1,"140":1,"173":1}}],["dev",{"2":{"154":1}}],["development",{"2":{"154":1}}],["design",{"2":{"154":1}}],["describe",{"2":{"54":1}}],["dependency",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"64":1}}],["l",{"2":{"147":1}}],["length",{"2":{"58":6}}],["liskov",{"0":{"24":1},"1":{"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1},"2":{"72":1}}],["lspのリスクを低減できます",{"2":{"75":1}}],["lsp違反の危険",{"2":{"75":1}}],["lsp違反を事前に防ぎやすくなっています",{"2":{"74":1}}],["lspにおけるoopとfpの比較",{"2":{"62":1}}],["lsp",{"0":{"72":1,"144":1,"164":1},"1":{"73":1,"74":1,"75":1,"165":1,"166":1},"2":{"12":1,"62":1,"72":1,"87":1,"88":1,"140":1}}],["logs",{"2":{"66":1}}],["logger",{"2":{"65":6,"66":7,"135":10,"136":5}}],["log",{"2":{"4":1,"6":1,"9":2,"18":4,"23":4,"29":1,"34":1,"52":2,"58":1,"65":4,"66":1,"69":3,"73":1,"78":5,"80":5,"83":6,"85":6,"93":1,"94":1,"101":3,"106":3,"109":1,"120":3,"123":3,"126":3,"132":9,"135":9,"159":3,"166":3,"172":1}}],["loading",{"2":{"3":1,"8":1,"17":1,"22":1,"26":1,"28":1,"33":1,"39":1,"51":1,"57":1,"100":1,"105":1,"108":1,"117":1,"119":1,"125":1,"131":1,"134":1,"138":1,"153":1,"158":1,"162":1,"165":1,"168":1,"171":1}}],["order",{"2":{"159":1,"163":7,"166":11,"172":5}}],["orderservice",{"2":{"2":1,"4":1,"5":1,"6":1,"9":1,"10":1,"172":1}}],["ood",{"2":{"154":1}}],["oopは構造",{"2":{"89":1}}],["oopの拡張例",{"0":{"82":1}}],["oopの例",{"2":{"77":1,"93":1}}],["oopでは継承の安全性が問われるのに対し",{"2":{"72":1}}],["oopではインターフェースの肥大化を避け",{"2":{"71":1}}],["oopではインターフェースの分割と実装によって",{"2":{"68":1}}],["oopではインターフェースと依存性注入",{"2":{"64":1}}],["oop",{"2":{"67":1,"71":1,"75":1,"86":1,"87":1,"92":1,"95":1}}],["oopにおけるsrpの実装例",{"0":{"93":1}}],["oopにおける実践",{"2":{"88":1}}],["oopにおけるocpの実装例",{"0":{"77":1},"1":{"78":1}}],["oopにおけるlspの実装例",{"0":{"73":1}}],["oopにおけるispの実装例",{"0":{"69":1}}],["oopにおけるdipの典型例",{"0":{"65":1}}],["oopにおける原則",{"2":{"61":1}}],["oopと関数型における設計原則のまとめ",{"0":{"87":1},"1":{"88":1,"89":1,"90":1,"91":1}}],["oopと関数型の比較",{"0":{"60":1},"1":{"61":1,"62":1,"63":1}}],["oopとfpは対立するものではなく",{"2":{"91":1}}],["oopとfpそれぞれにおけるocpの捉え方と実装スタイルを比較します",{"2":{"76":1}}],["oopとfpの両方に関心があるソフトウェア開発者",{"2":{"63":1}}],["of",{"2":{"154":1}}],["o",{"2":{"147":1}}],["one",{"2":{"115":1}}],["only",{"2":{"115":1}}],["open",{"0":{"96":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1},"2":{"76":1}}],["ostrich",{"2":{"74":4}}],["oldheight",{"2":{"47":1}}],["ok",{"2":{"45":1,"73":1}}],["ocpの適用が容易になる",{"2":{"111":1}}],["ocpの達成方法",{"2":{"86":1}}],["ocpにおける比較まとめ",{"0":{"86":1}}],["ocpにおけるoopとfpの比較",{"2":{"62":1}}],["ocp",{"0":{"76":1,"143":1,"164":1},"1":{"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"165":1,"166":1},"2":{"12":1,"62":1,"76":1,"87":1,"88":1,"103":1,"107":1,"140":1,"173":1}}],["software",{"2":{"154":2}}],["solid",{"2":{"154":2}}],["solidなコードのメリット",{"0":{"151":1}}],["solid原則に準拠したリファクタリング",{"0":{"160":1},"1":{"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1}}],["solid原則に代表されるオブジェクト指向設計と",{"2":{"60":1}}],["solid原則ケーススタディ",{"0":{"155":1},"1":{"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1}}],["solid原則の関連性",{"0":{"153":1}}],["solid原則間の関連性",{"0":{"152":1},"1":{"153":1}}],["solid原則は",{"2":{"147":1,"148":1}}],["solid原則とは",{"0":{"147":1},"1":{"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1}}],["solid原則",{"0":{"141":1},"1":{"142":1,"143":1,"144":1,"145":1,"146":1}}],["solid原則を適用することで",{"2":{"149":1}}],["solid原則を適用するメリット",{"0":{"149":1},"1":{"150":1,"151":1}}],["solid原則を関数型でどう適用できるか知りたい人",{"2":{"63":1}}],["solid原則を具体例と共に解説し",{"2":{"11":1}}],["solidの原則とは",{"2":{"11":1}}],["switch文など",{"2":{"140":1,"143":1}}],["saveable",{"2":{"139":1}}],["saver",{"2":{"128":2,"136":2}}],["save",{"2":{"126":1,"128":1,"132":1,"135":1,"136":1,"139":1}}],["savetofile",{"2":{"120":1,"121":1,"123":1}}],["savetodatabase",{"2":{"117":1}}],["should",{"2":{"115":1}}],["shapes",{"2":{"77":2,"78":3,"79":2,"80":3,"83":3,"85":3}}],["shape",{"2":{"58":5,"77":7,"78":3,"79":7,"80":5,"82":1,"83":3,"84":2,"85":5}}],["smsnotifier",{"2":{"106":1,"109":1}}],["sms",{"2":{"101":1}}],["s",{"2":{"79":7,"84":8,"147":1,"154":1}}],["single",{"0":{"113":1},"1":{"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1},"2":{"92":1,"114":1}}],["side",{"2":{"77":3,"79":2,"80":1,"84":2,"85":1}}],["simpleprinter",{"2":{"18":1,"19":1,"20":1,"23":1,"69":1}}],["structure",{"2":{"154":1}}],["stringify",{"2":{"93":1,"94":1}}],["string",{"2":{"65":2,"66":1,"74":2,"77":1,"93":2,"94":2,"101":2,"106":5,"109":1,"120":2,"123":2,"126":2,"132":1,"135":2,"159":1,"163":1}}],["started",{"2":{"65":1,"66":1}}],["squrare",{"2":{"52":2,"54":1}}],["square",{"2":{"35":1,"38":2,"54":2,"58":5,"77":2,"78":2,"79":2,"80":2,"83":2,"84":2,"85":2}}],["sum",{"2":{"77":2,"79":2}}],["super",{"2":{"48":2,"52":4}}],["substitution",{"0":{"24":1},"1":{"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1},"2":{"72":1}}],["sendconfirmationemail",{"2":{"159":1,"163":1,"172":1}}],["sender",{"2":{"128":2,"136":2}}],["sendemail",{"2":{"117":1,"120":1,"121":1,"123":1}}],["send",{"2":{"106":5,"109":1,"126":1,"128":1,"132":1,"135":1,"136":1,"139":1}}],["service",{"2":{"103":3,"109":2}}],["setlength",{"2":{"58":2}}],["sethight",{"2":{"48":1}}],["setheight",{"2":{"37":1,"52":5,"58":2}}],["setwidth",{"2":{"37":1,"48":1,"52":5,"58":2}}],["segregation",{"0":{"14":1},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"2":{"68":1}}],["sparrow",{"2":{"29":1,"34":1,"73":4}}],["scanning",{"2":{"69":1}}],["scanner",{"2":{"23":2,"69":2}}],["scan",{"2":{"18":3,"20":1,"23":2,"69":2,"70":4}}],["srp違反",{"2":{"117":1}}],["srp違反の構造",{"0":{"117":1},"1":{"119":1,"120":1}}],["srpにおける比較まとめ",{"0":{"95":1}}],["srpにおけるoopとfpの比較",{"2":{"62":1}}],["srp",{"0":{"92":1,"142":1,"161":1},"1":{"93":1,"94":1,"95":1,"162":1,"163":1},"2":{"12":1,"62":1,"87":1,"88":1,"92":1,"129":1,"140":1,"173":1}}],["単一のインターフェース",{"2":{"139":1}}],["単一の責任を持つべき",{"2":{"114":1}}],["単一責任",{"2":{"140":1}}],["単一責任に違反している例",{"0":{"118":1},"1":{"119":1,"120":1,"121":1}}],["単一責任の原則を守ることで",{"2":{"152":1}}],["単一責任の原則に違反しています",{"2":{"121":1}}],["単一責任の原則にも違反している",{"2":{"102":1}}],["単一責任の原則は",{"2":{"115":1,"122":1}}],["単一責任の原則とは",{"0":{"114":1}}],["単一責任の原則",{"0":{"92":1,"113":1,"142":1,"161":1},"1":{"93":1,"94":1,"95":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"162":1,"163":1},"2":{"12":1,"62":1,"88":1,"92":1,"111":1,"114":1,"129":1,"147":1}}],["単位",{"2":{"95":1}}],["単体テスト時に支払い部分を差し替えられない",{"2":{"5":1}}],["👍",{"0":{"151":1}}],["👎",{"0":{"150":1}}],["👈",{"2":{"31":1,"38":1,"45":2,"47":1,"48":1,"54":1,"83":1}}],["🛠",{"0":{"13":1}}],["🔎",{"0":{"12":1,"117":1},"1":{"119":1,"120":1}}],["📘solidの原則",{"0":{"11":1},"1":{"12":1,"13":1}}],["実はいくつかの表現方法があります",{"2":{"114":1}}],["実務で役立つヒント",{"0":{"110":1}}],["実行例",{"0":{"128":1,"136":1}}],["実行結果",{"0":{"53":1,"55":1,"59":1}}],["実行時に現れる",{"2":{"75":1}}],["実行時にエラー",{"2":{"20":1}}],["実行時エラーの原因となり",{"2":{"20":1}}],["実際には両者を併用するミックススタイルが現代的であり",{"2":{"90":1}}],["実際には",{"2":{"31":1}}],["実装に依存せず",{"2":{"147":1}}],["実装ではなく抽象",{"2":{"140":1,"146":1}}],["実装ではなく抽象に依存しているか",{"2":{"140":1,"146":1}}],["実装上の理由で変更を要求する人々",{"2":{"116":1}}],["実装",{"2":{"86":1}}],["実装方法",{"2":{"71":1}}],["実装クラスが必要なものを選択",{"2":{"71":1}}],["実装クラスの追加で対応",{"2":{"67":1}}],["実装クラスに関係ないメソッドがあったしても実装しなければいけない",{"2":{"15":1}}],["実装例を比較したい技術者や学生",{"2":{"63":1}}],["実装の詳細が",{"2":{"1":1}}],["実践的な理解を促すことを目的としています",{"2":{"11":1}}],["は1種類に限定されているか",{"2":{"140":1,"142":1}}],["は次のように述べています",{"2":{"115":1}}],["は実装しない",{"2":{"34":1,"73":1}}],["は実装の詳細に依存してはならない",{"2":{"1":1}}],["は鳥ではあるが",{"2":{"30":1}}],["はスキャンもfaxもできないのに",{"2":{"19":1}}],["は",{"2":{"10":1,"64":1,"65":1,"66":1,"68":1,"72":1,"76":1,"92":1,"114":2}}],["✅実装チェックリスト",{"2":{"12":1}}],["✅",{"0":{"10":1,"107":1,"133":1,"141":1,"161":1,"164":1,"167":1,"170":1,"173":1},"1":{"108":1,"109":1,"134":1,"135":1,"136":1,"138":1,"139":1,"142":1,"143":1,"144":1,"145":1,"146":1,"162":1,"163":1,"165":1,"166":1,"168":1,"169":1,"171":1,"172":1},"2":{"73":1,"147":1}}],["items",{"2":{"159":1,"163":1}}],["if文",{"2":{"140":1,"143":1}}],["if",{"2":{"101":3,"159":2}}],["id",{"2":{"93":1,"94":1}}],["i",{"2":{"74":1,"147":1}}],["isbird",{"2":{"74":2}}],["is",{"2":{"25":1,"74":1}}],["ispにおけるoopとfpの比較",{"2":{"62":1}}],["isp",{"0":{"68":1,"145":1,"167":1},"1":{"69":1,"70":1,"71":1,"168":1,"169":1},"2":{"12":1,"62":1,"68":1,"87":1,"88":1,"139":1,"140":1,"173":1}}],["index",{"2":{"54":1}}],["instanceof",{"2":{"35":1}}],["interface",{"0":{"14":1},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"2":{"23":2,"68":1,"69":1,"77":1,"139":2}}],["inversion",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"64":1}}],["implements",{"2":{"9":2,"18":2,"23":2,"34":1,"58":1,"65":1,"69":2,"73":1,"77":2,"82":1,"106":3,"109":1,"166":3,"169":2}}],["解決策",{"0":{"7":1,"21":1,"32":1,"56":1,"104":1,"124":1},"1":{"8":1,"9":1,"10":1,"22":1,"23":1,"33":1,"34":1,"57":1,"58":1,"59":1,"105":1,"106":1,"107":1,"108":1,"109":1,"125":1,"126":1}}],["側で直接paypalpaymentに書き換える必要がある",{"2":{"6":1}}],["問題点",{"0":{"5":1,"19":1,"30":1,"102":1,"121":1},"1":{"8":1,"9":1,"22":1,"23":1,"33":1,"34":1,"37":1,"38":1,"105":1,"106":1,"125":1,"126":1}}],["❌",{"0":{"5":1,"19":1,"30":1,"102":1,"130":1},"1":{"8":1,"9":1,"22":1,"23":1,"33":1,"34":1,"37":1,"38":1,"105":1,"106":1,"131":1,"132":1},"2":{"73":1}}],["t",{"2":{"129":1}}],["txt`",{"2":{"120":1,"123":1,"126":1,"132":1,"135":1}}],["title",{"2":{"120":4,"123":4,"126":4,"132":3,"135":4}}],["triangle",{"2":{"82":2,"83":2,"84":2,"85":2}}],["typescriptで学ぶsolid原則",{"2":{"154":1}}],["typescriptでは",{"2":{"137":1}}],["typescript",{"0":{"137":1},"1":{"138":1,"139":1},"2":{"154":1}}],["type",{"2":{"70":1,"74":2,"79":1,"101":4}}],["tyepscriptコード例",{"0":{"49":1},"1":{"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1}}],["to=$",{"2":{"123":1}}],["to",{"2":{"115":1,"154":2}}],["totalprice",{"2":{"159":2,"163":1,"172":1}}],["totalarea",{"2":{"77":2,"78":1,"79":1,"80":1,"83":1,"85":1}}],["total",{"2":{"55":1,"78":2,"80":2,"83":2,"85":2}}],["tobe",{"2":{"38":2,"54":2}}],["testlogger",{"2":{"66":1}}],["testsuites",{"2":{"55":1}}],["test",{"2":{"38":3,"54":3}}],["the",{"2":{"154":1}}],["throwなど",{"2":{"140":1,"144":1}}],["throw",{"2":{"18":2}}],["this",{"2":{"4":1,"9":1,"47":3,"48":1,"52":4,"58":7,"65":1,"77":4,"82":2,"106":1,"120":4,"123":5,"132":3,"135":3,"159":1,"166":1,"172":3}}],["tstype",{"2":{"66":1,"70":1,"74":1,"84":1}}],["ts",{"2":{"52":1,"77":1,"79":1,"82":1,"93":1,"94":1,"123":1}}],["tssetwidth",{"2":{"47":1,"48":1}}],["tsmethoda",{"2":{"44":1,"45":1}}],["tsdescribe",{"2":{"38":1}}],["tsexport",{"2":{"37":1}}],["tsimport",{"2":{"54":1}}],["tsif",{"2":{"35":1}}],["tsinterface",{"2":{"9":1,"18":1,"23":1,"34":1,"58":1,"65":1,"69":1,"73":1,"106":1,"139":1,"166":1,"169":1}}],["tsfunction",{"2":{"31":1,"73":1}}],["tsconst",{"2":{"20":1,"66":1,"78":1,"80":1,"83":1,"85":1,"103":1,"128":1,"136":1}}],["tsclass",{"2":{"4":1,"6":1,"29":1,"101":1,"109":1,"117":1,"120":1,"126":1,"132":1,"135":1,"159":1,"163":1,"172":1}}],["n本文",{"2":{"123":1}}],["n$",{"2":{"120":1,"123":2,"126":1}}],["note",{"2":{"114":1}}],["notifiers",{"2":{"106":2}}],["notifier",{"2":{"106":7,"109":1}}],["notificationserviceの中身を書き換える必要がある",{"2":{"102":1}}],["notificationservice",{"2":{"101":1,"103":1,"106":1,"109":1}}],["notifyall",{"2":{"106":1,"109":1}}],["notify",{"2":{"101":1,"103":2}}],["ng",{"2":{"45":1,"48":1}}],["nubmer",{"2":{"44":1,"45":1,"47":1,"48":1}}],["number>",{"2":{"79":1,"84":1}}],["number",{"2":{"4":2,"6":1,"9":4,"37":3,"52":8,"58":9,"77":6,"79":4,"82":3,"84":4,"169":6}}],["new",{"2":{"4":1,"18":2,"20":1,"31":1,"38":2,"52":2,"54":2,"58":2,"65":2,"73":2,"78":2,"83":3,"93":2,"103":1,"109":4,"128":4,"136":5}}],["=1人のアクター",{"2":{"114":1}}],["===",{"2":{"47":2,"48":1,"74":1,"101":3,"159":2}}],["=>",{"2":{"37":1,"38":3,"52":2,"54":3,"58":2,"66":4,"70":4,"74":3,"77":1,"78":1,"79":6,"80":1,"83":1,"84":4,"85":1,"94":2,"106":1}}],["=",{"2":{"4":1,"20":1,"25":1,"31":1,"37":1,"38":2,"47":1,"52":6,"54":2,"58":10,"65":1,"66":4,"70":4,"73":2,"74":5,"77":2,"78":1,"79":4,"80":1,"82":1,"83":1,"84":2,"85":1,"93":4,"94":4,"103":1,"109":1,"123":2,"128":4,"136":5,"159":3,"163":3,"172":1}}],["`ポイント付与",{"2":{"172":1}}],["`送信",{"2":{"132":1,"135":1}}],["`保存",{"2":{"132":1,"135":1}}],["`新メール仕様で送信",{"2":{"123":1}}],["`件名",{"2":{"123":1}}],["`ファイル保存",{"2":{"120":1,"123":1,"126":1}}],["`印刷",{"2":{"120":1,"123":1,"126":1,"132":1,"135":1}}],["`fax送信",{"2":{"109":1}}],["`プッシュ通知",{"2":{"101":1,"106":1}}],["`sms送信",{"2":{"101":1,"106":1}}],["`メール送信",{"2":{"101":1,"106":1,"120":1,"126":1}}],["`report",{"2":{"93":1,"94":1}}],["`$",{"2":{"80":1,"85":1}}],["`paypalで$",{"2":{"6":1,"9":1}}],["`",{"2":{"4":1,"6":1,"9":2,"80":1,"85":1,"93":1,"94":1,"101":3,"106":3,"109":1,"120":2,"123":3,"126":2,"132":4,"135":4}}],["`クレジットカードで$",{"2":{"4":1,"9":1}}],["円支払いました",{"2":{"4":1,"6":1,"9":2}}],["craftsman",{"2":{"154":1}}],["credit",{"2":{"159":1}}],["creditcardpayment",{"2":{"2":1,"4":2,"5":1,"9":1,"166":1}}],["createsimpleprinter",{"2":{"70":1}}],["createmultifunctionprinter",{"2":{"70":1}}],["completeorder",{"2":{"172":1}}],["com",{"2":{"123":1}}],["content",{"2":{"93":1,"94":1,"120":2,"123":3,"126":2}}],["const",{"2":{"31":1,"37":1,"38":2,"52":2,"54":2,"58":4,"65":1,"66":2,"70":2,"73":2,"74":2,"79":3,"84":1,"93":4,"94":4,"109":1,"123":2,"128":3,"136":4,"172":1}}],["constructor",{"2":{"9":1,"58":2,"65":1,"77":2,"82":1,"106":1,"120":1,"123":1,"126":1,"135":4,"166":1,"172":1}}],["consolelogger",{"2":{"65":3,"66":2}}],["console",{"2":{"4":1,"6":1,"9":2,"18":4,"23":4,"29":1,"34":1,"52":2,"58":1,"65":1,"66":1,"69":3,"73":1,"78":2,"80":2,"83":2,"85":2,"93":1,"94":1,"101":3,"106":3,"109":1,"120":3,"123":3,"126":3,"132":4,"135":4,"159":3,"166":3,"172":1}}],["change",{"2":{"115":1}}],["c",{"2":{"114":1,"115":1,"147":1,"154":3}}],["calculatepoints",{"2":{"159":1,"163":1,"169":3,"172":1}}],["caution",{"2":{"114":1}}],["cannot",{"2":{"74":1}}],["circle",{"2":{"77":2,"78":2,"79":2,"80":2,"83":2,"84":2,"85":2}}],["clean",{"2":{"154":1}}],["closed",{"0":{"96":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1},"2":{"76":1}}],["class",{"2":{"4":1,"9":3,"18":2,"23":2,"29":2,"34":3,"52":2,"58":2,"65":2,"69":2,"73":3,"77":2,"82":1,"93":2,"106":4,"115":1,"123":1,"126":3,"135":4,"163":3,"166":4,"169":2}}],["void",{"2":{"4":2,"6":1,"9":4,"18":3,"23":3,"29":1,"34":2,"65":2,"66":1,"69":5,"70":2,"73":3,"93":1,"94":1,"106":4,"109":1,"139":3,"166":4}}],["pt`",{"2":{"172":1}}],["points",{"2":{"172":2}}],["pointscalculator",{"2":{"163":1,"169":3,"172":3}}],["patterns",{"2":{"154":1}}],["paypal処理",{"2":{"166":1}}],["paypalpayment",{"2":{"6":1,"9":1,"166":1}}],["paymentprocessor",{"2":{"163":1,"166":1,"172":3}}],["paymenttype",{"2":{"159":3,"163":1}}],["paymentmethod",{"2":{"9":4,"10":1,"166":7}}],["payment",{"2":{"4":2,"9":2}}],["pay",{"2":{"4":2,"6":1,"9":4}}],["public",{"2":{"126":2,"135":1}}],["pushnotifier",{"2":{"106":1}}],["push",{"2":{"66":1,"101":1}}],["pi",{"2":{"77":1,"79":1,"84":1}}],["penguin",{"2":{"27":1,"29":1,"30":2,"31":4,"34":1,"73":4}}],["premiumcustomerpoints",{"2":{"169":1}}],["process",{"2":{"166":5}}],["processpayment",{"2":{"159":1,"163":1,"166":1,"172":1}}],["processorder",{"2":{"4":1,"9":1}}],["practices",{"2":{"154":1}}],["printable",{"2":{"139":1}}],["printreport",{"2":{"94":2}}],["printing",{"2":{"69":2}}],["printer",{"2":{"20":2,"23":3,"69":3,"93":2,"126":1,"128":3,"135":1,"136":3}}],["print",{"2":{"18":3,"23":3,"69":3,"70":7,"93":2,"120":1,"121":1,"123":1,"126":1,"128":1,"132":1,"135":1,"136":1,"139":1}}],["principles",{"2":{"154":3}}],["principle",{"0":{"0":1,"14":1,"24":1,"96":1,"113":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1},"2":{"64":1,"68":1,"72":1,"76":1,"92":1,"114":1}}],["private",{"2":{"4":1,"9":1,"58":3,"65":1,"77":2,"82":2,"106":1,"120":2,"123":2,"132":1,"135":3,"166":1,"172":3}}],["に特化しているか",{"2":{"140":1,"145":1}}],["にもつながります",{"2":{"139":1}}],["にも影響する",{"2":{"123":1}}],["にも関係します",{"2":{"122":1}}],["によって提唱された概念ですが",{"2":{"114":1}}],["により",{"2":{"74":1}}],["に対してのみ責任を持つ",{"2":{"114":1}}],["に対して責任を持つべき",{"2":{"114":1,"147":1}}],["に対して責任を持つべきという原則です",{"2":{"114":1}}],["に違反している状態",{"2":{"103":1}}],["におけるsrpの捉え方と実装方法を比較します",{"2":{"92":1}}],["における設計原則",{"2":{"87":1}}],["におけるoopとfpの比較",{"0":{"68":1,"72":1,"76":1,"92":1},"1":{"69":1,"70":1,"71":1,"73":1,"74":1,"75":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"93":1,"94":1,"95":1}}],["における関数型の応用",{"0":{"64":1},"1":{"65":1,"66":1,"67":1}}],["に直接依存していません",{"2":{"65":1}}],["に直接依存している場合を考えます",{"2":{"2":1}}],["に依存しているか",{"2":{"140":1,"146":1}}],["に依存できるようになります",{"2":{"23":1}}],["に依存すべきである",{"2":{"1":1}}],["に依存すべき",{"2":{"1":1}}],["に強く依存しており",{"2":{"5":1}}],["が他の処理",{"2":{"123":1}}],["がsrpの応用となります",{"2":{"94":1}}],["が",{"2":{"2":1,"5":1,"31":1,"114":1}}],["抽象クラス",{"2":{"140":1,"146":1}}],["抽象の乱用",{"2":{"86":1}}],["抽象化手段",{"2":{"75":1}}],["抽象化の単位",{"2":{"67":1}}],["抽象と具象のバランス",{"2":{"67":1}}],["抽象に依存することで",{"2":{"111":1}}],["抽象に依存する",{"0":{"7":1},"1":{"8":1,"9":1,"10":1}}],["抽象",{"2":{"1":3,"110":1,"140":1,"143":1}}]],"serializationVersion":2}';export{i as default};
