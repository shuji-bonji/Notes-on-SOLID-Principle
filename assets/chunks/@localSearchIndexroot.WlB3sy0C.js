const i='{"documentCount":175,"nextId":175,"documentIds":{"0":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則-dependency-inversion-principle","1":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則とは","2":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#依存性逆転の原則に違反している例","3":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図","4":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード","5":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#❌-問題点","6":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#原則に違反するとどうなるか","7":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#解決策-抽象に依存する","8":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#クラス図-1","9":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#コード-1","10":"/Notes-on-SOLID-Principle/dependency-inversion-principle.html#✅-利点","11":"/Notes-on-SOLID-Principle/#📘solidの原則","12":"/Notes-on-SOLID-Principle/#🔎-各原則の一覧","13":"/Notes-on-SOLID-Principle/#🛠-ケーススタディ","14":"/Notes-on-SOLID-Principle/#oopと関数型の比較","15":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則-interface-segregation-principle","16":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則とは","17":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#インターフェース分離の原則に違反した例","18":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図","19":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード","20":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#❌-問題点","21":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#原則に違反するとどうなるか","22":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#解決策-機能ごとにインターフェースを分割する","23":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#クラス図-1","24":"/Notes-on-SOLID-Principle/interface-segregation-principle.html#コード-1","25":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則-liskov-substitution-principle","26":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則とは","27":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図","28":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反した例","29":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-1","30":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード","31":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#❌-問題点","32":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#原則に違反するとどうなるか","33":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策-共通の動作に着目したインターフェースを使う","34":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-2","35":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-1","36":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#リスコフの置換原則に違反するとどうなるか","37":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#振る舞いの変更に気付くには","38":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-2","39":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#テストコード","40":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#補足-契約による設計","41":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件とは","42":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件とは","43":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#契約による設計においての、サブタイプの事前条件と事後条件","44":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事前条件はスーパータイプと同じかそれより弱い条件","45":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ","46":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ","47":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#事後条件はスーパータイプと同じかそれより強い条件","48":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#スーパータイプ-1","49":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#サブタイプ-1","50":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#tyepscriptコード例","51":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-3","52":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#違反例","53":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-3","54":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果","55":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#ユニットテスト","56":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-1","57":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#解決策","58":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#クラス図-4","59":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#コード-4","60":"/Notes-on-SOLID-Principle/liskov-substitution-principle.html#実行結果-2","61":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#依存性逆転の原則-dip-におけるoopとfpの比較","62":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#oopにおけるdipの典型例","63":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#関数型におけるdipの応用","64":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/dip-oop-vs-fp.html#比較まとめ","65":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#oopと関数型の比較","66":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#対比の目的","67":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#今後の内容予定","68":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/#想定読者","69":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#インターフェース分離の原則-isp-におけるoopとfpの比較","70":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#oopにおけるispの実装例","71":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#fpにおけるispの実装例","72":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/isp-oop-vs-fp.html#比較まとめ","73":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#リスコフの置換原則-lsp-におけるoopとfpの比較","74":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#oopにおけるlspの実装例","75":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#fpにおけるlspの実装例","76":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/lsp-oop-vs-fp.html#比較まとめ","77":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#開放-閉鎖原則-ocp-におけるoopとfpの比較","78":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopにおけるocpの実装例","79":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例","80":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpにおけるocpの実装例","81":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-1","82":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#拡張例-新しい図形の追加","83":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#oopの拡張例","84":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-2","85":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#fpの拡張例","86":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#利用例-3","87":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/ocp-oop-vs-fp.html#ocpにおける比較まとめ","88":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#単一責任の原則-srp-におけるoopとfpの比較","89":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#oopにおけるsrpの実装例","90":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#fpにおけるsrpの実装例","91":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/srp-oop-vs-fp.html#srpにおける比較まとめ","92":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#oopと関数型における設計原則のまとめ","93":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#各原則の適用比較","94":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#共通点と違い","95":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#どちらを選ぶべきか","96":"/Notes-on-SOLID-Principle/object-oriented-vs-functional/summary.html#最後に","97":"/Notes-on-SOLID-Principle/open-closed-principle.html#オープンクローズドの原則-open-closed-principle","98":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則の要点","99":"/Notes-on-SOLID-Principle/open-closed-principle.html#この原則が解決する問題","100":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則に違反した例","101":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図","102":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード","103":"/Notes-on-SOLID-Principle/open-closed-principle.html#❌-問題点-原則に違反","104":"/Notes-on-SOLID-Principle/open-closed-principle.html#原則違反のリスク","105":"/Notes-on-SOLID-Principle/open-closed-principle.html#解決策-通知手段を拡張できる設計にする","106":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-1","107":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-1","108":"/Notes-on-SOLID-Principle/open-closed-principle.html#✅-利点","109":"/Notes-on-SOLID-Principle/open-closed-principle.html#クラス図-2","110":"/Notes-on-SOLID-Principle/open-closed-principle.html#コード-2","111":"/Notes-on-SOLID-Principle/open-closed-principle.html#実務で役立つヒント","112":"/Notes-on-SOLID-Principle/open-closed-principle.html#他のsolid原則との関連","113":"/Notes-on-SOLID-Principle/open-closed-principle.html#まとめ","114":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則ケーススタディ-ecサイト機能拡張","115":"/Notes-on-SOLID-Principle/practical-case-studies.html#シナリオ","116":"/Notes-on-SOLID-Principle/practical-case-studies.html#非solidなコード-before","117":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図","118":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード","119":"/Notes-on-SOLID-Principle/practical-case-studies.html#solid原則に準拠したリファクタリング-after","120":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-単一責任の原則-srp","121":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-1","122":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-1","123":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-オープンクローズド原則-ocp-リスコフの置換原則-lsp","124":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-2","125":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-2","126":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-インターフェース分離の原則-isp","127":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-3","128":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-3","129":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-依存性逆転の原則-dip","130":"/Notes-on-SOLID-Principle/practical-case-studies.html#クラス図-4","131":"/Notes-on-SOLID-Principle/practical-case-studies.html#コード-4","132":"/Notes-on-SOLID-Principle/practical-case-studies.html#✅-この設計の利点","133":"/Notes-on-SOLID-Principle/relevance-of-solid-principles.html#solid原則間の関連性","134":"/Notes-on-SOLID-Principle/relevance-of-solid-principles.html#solid原則の関連図","135":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則-single-responsibility-principle","136":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任の原則とは","137":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#なぜ「アクター」の観点が重要か","138":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#アクターとは","139":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#🔎-例-srp違反の構造","140":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#単一責任に違反している例","141":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図","142":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード","143":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#問題点","144":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#状態-フィールド-も責任に含まれる","145":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#原則に違反するとどうなるか","146":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#解決策-責任を分離する","147":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-1","148":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-1","149":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#責任の分離の判断基準-リファクタリング時の指針","150":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例","151":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-dry原則との関係","152":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#❌-よくある誤解","153":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-2","154":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-2","155":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#✅-正しい構成例-責任の分離","156":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-3","157":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-3","158":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#実行例-1","159":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#補足-インターフェースを使った責任の分離-typescript","160":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#クラス図-4","161":"/Notes-on-SOLID-Principle/single-responsibility-principle.html#コード-4","162":"/Notes-on-SOLID-Principle/solid-checklist.html#各原則のチェックリスト-基本-詳細","163":"/Notes-on-SOLID-Principle/solid-checklist.text.html#✅-solid原則-チェックリスト","164":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-単一責任の原則-srp","165":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-オープンクローズドの原則-ocp","166":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-リスコフの置換原則-lsp","167":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-インターフェース分離の原則-isp","168":"/Notes-on-SOLID-Principle/solid-checklist.text.html#☑︎-依存性逆転の原則-dip","169":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則とは","170":"/Notes-on-SOLID-Principle/solid-principles.html#なぜsolidが必要なのか","171":"/Notes-on-SOLID-Principle/solid-principles.html#solid原則を適用するメリット","172":"/Notes-on-SOLID-Principle/solid-principles.html#👎-非solidなコードの問題点","173":"/Notes-on-SOLID-Principle/solid-principles.html#👍-solidなコードのメリット","174":"/Notes-on-SOLID-Principle/solid-principles.html#学習を深めるためのリソース"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[5,1,1],"1":[1,5,8],"2":[1,5,6],"3":[1,5,2],"4":[1,5,20],"5":[2,5,7],"6":[1,5,14],"7":[2,5,1],"8":[1,8,2],"9":[1,8,23],"10":[2,6,9],"11":[1,1,5],"12":[2,1,14],"13":[2,1,2],"14":[1,1,15],"15":[5,1,1],"16":[1,5,8],"17":[1,5,11],"18":[1,5,2],"19":[1,5,21],"20":[2,5,9],"21":[1,5,13],"22":[2,5,1],"23":[1,8,2],"24":[1,8,26],"25":[5,1,1],"26":[1,5,10],"27":[1,5,2],"28":[1,5,10],"29":[1,5,2],"30":[1,5,12],"31":[2,5,14],"32":[1,5,20],"33":[2,5,10],"34":[1,8,2],"35":[1,8,22],"36":[1,5,11],"37":[1,5,2],"38":[1,7,15],"39":[1,7,21],"40":[2,5,4],"41":[1,6,4],"42":[1,6,4],"43":[2,6,3],"44":[1,6,1],"45":[1,7,7],"46":[1,7,14],"47":[1,6,1],"48":[1,7,13],"49":[1,7,15],"50":[1,5,1],"51":[1,6,1],"52":[1,5,2],"53":[1,6,30],"54":[1,7,5],"55":[1,6,25],"56":[1,7,5],"57":[1,5,1],"58":[1,6,2],"59":[1,6,33],"60":[1,7,3],"61":[3,1,15],"62":[1,3,28],"63":[1,3,29],"64":[1,3,22],"65":[1,1,8],"66":[1,1,7],"67":[1,1,21],"68":[1,1,6],"69":[3,1,14],"70":[1,3,19],"71":[1,3,19],"72":[1,3,23],"73":[3,1,11],"74":[1,3,35],"75":[1,3,35],"76":[1,3,21],"77":[4,1,19],"78":[1,4,46],"79":[1,5,31],"80":[1,4,33],"81":[1,5,27],"82":[2,4,1],"83":[1,6,19],"84":[1,6,35],"85":[1,6,25],"86":[1,6,38],"87":[1,4,21],"88":[3,1,15],"89":[1,3,35],"90":[1,3,32],"91":[1,3,20],"92":[1,1,13],"93":[1,1,28],"94":[1,1,15],"95":[2,1,5],"96":[1,1,6],"97":[5,1,1],"98":[1,5,8],"99":[1,5,5],"100":[1,5,5],"101":[1,5,2],"102":[1,5,20],"103":[4,5,7],"104":[1,5,20],"105":[2,5,4],"106":[1,10,2],"107":[1,10,28],"108":[2,6,12],"109":[1,8,2],"110":[1,8,24],"111":[1,5,13],"112":[1,5,11],"113":[1,5,7],"114":[2,1,1],"115":[1,2,5],"116":[3,2,1],"117":[1,5,2],"118":[1,5,29],"119":[3,2,1],"120":[4,5,1],"121":[1,8,2],"122":[1,8,21],"123":[6,5,1],"124":[1,10,2],"125":[1,10,23],"126":[4,5,1],"127":[1,8,2],"128":[1,8,14],"129":[4,5,1],"130":[1,8,2],"131":[1,8,27],"132":[2,2,12],"133":[1,1,10],"134":[1,1,2],"135":[5,1,1],"136":[1,5,46],"137":[4,5,29],"138":[2,8,39],"139":[3,8,16],"140":[1,5,5],"141":[1,8,2],"142":[1,8,21],"143":[1,5,11],"144":[3,5,21],"145":[1,5,51],"146":[2,5,1],"147":[1,7,2],"148":[1,7,25],"149":[3,5,10],"150":[1,7,19],"151":[2,5,13],"152":[2,6,4],"153":[1,8,2],"154":[1,8,30],"155":[3,6,1],"156":[1,9,2],"157":[1,9,33],"158":[1,9,19],"159":[4,5,4],"160":[1,10,2],"161":[1,10,21],"162":[5,1,58],"163":[3,1,1],"164":[4,3,9],"165":[4,3,12],"166":[4,3,8],"167":[4,3,8],"168":[4,3,11],"169":[1,1,47],"170":[2,1,7],"171":[1,1,3],"172":[2,2,11],"173":[2,2,10],"174":[1,1,32]},"averageFieldLength":[1.6342857142857137,4.771428571428571,13.177142857142854],"storedFields":{"0":{"title":"依存性逆転の原則 (Dependency Inversion Principle)","titles":[]},"1":{"title":"依存性逆転の原則とは","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"2":{"title":"依存性逆転の原則に違反している例","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"3":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"4":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"5":{"title":"❌ 問題点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","依存性逆転の原則に違反している例"]},"6":{"title":"原則に違反するとどうなるか","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"7":{"title":"解決策：抽象に依存する","titles":["依存性逆転の原則 (Dependency Inversion Principle)"]},"8":{"title":"クラス図","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"9":{"title":"コード","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する","❌ 問題点"]},"10":{"title":"✅ 利点","titles":["依存性逆転の原則 (Dependency Inversion Principle)","解決策：抽象に依存する"]},"11":{"title":"📘SOLIDの原則","titles":[]},"12":{"title":"🔎 各原則の一覧","titles":["📘SOLIDの原則"]},"13":{"title":"🛠 ケーススタディ","titles":["📘SOLIDの原則"]},"14":{"title":"OOPと関数型の比較","titles":["📘SOLIDの原則"]},"15":{"title":"インターフェース分離の原則 (Interface Segregation Principle)","titles":[]},"16":{"title":"インターフェース分離の原則とは","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"17":{"title":"インターフェース分離の原則に違反した例","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"18":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"19":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"20":{"title":"❌ 問題点","titles":["インターフェース分離の原則 (Interface Segregation Principle)","インターフェース分離の原則に違反した例"]},"21":{"title":"原則に違反するとどうなるか","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"22":{"title":"解決策：機能ごとにインターフェースを分割する","titles":["インターフェース分離の原則 (Interface Segregation Principle)"]},"23":{"title":"クラス図","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"24":{"title":"コード","titles":["インターフェース分離の原則 (Interface Segregation Principle)","解決策：機能ごとにインターフェースを分割する","❌ 問題点"]},"25":{"title":"リスコフの置換原則 (Liskov Substitution Principle)","titles":[]},"26":{"title":"リスコフの置換原則とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"27":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則とは"]},"28":{"title":"リスコフの置換原則に違反した例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"29":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"30":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"31":{"title":"❌ 問題点","titles":["リスコフの置換原則 (Liskov Substitution Principle)","リスコフの置換原則に違反した例"]},"32":{"title":"原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"33":{"title":"解決策：共通の動作に着目したインターフェースを使う","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"34":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"35":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","解決策：共通の動作に着目したインターフェースを使う","❌ 問題点"]},"36":{"title":"リスコフの置換原則に違反するとどうなるか","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"37":{"title":"振る舞いの変更に気付くには","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"38":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"39":{"title":"テストコード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","振る舞いの変更に気付くには","❌ 問題点"]},"40":{"title":"補足： 契約による設計","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"41":{"title":"事前条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"42":{"title":"事後条件とは","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"43":{"title":"契約による設計においての、サブタイプの事前条件と事後条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"44":{"title":"事前条件はスーパータイプと同じかそれより弱い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"45":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"46":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事前条件はスーパータイプと同じかそれより弱い条件"]},"47":{"title":"事後条件はスーパータイプと同じかそれより強い条件","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計"]},"48":{"title":"スーパータイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"49":{"title":"サブタイプ","titles":["リスコフの置換原則 (Liskov Substitution Principle)","補足： 契約による設計","事後条件はスーパータイプと同じかそれより強い条件"]},"50":{"title":"TyepScriptコード例","titles":["リスコフの置換原則 (Liskov Substitution Principle)"]},"51":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","事後条件はスーパータイプと同じかそれより強い条件"]},"52":{"title":"違反例","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"53":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"54":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","コード"]},"55":{"title":"ユニットテスト","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例"]},"56":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","違反例","ユニットテスト"]},"57":{"title":"解決策","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例"]},"58":{"title":"クラス図","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"59":{"title":"コード","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策"]},"60":{"title":"実行結果","titles":["リスコフの置換原則 (Liskov Substitution Principle)","TyepScriptコード例","解決策","コード"]},"61":{"title":"依存性逆転の原則（DIP）におけるOOPとFPの比較","titles":[]},"62":{"title":"OOPにおけるDIPの典型例","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"63":{"title":"関数型におけるDIPの応用","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"64":{"title":"比較まとめ","titles":["依存性逆転の原則（DIP）におけるOOPとFPの比較"]},"65":{"title":"OOPと関数型の比較","titles":[]},"66":{"title":"対比の目的","titles":["OOPと関数型の比較"]},"67":{"title":"今後の内容予定","titles":["OOPと関数型の比較"]},"68":{"title":"想定読者","titles":["OOPと関数型の比較"]},"69":{"title":"インターフェース分離の原則（ISP）におけるOOPとFPの比較","titles":[]},"70":{"title":"OOPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"71":{"title":"FPにおけるISPの実装例","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"72":{"title":"比較まとめ","titles":["インターフェース分離の原則（ISP）におけるOOPとFPの比較"]},"73":{"title":"リスコフの置換原則（LSP）におけるOOPとFPの比較","titles":[]},"74":{"title":"OOPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"75":{"title":"FPにおけるLSPの実装例","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"76":{"title":"比較まとめ","titles":["リスコフの置換原則（LSP）におけるOOPとFPの比較"]},"77":{"title":"開放/閉鎖原則（OCP）におけるOOPとFPの比較","titles":[]},"78":{"title":"OOPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"79":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","OOPにおけるOCPの実装例"]},"80":{"title":"FPにおけるOCPの実装例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"81":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","FPにおけるOCPの実装例"]},"82":{"title":"拡張例：新しい図形の追加","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"83":{"title":"OOPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"84":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"85":{"title":"FPの拡張例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"86":{"title":"利用例","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較","拡張例：新しい図形の追加"]},"87":{"title":"OCPにおける比較まとめ","titles":["開放/閉鎖原則（OCP）におけるOOPとFPの比較"]},"88":{"title":"単一責任の原則（SRP）におけるOOPとFPの比較","titles":[]},"89":{"title":"OOPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"90":{"title":"FPにおけるSRPの実装例","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"91":{"title":"SRPにおける比較まとめ","titles":["単一責任の原則（SRP）におけるOOPとFPの比較"]},"92":{"title":"OOPと関数型における設計原則のまとめ","titles":[]},"93":{"title":"各原則の適用比較","titles":["OOPと関数型における設計原則のまとめ"]},"94":{"title":"共通点と違い","titles":["OOPと関数型における設計原則のまとめ"]},"95":{"title":"どちらを選ぶべきか？","titles":["OOPと関数型における設計原則のまとめ"]},"96":{"title":"最後に","titles":["OOPと関数型における設計原則のまとめ"]},"97":{"title":"オープンクローズドの原則 (Open-Closed Principle)","titles":[]},"98":{"title":"この原則の要点","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"99":{"title":"この原則が解決する問題","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"100":{"title":"原則に違反した例","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"101":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"102":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"103":{"title":"❌ 問題点（原則に違反）","titles":["オープンクローズドの原則 (Open-Closed Principle)","原則に違反した例"]},"104":{"title":"原則違反のリスク","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"105":{"title":"解決策：通知手段を拡張できる設計にする","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"106":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"107":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","❌ 問題点（原則に違反）"]},"108":{"title":"✅ 利点","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする"]},"109":{"title":"クラス図","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"110":{"title":"コード","titles":["オープンクローズドの原則 (Open-Closed Principle)","解決策：通知手段を拡張できる設計にする","✅ 利点"]},"111":{"title":"実務で役立つヒント","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"112":{"title":"他のSOLID原則との関連","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"113":{"title":"まとめ","titles":["オープンクローズドの原則 (Open-Closed Principle)"]},"114":{"title":"SOLID原則ケーススタディ：ECサイト機能拡張","titles":[]},"115":{"title":"シナリオ","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"116":{"title":"非SOLIDなコード（Before）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"117":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"118":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","非SOLIDなコード（Before）"]},"119":{"title":"SOLID原則に準拠したリファクタリング（After）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"120":{"title":"✅ 単一責任の原則（SRP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"121":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"122":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 単一責任の原則（SRP）"]},"123":{"title":"✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"124":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"125":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ オープンクローズド原則（OCP）＋リスコフの置換原則（LSP）"]},"126":{"title":"✅ インターフェース分離の原則（ISP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"127":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"128":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ インターフェース分離の原則（ISP）"]},"129":{"title":"✅ 依存性逆転の原則（DIP）","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）"]},"130":{"title":"クラス図","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"131":{"title":"コード","titles":["SOLID原則ケーススタディ：ECサイト機能拡張","SOLID原則に準拠したリファクタリング（After）","✅ 依存性逆転の原則（DIP）"]},"132":{"title":"✅ この設計の利点","titles":["SOLID原則ケーススタディ：ECサイト機能拡張"]},"133":{"title":"SOLID原則間の関連性","titles":[]},"134":{"title":"SOLID原則の関連図","titles":["SOLID原則間の関連性"]},"135":{"title":"単一責任の原則 (Single Responsibility Principle)","titles":[]},"136":{"title":"単一責任の原則とは","titles":["単一責任の原則 (Single Responsibility Principle)"]},"137":{"title":"なぜ「アクター」の観点が重要か？","titles":["単一責任の原則 (Single Responsibility Principle)"]},"138":{"title":"アクターとは？","titles":["単一責任の原則 (Single Responsibility Principle)","なぜ「アクター」の観点が重要か？"]},"139":{"title":"🔎 例：SRP違反の構造","titles":["単一責任の原則 (Single Responsibility Principle)","なぜ「アクター」の観点が重要か？"]},"140":{"title":"単一責任に違反している例","titles":["単一責任の原則 (Single Responsibility Principle)"]},"141":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","🔎 例：SRP違反の構造"]},"142":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例","🔎 例：SRP違反の構造"]},"143":{"title":"問題点","titles":["単一責任の原則 (Single Responsibility Principle)","単一責任に違反している例"]},"144":{"title":"状態（フィールド）も責任に含まれる","titles":["単一責任の原則 (Single Responsibility Principle)"]},"145":{"title":"原則に違反するとどうなるか","titles":["単一責任の原則 (Single Responsibility Principle)"]},"146":{"title":"解決策：責任を分離する","titles":["単一責任の原則 (Single Responsibility Principle)"]},"147":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","問題点"]},"148":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","解決策：責任を分離する","問題点"]},"149":{"title":"責任の分離の判断基準（リファクタリング時の指針）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"150":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","責任の分離の判断基準（リファクタリング時の指針）"]},"151":{"title":"補足：DRY原則との関係","titles":["単一責任の原則 (Single Responsibility Principle)"]},"152":{"title":"❌ よくある誤解","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"153":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"154":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","❌ よくある誤解"]},"155":{"title":"✅ 正しい構成例：責任の分離","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係"]},"156":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"157":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"158":{"title":"実行例","titles":["単一責任の原則 (Single Responsibility Principle)","補足：DRY原則との関係","✅ 正しい構成例：責任の分離"]},"159":{"title":"補足：インターフェースを使った責任の分離（TypeScript）","titles":["単一責任の原則 (Single Responsibility Principle)"]},"160":{"title":"クラス図","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"161":{"title":"コード","titles":["単一責任の原則 (Single Responsibility Principle)","補足：インターフェースを使った責任の分離（TypeScript）","✅ 正しい構成例：責任の分離"]},"162":{"title":"各原則のチェックリスト（基本 + 詳細）","titles":[]},"163":{"title":"✅ SOLID原則 チェックリスト","titles":[]},"164":{"title":"☑︎ 単一責任の原則（SRP）","titles":["✅ SOLID原則 チェックリスト"]},"165":{"title":"☑︎ オープンクローズドの原則（OCP）","titles":["✅ SOLID原則 チェックリスト"]},"166":{"title":"☑︎ リスコフの置換原則（LSP）","titles":["✅ SOLID原則 チェックリスト"]},"167":{"title":"☑︎ インターフェース分離の原則（ISP）","titles":["✅ SOLID原則 チェックリスト"]},"168":{"title":"☑︎ 依存性逆転の原則（DIP）","titles":["✅ SOLID原則 チェックリスト"]},"169":{"title":"SOLID原則とは","titles":[]},"170":{"title":"なぜSOLIDが必要なのか？","titles":["SOLID原則とは"]},"171":{"title":"SOLID原則を適用するメリット","titles":["SOLID原則とは"]},"172":{"title":"👎 非SOLIDなコードの問題点","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"173":{"title":"👍 SOLIDなコードのメリット","titles":["SOLID原則とは","SOLID原則を適用するメリット"]},"174":{"title":"学習を深めるためのリソース","titles":["SOLID原則とは"]}},"dirtCount":0,"index":[["qiita",{"2":{"174":1}}],["guru",{"2":{"174":1}}],["guide",{"2":{"174":1}}],["generator",{"2":{"89":2}}],["generatereport",{"2":{"90":2,"139":1}}],["generate",{"2":{"89":2}}],["getarea",{"2":{"38":1,"39":2,"53":2,"55":2,"59":4}}],["学習を深めるためのリソース",{"0":{"174":1}}],["共有がしやすい",{"2":{"173":1}}],["共通点と違い",{"0":{"94":1}}],["共通のインターフェースを定義し",{"2":{"77":1}}],["共通の鳥の性質",{"2":{"35":1,"74":1}}],["共通の動作に着目したインターフェースを使う",{"0":{"33":1},"1":{"34":1,"35":1}}],["チーム開発での理解",{"2":{"173":1}}],["チェックリスト",{"0":{"163":1},"1":{"164":1,"165":1,"166":1,"167":1,"168":1}}],["予測しやすい",{"2":{"173":1}}],["似たような処理を何度も書いてしまう",{"2":{"172":1}}],["再利用しづらく",{"2":{"172":1}}],["再利用性の高いソフトウェアを構築するための設計指針であり",{"2":{"169":1}}],["全体を理解するのに時間がかかる",{"2":{"172":1}}],["多くの既存コードを変更する必要がある",{"2":{"172":1}}],["多機能プリンタ",{"2":{"17":1}}],["簡単な機能追加のはずなのに",{"2":{"172":1}}],["簡略化された表現",{"2":{"136":1}}],["ちょっとした修正が",{"2":{"172":1}}],["現代のソフトウェア開発では",{"2":{"170":1}}],["結合度を下げる",{"2":{"169":1}}],["安全な拡張が可能になる",{"2":{"169":1}}],["安全に置換できる前提",{"2":{"75":1}}],["得られるメリット",{"2":{"169":1}}],["説明",{"2":{"169":1}}],["頭文字",{"2":{"169":1}}],["良い設計",{"2":{"169":1}}],["☑︎",{"0":{"164":1,"165":1,"166":1,"167":1,"168":1}}],["テキスト版はこちら",{"2":{"162":1}}],["テストがしにくい",{"2":{"172":1}}],["テストしやすいように",{"2":{"162":1,"164":1}}],["テスト対象が多く",{"2":{"145":1}}],["テスト容易",{"2":{"132":1}}],["テスト容易性",{"2":{"64":1,"72":1,"94":1}}],["テスト済みの既存コードに手を加えることになるため",{"2":{"103":1}}],["テスト範囲が広がり",{"2":{"99":1}}],["テストのしやすさ",{"2":{"91":1}}],["テスト性",{"2":{"76":1}}],["テスト用モックや依存注入",{"2":{"91":1}}],["テスト用関数の差し替え",{"2":{"64":1}}],["テスト用のモックロガーなど",{"2":{"62":1}}],["テストに失敗する",{"2":{"39":1,"55":1}}],["テストコード",{"0":{"39":1}}],["テスト時には以下のように差し替えることができます",{"2":{"63":1}}],["テスト時には",{"2":{"10":1}}],["派生クラスは親クラスとして振る舞えるか",{"2":{"162":1,"166":1}}],["派生クラスは基底クラスと置き換えてもプログラムの正しさが保たれるべきである",{"2":{"73":1}}],["基底クラス",{"2":{"162":1,"165":1}}],["基本項目",{"2":{"162":1}}],["基本",{"0":{"162":1}}],["□",{"2":{"162":25}}],["詳細項目",{"2":{"162":1}}],["詳細",{"0":{"162":1}}],["後に学ぶ",{"2":{"161":1}}],["役割ごとの設計がしやすくなります",{"2":{"159":1}}],["月次レポート",{"2":{"158":1}}],["ログ機能を専用クラスとして分離",{"2":{"157":1}}],["ログ出力の責任が印刷",{"2":{"154":1}}],["ログ出力を共通化したつもりが",{"2":{"154":1}}],["ロバート",{"2":{"136":1}}],["送信それぞれの機能に密結合してしまっています",{"2":{"154":1}}],["送信",{"2":{"154":1,"157":1}}],["送信する処理を1つのクラスに詰め込んだ例です",{"2":{"140":1}}],["同じ処理をしているから",{"2":{"152":1}}],["同じコードやロジックを繰り返さない",{"2":{"151":1}}],["yourself",{"2":{"151":1}}],["売上は前年比120",{"2":{"150":1}}],["売上レポート",{"2":{"150":1}}],["挙動にも影響が出る可能性がある",{"2":{"145":1}}],["宛先やフォーマット変更を行いたい",{"2":{"145":1}}],["修正",{"2":{"170":1}}],["修正や拡張がしやすくなる",{"2":{"169":1}}],["修正のリスクが高くなる",{"2":{"145":1}}],["修正に閉じているべき",{"2":{"169":1}}],["修正に閉じていない",{"2":{"104":1}}],["修正に閉じる",{"2":{"113":1}}],["修正に閉じられている",{"2":{"98":2}}],["修正に対して閉じられているべきである",{"2":{"77":1}}],["どの責任に影響があるかを特定するのに時間がかかる",{"2":{"145":1}}],["どちらを選ぶべきか",{"0":{"95":1}}],["どちらも",{"2":{"86":1}}],["どちらもモジュール",{"2":{"1":1}}],["運用やインフラ担当の関心",{"2":{"144":1}}],["運用担当",{"2":{"138":1,"139":1}}],["営業部など",{"2":{"144":1}}],["営業部門",{"2":{"138":1}}],["レポートの内容",{"2":{"144":1}}],["レポートを印刷",{"2":{"140":1}}],["あるクラスがレポートの内容とメール送信先の設定を同時に保持している場合",{"2":{"144":1}}],["あなたは既存のecサイトに新しい支払い方法やロイヤリティプログラムを追加する必要があります",{"2":{"115":1}}],["だけでなく",{"2":{"144":1}}],["だが",{"2":{"16":1}}],["処理",{"2":{"144":1}}],["も責任に含まれる",{"0":{"144":1}}],["ファクトリなどで依存関係を外部化しているか",{"2":{"162":1,"168":1}}],["ファイル管理者の責任",{"2":{"143":1}}],["フィールドとメソッドが密接に関係している単位で",{"2":{"149":1}}],["フィールド",{"0":{"144":1},"2":{"144":1}}],["通信",{"2":{"143":1}}],["通知ごとにクラスを分離すれば",{"2":{"105":1}}],["通知手段を拡張できる設計にする",{"0":{"105":1},"1":{"106":1,"107":1,"108":1,"109":1,"110":1}}],["通知種別ごとの責任が1クラスに集中",{"2":{"103":1}}],["通知方法が増えるたびに",{"2":{"103":1}}],["プリンタ担当者の責任",{"2":{"143":1}}],["プログラムコードの中にプログラムが満たすべき仕様について記述することで",{"2":{"40":1}}],["保存",{"2":{"140":1,"154":2,"157":1}}],["保守が避けられません",{"2":{"170":1}}],["保守が困難になるのです",{"2":{"138":1}}],["保守を行う運用者や管理者",{"2":{"138":1}}],["保守性が向上",{"2":{"173":1}}],["保守性が高い",{"2":{"132":1}}],["保守性",{"2":{"169":1}}],["保守性に課題があります",{"2":{"115":1}}],["保守コストが増大",{"2":{"99":1}}],["以下のような問題を解決できます",{"2":{"171":1}}],["以下のような視点を持つと",{"2":{"149":1}}],["以下のようなものが該当します",{"2":{"138":1}}],["以下は",{"2":{"140":1}}],["法制度やドメインルールなど",{"2":{"138":1}}],["ルール",{"2":{"138":1}}],["規格",{"2":{"138":1}}],["技術的",{"2":{"138":1}}],["技術的アクター",{"2":{"138":1}}],["ビジネス要件の変更を要求する人々",{"2":{"138":1}}],["ビジネスアクター",{"2":{"138":1,"144":1}}],["顧客など",{"2":{"138":1}}],["経営層",{"2":{"138":1,"139":1}}],["外部の制約により変更を強いる存在",{"2":{"138":1}}],["外部システム",{"2":{"138":1}}],["外部インターフェースの仕様策定者なども含まれます",{"2":{"138":1}}],["外の回答",{"2":{"54":1}}],["システムを利用するユーザーだけでなく",{"2":{"138":1}}],["シナリオ",{"0":{"115":1}}],["人",{"2":{"138":1}}],["have",{"2":{"137":1}}],["height",{"2":{"38":2,"48":1,"53":10,"59":5,"83":2,"85":2,"86":1}}],["提唱者",{"2":{"137":1}}],["しばしば",{"2":{"137":1}}],["しかし現在のコードはsolid原則に従っておらず",{"2":{"115":1}}],["なぜsolidが必要なのか",{"0":{"170":1}}],["なぜ",{"0":{"137":1},"1":{"138":1,"139":1}}],["など設計上のゴールは共通している",{"2":{"94":1}}],["からの変更要求にのみ対応すべきという意味です",{"2":{"136":1}}],["かどうかに注目した設計に変えましょう",{"2":{"33":1}}],["や役割を指します",{"2":{"136":1}}],["アクターが異なる処理が1つのクラスに混在しており",{"2":{"143":1}}],["アクター",{"0":{"137":1},"1":{"138":1,"139":1},"2":{"137":1}}],["アクターとは",{"0":{"138":1},"2":{"136":1,"138":1}}],["アプリ通知システム",{"2":{"100":1}}],["uncle",{"2":{"136":1}}],["userid",{"2":{"118":1,"122":1}}],["マーティン自身は",{"2":{"136":1}}],["マーティン",{"2":{"136":1}}],["本来の意図は",{"2":{"136":1}}],["本質的な意味です",{"2":{"136":1}}],["本記事では",{"2":{"77":1,"88":1}}],["たった一人のアクター",{"2":{"136":2,"169":1}}],["たとえば",{"2":{"2":1,"17":1,"28":1,"100":1,"138":1,"144":1}}],["疎結合なモジュール設計を促進します",{"2":{"133":1}}],["一見よさそうに見えますが",{"2":{"154":1}}],["一部の修正",{"2":{"145":1}}],["一つのクラスが複数の役割を持たなくなり",{"2":{"133":1}}],["一方で関数型では",{"2":{"79":1}}],["相互に関連し合っています",{"2":{"133":1}}],["支払い手段の追加",{"2":{"132":1}}],["支払い処理のみに責任を持つ",{"2":{"122":1}}],["支払い処理",{"2":{"118":1}}],["＋リスコフの置換原則",{"0":{"123":1},"1":{"124":1,"125":1}}],["注文確認メール送信",{"2":{"118":2}}],["注意点",{"2":{"64":1,"72":1,"87":1,"91":1}}],["ポイント計算方式の変更が柔軟に",{"2":{"132":1}}],["ポイント計算のみに責任を持つ",{"2":{"122":1}}],["ポイント計算",{"2":{"118":1}}],["ポリモーフィズムや拡張ポイントを利用しているか",{"2":{"162":1,"165":1}}],["ポリモーフィズムを活用して拡張ポイントを明確にする",{"2":{"111":1}}],["ポリモーフィズムを使った拡張",{"2":{"78":1}}],["ポリモーフィズム",{"2":{"78":2}}],["銀行振込処理",{"2":{"118":1,"125":1}}],["クレジットカード処理",{"2":{"118":1,"125":1}}],["クライアントにとって不要なメソッドへの依存を強制しない",{"2":{"169":1}}],["クライアントに返す戻り値",{"2":{"42":1}}],["クライアントが不要なメソッドに依存していないか",{"2":{"162":1,"167":1}}],["クライアントコードに影響なく置き換えられるか",{"2":{"162":1,"166":1}}],["クライアントコードがサブクラスと親クラスを区別せず使えているか",{"2":{"162":1,"166":1}}],["クライアントコードが",{"2":{"21":1}}],["クライアントは自分が使用しないメソッドへの依存を強制されるべきではない",{"2":{"69":1}}],["クラスやモジュールに複数の役割が混在していないか",{"2":{"162":1,"164":1}}],["クラスやインターフェース",{"2":{"94":1}}],["クラス単位で責務を分離する",{"2":{"93":1}}],["クラス単位での責任の明確化を図ります",{"2":{"89":1}}],["クラスの責任が複数あるかを判断しやすくなります",{"2":{"149":1}}],["クラスの振る舞いや構造に対して変更を要求し得る主体を指します",{"2":{"138":1}}],["クラスの肥大化",{"2":{"91":1}}],["クラスの継承",{"2":{"87":1}}],["クラスを変更する理由は1つだけであるべき",{"2":{"136":1}}],["クラスを分ける",{"2":{"91":1}}],["クラスを継承した",{"2":{"28":1}}],["クラス",{"2":{"91":1}}],["クラスごとに責務を分離する",{"2":{"89":1}}],["クラスは1つの責任しか持つべきでない",{"2":{"137":1}}],["クラスは",{"2":{"136":1,"169":1}}],["クラスはたった1つの理由でのみ変更されるべきである",{"2":{"88":1}}],["クラスはそれを選んで実装することで",{"2":{"70":1}}],["クラスには変更理由がひとつだけであるべき",{"2":{"137":1}}],["クラスには",{"2":{"28":1}}],["クラスがあるとします",{"2":{"28":1}}],["クラス図",{"0":{"3":1,"8":1,"18":1,"23":1,"27":1,"29":1,"34":1,"51":1,"58":1,"101":1,"106":1,"109":1,"117":1,"121":1,"124":1,"127":1,"130":1,"141":1,"147":1,"153":1,"156":1,"160":1}}],["非solidなコードの問題点",{"0":{"172":1}}],["非solidなコード",{"0":{"116":1},"1":{"117":1,"118":1}}],["具体的な実装の変更に強くなる",{"2":{"112":1}}],["具体的な出力方法には依存していません",{"2":{"63":1}}],["責任の分離",{"0":{"155":1},"1":{"156":1,"157":1,"158":1,"160":1,"161":1}}],["責任の分離の判断基準",{"0":{"149":1},"1":{"150":1}}],["責任を分離する",{"0":{"146":1},"1":{"147":1,"148":1}}],["責任を分離することで",{"2":{"112":1}}],["責任",{"2":{"137":1,"162":1,"167":1}}],["責任者",{"2":{"136":1}}],["責務が明確に分離されているか",{"2":{"162":1,"164":1}}],["責務が複数混在していないか",{"2":{"162":1,"164":1}}],["責務",{"2":{"94":1}}],["責務の分離",{"2":{"91":1,"94":1}}],["責務分離や抽象化を適切に設計することで",{"2":{"64":1}}],["適切に抽象化された",{"2":{"111":1}}],["適用可能な原則と限界",{"2":{"67":1}}],["設計が複雑になる危険があります",{"2":{"151":1}}],["設計により",{"2":{"113":1}}],["設計段階で",{"2":{"111":1}}],["設計原則を理解し",{"2":{"96":1}}],["変更の影響範囲が局所的で",{"2":{"173":1}}],["変更の可能性がある部分を特定し",{"2":{"111":1}}],["変更理由が明確になり",{"2":{"169":1}}],["変更理由が複数になり",{"2":{"138":1}}],["変更理由",{"2":{"137":1,"162":1,"164":1}}],["変更理由も分離され",{"2":{"112":1}}],["変更を要求する利害関係者",{"2":{"136":1}}],["変更がクラス追加のみで可能",{"2":{"132":1}}],["変換できるかを探る",{"2":{"66":1}}],["キャンペーンのお知らせ",{"2":{"110":1}}],["いる状態",{"2":{"108":1}}],["いるが",{"2":{"108":1}}],["閉じて",{"2":{"108":1}}],["閉鎖原則",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1},"2":{"14":1,"67":1,"77":2,"93":1}}],["開発後の変更要求に柔軟に対応できる",{"2":{"169":1}}],["開発者など",{"2":{"138":1}}],["開発",{"2":{"138":1}}],["開かれて",{"2":{"108":1}}],["開放",{"0":{"77":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1},"2":{"14":1,"67":1,"77":2,"93":1}}],["＝単一責任",{"2":{"161":1}}],["＝",{"2":{"104":1}}],["＝リスコフの置換原則違反",{"2":{"31":1}}],["契約",{"2":{"111":1}}],["契約完了",{"2":{"104":1}}],["契約による設計においての",{"0":{"43":1}}],["契約による設計",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1}}],["よくある誤解",{"0":{"152":1},"1":{"153":1,"154":1}}],["ようこそ",{"2":{"104":1}}],["より弱い事前条件になっている",{"2":{"46":1}}],["より強い事前条件になっているため",{"2":{"46":1}}],["バグのリスクが高まる",{"2":{"103":1}}],["ユーザーや関係者",{"2":{"136":1}}],["ユーザーに対して様々な方法で通知を送る仕組みです",{"2":{"100":1}}],["ユニオン型",{"2":{"76":1}}],["ユニオン型とパターンマッチにより",{"2":{"75":1}}],["ユニットテスト",{"0":{"55":1},"1":{"56":1}}],["新機能の追加が容易",{"2":{"173":1}}],["新機能追加のたびに既存コードを変更する必要がある",{"2":{"99":1}}],["新たに追加",{"2":{"110":1}}],["新規拡張は",{"2":{"108":1}}],["新しい振る舞いを既存コードの変更なしに追加できる構成か",{"2":{"162":1,"165":1}}],["新しい機能追加の際に既存クラスを修正していないか",{"2":{"162":1,"165":1}}],["新しいクラスに抽出する",{"2":{"149":1}}],["新しい支払い方法を追加するたびにこのメソッドを変更する必要がある",{"2":{"118":1}}],["新しい通知方式を追加しても既存コードを触らずに済みます",{"2":{"105":1}}],["新しい要件や機能を追加できる",{"2":{"98":1}}],["新しい図形の追加",{"0":{"82":1},"1":{"83":1,"84":1,"85":1,"86":1},"2":{"83":1,"84":1}}],["新しい図形を追加する場合",{"2":{"78":1}}],["べきという原則です",{"2":{"98":1}}],["ソフトウェアの変更に対する柔軟性と安定性のバランスを実現します",{"2":{"113":1}}],["ソフトウェアの構成要素は",{"2":{"98":1}}],["ソフトウェア実体は拡張に対して開かれており",{"2":{"77":1}}],["補完しあう設計スタイルです",{"2":{"96":1}}],["補足",{"0":{"40":1,"151":1,"159":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"160":1,"161":1}}],["最後に",{"0":{"96":1}}],["最小構成の関数をテスト可能",{"2":{"72":1}}],["文脈に応じて使い分けるのが理想",{"2":{"95":1}}],["複雑な状態管理やエンティティ設計にはoopの恩恵を受けやすい",{"2":{"95":1}}],["小さなインターフェースを提供し",{"2":{"169":1}}],["小さく目的ごとに分割されたインターフェースを使うことを推奨します",{"2":{"69":1}}],["小規模なロジックや副作用の少ない処理には関数型が適している",{"2":{"95":1}}],["状態",{"0":{"144":1},"2":{"144":1}}],["状態を持たない分",{"2":{"94":1}}],["状態共有がない代わりにパイプライン管理が必要",{"2":{"91":1}}],["両者とも",{"2":{"94":1}}],["両者は抽象に依存すべきである",{"2":{"61":1}}],["依存オブジェクトをモック注入できる",{"2":{"132":1}}],["依存注入で差し替え可能に",{"2":{"93":1}}],["依存性逆転",{"2":{"162":1}}],["依存性逆転の原則を自然な形で実現できます",{"2":{"64":1}}],["依存性逆転の原則に違反している例",{"0":{"2":1},"1":{"3":1,"4":1,"5":1}}],["依存性逆転の原則とは",{"0":{"1":1}}],["依存性逆転の原則",{"0":{"0":1,"61":1,"129":1,"168":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"62":1,"63":1,"64":1,"130":1,"131":1},"2":{"12":1,"14":1,"61":1,"67":1,"93":1,"112":1,"169":1}}],["依存性の注入",{"2":{"64":1}}],["構成する",{"2":{"93":1}}],["構造",{"2":{"87":1}}],["構造の保証",{"2":{"75":1}}],["機能追加のたびに既存コードを変更しなければならず",{"2":{"115":1}}],["機能追加が容易で安全なコードベースを構築できます",{"2":{"113":1}}],["機能単位に分割されたインターフェースを実装",{"2":{"93":1}}],["機能ごとにインターフェースを分割する",{"0":{"22":1},"1":{"23":1,"24":1}}],["生成と出力という異なる責務を別クラスに分けることで",{"2":{"89":1}}],["内容",{"2":{"89":1,"90":1}}],["使用例",{"2":{"89":1,"90":1}}],["使えない機能",{"2":{"20":1}}],["json",{"2":{"89":1,"90":1}}],["柔軟で保守性の高いコードを生む第一歩となります",{"2":{"96":1}}],["柔軟だが型の設計が重要",{"2":{"87":1}}],["柔軟性",{"2":{"87":1}}],["柔軟性に影響を与えるかを明らかにします",{"2":{"65":1}}],["特にオブジェクト指向プログラミングにおいて重要です",{"2":{"169":1}}],["特にdiと併用時",{"2":{"87":1}}],["特にsolid",{"2":{"66":1}}],["高レベルモジュールが低レベルの具体実装に依存していないか",{"2":{"162":1,"168":1}}],["高階関数や引数による依存関数の注入",{"2":{"93":1}}],["高い",{"2":{"87":1}}],["高さが変化し",{"2":{"49":1}}],["高さは変化しない",{"2":{"48":1}}],["データ構造が異なるアクターに属する場合もsrp違反となり得ます",{"2":{"144":1}}],["データ型と関数の追加",{"2":{"87":1}}],["データ駆動で拡張を行う構成が有効です",{"2":{"79":1}}],["75",{"2":{"84":1,"86":1}}],["6",{"2":{"84":1,"86":1}}],["66",{"2":{"79":1,"81":1}}],["bob",{"2":{"136":1}}],["banktransferpayment",{"2":{"125":1}}],["bank",{"2":{"118":1}}],["base",{"2":{"83":2,"85":2,"86":1}}],["before",{"0":{"116":1},"1":{"117":1,"118":1}}],["birdならばflyできる",{"2":{"32":1}}],["bird",{"2":{"28":2,"30":3,"31":1,"32":3,"35":3,"74":3,"75":5}}],["拡張のために既存のコード",{"2":{"162":1,"165":1}}],["拡張の単位",{"2":{"87":1}}],["拡張に開かれている",{"2":{"98":1}}],["拡張に開かれ",{"2":{"98":1,"113":1,"169":1}}],["拡張例",{"0":{"82":1},"1":{"83":1,"84":1,"85":1,"86":1}}],["拡張性が高く",{"2":{"173":1}}],["拡張性の高いコードを実現します",{"2":{"133":1}}],["拡張性の確保",{"2":{"94":1}}],["拡張性",{"2":{"64":1,"72":1,"91":1,"169":1}}],["$",{"2":{"81":1,"86":1,"89":1,"90":1,"102":3,"107":3,"110":1,"131":1,"142":3,"145":4,"148":3,"154":4,"157":4}}],["2000年代にrobert",{"2":{"169":1}}],["2",{"2":{"80":2,"83":1,"85":3}}],["26548245743669",{"2":{"79":2,"81":2,"84":2,"86":2}}],["パターンマッチングとデータ駆動の拡張",{"2":{"80":1}}],["既存クラスを開いて書き換える必要がある",{"2":{"104":1}}],["既存コードを壊さずに新しい振る舞いを追加できる",{"2":{"169":1}}],["既存コードを変更せずに拡張できる",{"2":{"112":1}}],["既存コードを変更せずに機能拡張することが可能です",{"2":{"77":1}}],["既存コードの修正によるバグ発生リスク",{"2":{"99":1}}],["既存の動作には",{"2":{"108":1}}],["既存のコードは一切変更しない",{"2":{"108":1}}],["既存の安定したコードを変更しなくてもよい",{"2":{"98":1}}],["既存のロジックを変更せずに新しい振る舞いを追加する",{"2":{"86":1}}],["既存の分岐や処理を修正せずに拡張が可能になります",{"2":{"79":1}}],["分離の検討をする",{"2":{"149":1}}],["分離すべき設計かもしれません",{"2":{"144":1}}],["分岐の集中を避けるために関数のマッピング",{"2":{"79":1}}],["分割しすぎると煩雑化",{"2":{"72":1}}],["分割の単位",{"2":{"72":1}}],["50",{"2":{"79":1,"81":1,"84":1,"86":1}}],["カプセル化",{"2":{"78":1}}],["オープンクローズド",{"2":{"162":1}}],["オープンクローズド原則",{"0":{"123":1},"1":{"124":1,"125":1}}],["オープンクローズドの原則の適用が容易になります",{"2":{"133":1}}],["オープンクローズドの原則は",{"2":{"113":1}}],["オープンクローズドの原則に違反する可能性が高まる",{"2":{"36":1}}],["オープンクローズドの原則",{"0":{"97":1,"165":1},"1":{"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1},"2":{"12":1,"108":1,"169":1}}],["オブジェクト指向",{"2":{"92":1}}],["オブジェクト指向プログラミング",{"2":{"88":1}}],["オブジェクト指向の三大要素",{"2":{"78":1}}],["異なるアクターの責任をインターフェースとして分離することで",{"2":{"159":1}}],["異なるアクターが関心を持つメソッドが混在していたら",{"2":{"149":1}}],["異なる責任を持つ処理を1つの関数やクラスにまとめるのは危険です",{"2":{"152":1}}],["異なるクラスのオブジェクトが同じインターフェースやメソッドを共有し",{"2":{"78":1}}],["異なるパラダイムでの設計例を通じて読者の理解を深める",{"2":{"66":1}}],["意図しない別の場所に影響してバグが発生する",{"2":{"172":1}}],["意図しないオーバーライドに注意",{"2":{"76":1}}],["意味的な一致まで注意が必要です",{"2":{"76":1}}],["継承関係の一貫性を保ち",{"2":{"169":1}}],["継承とポリモーフィズム",{"2":{"87":1}}],["継承とインターフェース",{"2":{"76":1}}],["継承",{"2":{"78":1}}],["継承や共通インターフェースを使うoopでは",{"2":{"76":1}}],["明示的な分岐で安全な選択",{"2":{"76":1}}],["明示的に",{"2":{"75":1}}],["置換の安全性",{"2":{"76":1}}],["置き換え可能な設計＝リスコフの置換原則に準拠した設計になります",{"2":{"35":1,"74":1}}],["タグ付き構造",{"2":{"76":1}}],["kind",{"2":{"75":3,"78":3,"79":1,"80":4,"81":3,"83":1,"84":1,"85":4,"86":4}}],["不要なメソッドの空実装や例外的実装が発生していないか",{"2":{"162":1,"167":1}}],["不要な機能を含まないことで容易になる",{"2":{"72":1}}],["不要な依存を避ける構成が自然に実現されます",{"2":{"71":1}}],["組み合わせで対応",{"2":{"72":1}}],["モジュール単位でのテストが容易",{"2":{"173":1}}],["モジュール同士の結びつきが強く",{"2":{"172":1}}],["モジュール間の独立性が高まる",{"2":{"169":1}}],["モジュール",{"2":{"138":1}}],["モジュールの関心が明確になります",{"2":{"71":1}}],["モックによる検証が必要",{"2":{"76":1}}],["モックオブジェクトの注入",{"2":{"64":1}}],["副作用を外部から注入する形で",{"2":{"94":1}}],["副作用を分離する",{"2":{"91":1,"93":1}}],["副作用を分離することで",{"2":{"90":1}}],["副作用",{"2":{"71":1}}],["各原則は独立していますが",{"2":{"133":1}}],["各原則の実装チェックリストはこちら",{"2":{"169":1}}],["各原則のチェックリスト",{"0":{"162":1}}],["各原則の適用比較",{"0":{"93":1}}],["各原則の一覧",{"0":{"12":1}}],["各クラスが1つの責任に集中し",{"2":{"132":1}}],["各機能を別クラスに分離するのが望ましい設計です",{"2":{"139":1}}],["各機能",{"2":{"71":1}}],["余計な依存を避けることができます",{"2":{"70":1}}],["肥大化したインターフェースから生じる影響を避け",{"2":{"69":1}}],["まだ対応していない",{"2":{"104":1}}],["また",{"2":{"90":1}}],["またはエラーの可能性",{"2":{"32":1}}],["まとめ",{"0":{"113":1},"2":{"67":1}}],["比較ページ",{"2":{"67":1}}],["比較まとめ",{"0":{"64":1,"72":1,"76":1}}],["原則は",{"2":{"151":1}}],["原則違反のリスク",{"0":{"104":1}}],["原則に違反",{"0":{"103":1},"1":{"106":1,"107":1}}],["原則に違反した例",{"0":{"100":1},"1":{"101":1,"102":1,"103":1}}],["原則に違反するとどうなるか",{"0":{"6":1,"21":1,"32":1,"145":1}}],["原則",{"2":{"93":1,"162":1,"169":1}}],["原則名",{"2":{"67":1}}],["今後の内容予定",{"0":{"67":1}}],["対比の目的",{"0":{"66":1}}],["の関心",{"2":{"144":1}}],["ので",{"2":{"139":1}}],["の視点が本質になります",{"2":{"137":1}}],["の観点が重要か",{"0":{"137":1},"1":{"138":1,"139":1}}],["の適用方法と考え方の違いを総括します",{"2":{"92":1}}],["の一つです",{"2":{"78":1}}],["の実践です",{"2":{"77":1}}],["の飛行不能を表現することで",{"2":{"75":1}}],["の意図や効果を再確認する",{"2":{"66":1}}],["の考え方を比較し",{"2":{"65":1}}],["の機能をすべて持つ",{"2":{"17":1}}],["別の関数を注入することで対応",{"2":{"64":1}}],["コンストラクタ注入",{"2":{"162":1,"168":1}}],["コンストラクタやsetterなど",{"2":{"64":1}}],["コンパイルエラー",{"2":{"74":1}}],["コードの再利用性が高く",{"2":{"173":1}}],["コードの構造が複雑で",{"2":{"172":1}}],["コード",{"0":{"4":1,"9":1,"19":1,"24":1,"30":1,"35":1,"38":1,"53":1,"59":1,"102":1,"107":1,"110":1,"118":1,"122":1,"125":1,"128":1,"131":1,"142":1,"148":1,"154":1,"157":1,"161":1},"1":{"54":1,"60":1}}],["観点",{"2":{"64":1,"72":1,"76":1,"87":1,"91":1}}],["メール仕様変更",{"2":{"145":1}}],["メール送信の仕様を変更するだけなのに",{"2":{"145":1}}],["メール送信のみに責任を持つ",{"2":{"122":1}}],["メール送信仕様を変更したいが",{"2":{"145":1}}],["メール送信仕様変更",{"2":{"145":1}}],["メール送信先",{"2":{"144":1}}],["メール担当の責任",{"2":{"143":1}}],["メッセージを配列などに記録することで検証できる",{"2":{"63":1}}],["メソッドごとに",{"2":{"149":1}}],["メソッド",{"2":{"144":1}}],["メソッドの正常終了時のインスタンスの状態",{"2":{"42":1}}],["メソッドの引数",{"2":{"41":1}}],["メソッド正常終了時に保証されるべき条件",{"2":{"42":1}}],["メソッド開始時のインスタンスの状態",{"2":{"41":1}}],["メソッド開始時に保証されるべき条件",{"2":{"41":1}}],["メソッドがあり",{"2":{"28":1}}],["他の処理も巻き込んでしまう例",{"2":{"145":1}}],["他のクラスやモジュールなど",{"2":{"138":1}}],["他のシステム",{"2":{"138":1}}],["他のsolid原則との関連",{"0":{"112":1}}],["他の実装と容易に差し替えが可能です",{"2":{"62":1}}],["他の支払い手段を自由に差し替えられる",{"2":{"10":1}}],["他の支払い方法を使いたくなったときに書き換えが必要になる",{"2":{"5":1}}],["関数マップやデータ駆動設計で拡張",{"2":{"93":1}}],["関数単位で責務を分離し",{"2":{"93":1}}],["関数単位でテストしやすい",{"2":{"91":1}}],["関数",{"2":{"91":1}}],["関数を機能単位で注入",{"2":{"93":1}}],["関数を分ける",{"2":{"91":1}}],["関数を合成して処理フローを作ることが容易です",{"2":{"90":1}}],["関数を依存対象として注入する",{"2":{"63":1}}],["関数ごとの責任の明確化",{"2":{"90":1}}],["関数ごとに責務を分離する",{"2":{"90":1}}],["関数合成とパターンマッチ",{"2":{"87":1}}],["関数本体の処理構造を変更せずに済むため",{"2":{"84":1}}],["関数ディスパッチ",{"2":{"79":1}}],["関数注入の構造がわかりづらくなる場合がある",{"2":{"72":1}}],["関数と構造体",{"2":{"72":1}}],["関数と高階関数を用いてこの原則を適用することができます",{"2":{"61":1}}],["関数の分離と合成で対応",{"2":{"87":1}}],["関数の修正は不要",{"2":{"78":1}}],["関数の合成や高階関数で拡張",{"2":{"91":1}}],["関数の合成",{"2":{"72":1}}],["関数の引数が多くなると読みにくいこともある",{"2":{"64":1}}],["関数の型",{"2":{"64":1}}],["関数引数として渡す",{"2":{"64":1}}],["関数に依存しており",{"2":{"63":1}}],["関数型プログラミングでも設計原則を応用",{"2":{"66":1}}],["関数型プログラミング",{"2":{"65":1,"92":1}}],["関数型プログラミングにおいても",{"2":{"61":1}}],["関数型でも新しい図形を追加する場合は",{"2":{"84":1}}],["関数型でも",{"2":{"64":1}}],["関数型では構造的に明示することで",{"2":{"76":1}}],["関数型では型の整合性と構造の一貫性に注目が集まります",{"2":{"73":1}}],["関数型では",{"2":{"63":1,"75":1,"90":1}}],["関数型におけるdipの応用",{"0":{"63":1}}],["関係",{"2":{"26":1}}],["関係のない機能まで対応を強いられる",{"2":{"20":1}}],["上位モジュールと下位モジュールは抽象に依存すべき",{"2":{"169":1}}],["上位モジュールが下位モジュールに依存していないか",{"2":{"162":1,"168":1}}],["上位モジュールは下位モジュールに依存すべきではない",{"2":{"61":1}}],["上位のモジュールは下位モジュールに依存してはならない",{"2":{"1":1}}],["9",{"2":{"60":1,"84":1,"86":1}}],["想定読者",{"0":{"68":1}}],["想定",{"2":{"54":1}}],["違反例",{"0":{"52":1},"1":{"53":1,"54":1,"55":1,"56":1}}],["with",{"2":{"174":1}}],["width",{"2":{"48":5,"49":5,"53":10,"59":5}}],["wight",{"2":{"38":2}}],["05",{"2":{"128":1}}],["01",{"2":{"118":1,"128":1}}],["0",{"2":{"45":1,"53":2,"59":3,"78":1,"80":1,"118":2,"122":1,"128":2}}],[">",{"2":{"45":1,"46":2}}],["x3c",{"2":{"80":1,"85":1}}],["x26",{"2":{"48":2}}],["x",{"2":{"45":2,"46":3}}],["事後条件",{"2":{"48":1,"49":1}}],["事後条件はスーパータイプと同じかそれより強い条件",{"0":{"47":1},"1":{"48":1,"49":1,"51":1}}],["事後条件とは",{"0":{"42":1}}],["事前条件",{"2":{"45":1,"46":2}}],["事前条件はスーパータイプと同じかそれより弱い条件",{"0":{"44":1},"1":{"45":1,"46":1}}],["事前条件とは",{"0":{"41":1}}],["正しい構成例",{"0":{"155":1},"1":{"156":1,"157":1,"158":1,"160":1,"161":1}}],["正しい継承",{"2":{"26":1}}],["正確で眼瞼なソフトウェアとする設計技法",{"2":{"40":1}}],["1クラスが3つのアクターに責任を持っている",{"2":{"139":1}}],["1つのクラスは1人のアクター",{"2":{"136":1}}],["1つのアクター",{"2":{"136":1}}],["1つの変更理由",{"2":{"136":1}}],["16",{"2":{"54":1,"79":1,"81":1,"84":1,"86":1}}],["16となり",{"2":{"39":1,"55":1}}],["1",{"2":{"46":1,"56":2,"89":1,"90":1}}],["10",{"2":{"46":1}}],["12",{"2":{"39":2,"54":2,"55":2,"60":1}}],["4",{"2":{"39":2,"53":2,"55":2,"59":1,"79":2,"81":2,"84":2,"86":2}}],["3",{"2":{"39":2,"53":2,"55":2,"59":2,"84":1,"86":1}}],["振る舞いの変更に気付くには",{"0":{"37":1},"1":{"38":1,"39":1}}],["振る舞いの同等性",{"2":{"26":1}}],["robert",{"2":{"137":1,"174":3}}],["radius",{"2":{"78":3,"80":2,"81":1,"85":2,"86":1}}],["runapplication",{"2":{"63":3}}],["run",{"2":{"53":2,"59":2,"62":2}}],["r1",{"2":{"39":4,"55":4}}],["refactoring",{"2":{"174":1}}],["repeat",{"2":{"151":1}}],["reportmanager",{"2":{"139":1,"142":1,"145":2,"154":1}}],["report",{"2":{"89":4,"90":4,"148":11,"150":5,"154":9,"157":10,"158":5,"161":6}}],["reportprinter",{"2":{"89":2}}],["reportgenerator",{"2":{"89":2}}],["reason",{"2":{"137":1}}],["regularcustomerpoints",{"2":{"128":1}}],["responsibility",{"0":{"135":1},"1":{"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1},"2":{"88":1,"136":1}}],["recipient",{"2":{"145":2}}],["record",{"2":{"80":1,"85":1}}],["rectable",{"2":{"59":4}}],["rectangle",{"2":{"38":1,"39":3,"53":4,"55":4,"59":2}}],["reduce",{"2":{"78":1,"80":1}}],["return",{"2":{"38":1,"53":2,"59":2,"78":3,"83":1,"89":1,"118":1,"128":2}}],["r",{"2":{"36":1,"38":4,"53":4}}],["リリース後の機能追加",{"2":{"170":1}}],["リファクタリング時の指針",{"0":{"149":1},"1":{"150":1}}],["リスコフの置換条件違反",{"2":{"46":1,"49":1}}],["リスコフの置換原則はオープンクローズドの原則を支え",{"2":{"133":1}}],["リスコフの置換原則に違反するとどうなるか",{"0":{"36":1}}],["リスコフの置換原則に違反した例",{"0":{"28":1},"1":{"29":1,"30":1,"31":1}}],["リスコフの置換原則とは",{"0":{"26":1},"1":{"27":1}}],["リスコフの置換原則",{"0":{"25":1,"73":1,"166":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"74":1,"75":1,"76":1},"2":{"12":1,"14":1,"67":1,"73":1,"93":1,"112":1,"162":1,"169":1}}],["リコリスの置換原則に違反したコードを使うと",{"2":{"36":1}}],["ステークホルダー",{"2":{"136":1}}],["スーパータイプより事後条件となるため",{"2":{"49":1}}],["スーパータイプ",{"0":{"45":1,"48":1},"2":{"53":1}}],["スーパータイプとサブタイプで振る舞いが変更されていることを確認する最も簡単な方法は単体テストを書くこと",{"2":{"37":1}}],["スズメが飛んだ",{"2":{"35":1,"74":1}}],["スキャンできる",{"2":{"21":1}}],["スキャンしました",{"2":{"19":1,"24":1}}],["スキャン",{"2":{"17":1}}],["鳴くなど",{"2":{"35":1,"74":1}}],["例",{"0":{"139":1},"1":{"141":1,"142":1},"2":{"35":1,"74":1,"145":1}}],["鳥＝飛ぶもの",{"2":{"33":1}}],["つまり",{"2":{"33":1,"136":1,"138":1}}],["飛べない鳥",{"2":{"33":1}}],["飛べる鳥",{"2":{"33":1}}],["飛べる",{"2":{"33":1}}],["飛べません",{"2":{"31":1}}],["ことを推奨しますが",{"2":{"151":1}}],["ことでdipの考え方を自然に実現できます",{"2":{"63":1}}],["これらの原則は",{"2":{"169":1}}],["これらを実装するクラスは",{"2":{"161":1}}],["これらが1つのクラスに混在すると",{"2":{"138":1}}],["これを",{"2":{"136":1}}],["これは誰のための処理か",{"2":{"149":1}}],["これはocpに適合した設計です",{"2":{"78":1}}],["これは典型的な",{"2":{"77":1}}],["これは",{"2":{"69":1,"104":1,"139":1}}],["これにより",{"2":{"62":1,"79":1}}],["ここで誤動作",{"2":{"32":1}}],["このクラスは1つの理由でしか変更されないか",{"2":{"162":1,"164":1}}],["この",{"2":{"137":2}}],["この設計の利点",{"0":{"132":1}}],["この設計は",{"2":{"31":1,"161":1}}],["この機能は将来的に種類が増えるかもしれない",{"2":{"111":1}}],["この原則が解決する問題",{"0":{"99":1}}],["この原則の要点",{"0":{"98":1}}],["この比較はどちらの立場を優劣とするものではなく",{"2":{"68":1}}],["このセクションでは",{"2":{"65":1,"92":1}}],["このようにログ出力をdryの観点から共通化すると",{"2":{"154":1}}],["このように",{"2":{"86":1,"89":1,"144":1}}],["このようにすれば",{"2":{"35":1,"74":1}}],["このように分離することで",{"2":{"24":1}}],["このプリンタはfaxできません",{"2":{"19":1}}],["このプリンタはスキャンできません",{"2":{"19":1}}],["このサイトは",{"2":{"11":1}}],["でした",{"2":{"150":1}}],["で",{"2":{"136":1}}],["で抽象化し",{"2":{"94":1}}],["です",{"2":{"31":1,"138":1,"139":1}}],["では意図しない動作や例外が発生するかもしれません",{"2":{"31":1}}],["型ガードと構造的な安全性による置換保証",{"2":{"93":1}}],["型定義と関数マップを拡張することで対応します",{"2":{"84":1}}],["型の肥大化とcaseの集中化",{"2":{"87":1}}],["型の分離により検証容易",{"2":{"76":1}}],["型の置換が意味的にも安全",{"2":{"75":1}}],["型の置き換えができない",{"2":{"31":1}}],["型で表現され防止しやすい",{"2":{"76":1}}],["型で受け取って",{"2":{"31":1}}],["型ごとの明確な分離",{"2":{"75":1}}],["型不一致",{"2":{"74":1}}],["型に対してのみ",{"2":{"35":1,"74":1}}],["ペンギン",{"2":{"31":1}}],["空を飛ぶ",{"2":{"30":1}}],["すべての鳥が飛べる前提です",{"2":{"28":1}}],["filesaver",{"2":{"148":1,"150":1,"157":1,"158":1}}],["foreach",{"2":{"79":1,"81":1,"84":1,"86":1,"107":1}}],["function",{"2":{"78":1}}],["fpでは",{"2":{"94":1}}],["fpでは関数の責任を明示的に分離することで",{"2":{"72":1}}],["fpでは関数の構成と引数単位の依存注入によってispを達成できます",{"2":{"69":1}}],["fpは関数とデータで抽象化する",{"2":{"94":1}}],["fpの拡張例",{"0":{"85":1}}],["fpの例",{"2":{"80":1,"90":1}}],["fpにおける実践",{"2":{"93":1}}],["fpにおけるsrpの実装例",{"0":{"90":1}}],["fpにおけるocpの実装例",{"0":{"80":1},"1":{"81":1}}],["fpにおけるlspの実装例",{"0":{"75":1}}],["fpにおけるispの実装例",{"0":{"71":1}}],["fp",{"2":{"64":1,"65":1,"72":1,"76":1,"87":1,"88":1,"91":1}}],["failed",{"2":{"56":1}}],["faxnotifier",{"2":{"110":2}}],["faxnotifierを新規追加するだけで対応でき",{"2":{"108":1}}],["faxに対応するには",{"2":{"104":1}}],["faxが新しく追加されたが",{"2":{"104":1}}],["faxを送信しました",{"2":{"19":1,"24":1}}],["fax",{"2":{"17":1,"19":3,"24":4,"104":1}}],["from",{"2":{"55":1}}],["f",{"2":{"38":1,"39":2,"53":3,"55":3,"59":3}}],["flyer",{"2":{"35":3,"74":6}}],["fly",{"2":{"28":1,"30":1,"31":1,"32":2,"35":4,"74":5,"75":3}}],["+",{"0":{"162":1},"2":{"26":1,"78":1,"80":1}}],["そのような変化に柔軟に対応できる設計を実現するために重要な指針です",{"2":{"170":1}}],["その結果",{"2":{"145":1}}],["そのものを変更してしまう",{"2":{"145":1}}],["そのクラスの",{"2":{"162":1,"164":1}}],["そのクラスの変更を要求する主体",{"2":{"138":1}}],["そのクラスを利用している者",{"2":{"138":1}}],["そのクラスに変更を求める人や立場＝アクターを意味します",{"2":{"137":1}}],["そのスーパータイプと置換可能でなければならない",{"2":{"26":1}}],["それぞれが異なるアクターの責任領域であれば",{"2":{"144":1}}],["それぞれ異なる方法でそれを実装できる特性のことです",{"2":{"78":1}}],["それぞれの文脈に応じた適用ができることが",{"2":{"96":1}}],["それぞれの長所と特徴を理解することを目的としています",{"2":{"68":1}}],["それぞれの設計手法がどのように責務の分離や拡張性",{"2":{"65":1}}],["それを",{"2":{"111":1}}],["それを実装するクラスを追加することで",{"2":{"77":1}}],["それをすべてのプリンタに強制している例です",{"2":{"17":1}}],["サブクラスで例外的な動作",{"2":{"162":1,"166":1}}],["サブクラスでの実装を強制することができる",{"2":{"16":1}}],["サブクラスが親クラスの期待する振る舞いをすべて満たしているか",{"2":{"162":1,"166":1}}],["サブクラス化や委譲",{"2":{"91":1}}],["サブタイプが正しく設計されていれば",{"2":{"112":1}}],["サブタイプ",{"0":{"46":1,"49":1},"2":{"53":1}}],["サブタイプの事後条件はスーパータイプと同じかそれより強い条件と置き換える",{"2":{"43":1}}],["サブタイプの事前条件はスーパータイプと同じかそれより弱い条件と置き換え",{"2":{"43":1}}],["サブタイプの事前条件と事後条件",{"0":{"43":1}}],["サブタイプはスーパータイプと置換可能でなければならない",{"2":{"169":1}}],["サブタイプは",{"2":{"26":1}}],["→",{"2":{"24":1,"143":3,"144":2,"145":1}}],["必要な関数だけを構成する",{"2":{"72":1}}],["必要な関数だけを構成要素として渡すことで",{"2":{"71":1}}],["必要なインターフェースだけ",{"2":{"24":1}}],["必要な機能だけを持つインターフェースを定義し",{"2":{"70":1}}],["必要な機能だけ",{"2":{"24":1}}],["信頼性を損なう",{"2":{"21":1}}],["といって",{"2":{"152":1}}],["という",{"2":{"137":1}}],["という観点から説明しています",{"2":{"136":1}}],["という定義をしており",{"2":{"136":1}}],["ということです",{"2":{"136":1}}],["というocpの目的を実現できます",{"2":{"86":1}}],["という設計原則です",{"2":{"73":1,"77":1}}],["という原則です",{"2":{"69":1}}],["という抽象に依存しており",{"2":{"62":1}}],["という抽象に依存しているので",{"2":{"10":1}}],["という考え方です",{"2":{"61":1,"88":1}}],["という前提ではなく",{"2":{"33":1}}],["と混同すると",{"2":{"151":1}}],["と問い直す",{"2":{"149":1}}],["と言い換えることもできます",{"2":{"138":1}}],["と表現されますが",{"2":{"137":1}}],["と考える習慣をつける",{"2":{"111":1}}],["として切り出す",{"2":{"111":1}}],["とfp",{"2":{"92":1}}],["と関数型プログラミング",{"2":{"88":1}}],["とは誰のためのものか",{"2":{"137":1}}],["とは",{"2":{"78":1,"137":1}}],["と",{"2":{"33":1,"75":1}}],["と信じて使っているのに",{"2":{"32":1}}],["と誤解して使ってしまう",{"2":{"21":1}}],["将来の変更時に",{"2":{"20":1}}],["利害関係者",{"2":{"136":1}}],["利用側に応じた適切な粒度のインターフェースが提供されているか",{"2":{"162":1,"167":1}}],["利用側でクラスを判別するための分岐を入れののはng",{"2":{"36":1}}],["利用例",{"0":{"79":1,"81":1,"84":1,"86":1}}],["利用者",{"2":{"136":2}}],["利用者がサブタイプまで全て理解した上で利用する必要がある",{"2":{"36":1}}],["利用者が想定しない挙動によるバグが発生する可能性が高まる",{"2":{"36":1}}],["利用者はスーパータイプとサブタイプは同じ挙動を期待して利用する",{"2":{"36":1}}],["利用者は",{"2":{"32":1}}],["利用者も",{"2":{"20":1}}],["利点",{"0":{"10":1,"108":1},"1":{"109":1,"110":1}}],["無理やり実装を強制されている",{"2":{"20":1}}],["ecサイト機能拡張",{"0":{"114":1},"1":{"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1}}],["ecサイトの責務分離と拡張設計",{"2":{"13":1}}],["else",{"2":{"102":2,"118":1}}],["emailable",{"2":{"161":1}}],["emailsender",{"2":{"148":1,"150":1,"157":1,"158":1}}],["emailservice",{"2":{"122":1,"131":3}}],["emailnotifier",{"2":{"107":1,"110":1}}],["email",{"2":{"102":1,"104":1}}],["example",{"2":{"145":1}}],["export",{"2":{"53":3}}],["expect",{"2":{"39":2,"55":2}}],["extends",{"2":{"30":2,"35":2,"53":1,"74":2}}],["error",{"2":{"19":2}}],["agile",{"2":{"174":1}}],["architecture",{"2":{"174":1}}],["areamap",{"2":{"80":2,"85":1}}],["area",{"2":{"78":4,"79":1,"80":2,"81":1,"83":1,"84":1,"86":1}}],["action",{"2":{"154":2,"157":2}}],["admin",{"2":{"145":1}}],["apiの利用者",{"2":{"138":1}}],["app",{"2":{"62":2}}],["application",{"2":{"62":4,"63":1}}],["after",{"0":{"119":1},"1":{"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1}}],["and",{"2":{"174":2}}],["any",{"2":{"80":1,"85":1,"89":1,"90":1}}],["animal",{"2":{"75":6}}],["a",{"2":{"26":1,"75":3,"137":1,"174":1}}],["allinoneprinter",{"2":{"19":1,"24":1}}],["amount",{"2":{"4":4,"6":2,"9":7,"128":5}}],["martin公式サイト",{"2":{"174":1}}],["martin著",{"2":{"174":2}}],["martin氏によって提唱されました",{"2":{"169":1}}],["martin",{"2":{"137":1}}],["math",{"2":{"78":1,"80":1,"85":1}}],["makefly",{"2":{"74":3,"75":1}}],["makeitfly",{"2":{"32":2}}],["multifunctionprinter",{"2":{"70":1}}],["multifunctiondevice",{"2":{"17":1,"19":3}}],["msg",{"2":{"63":4}}],["message",{"2":{"62":3,"63":1,"102":4,"107":9,"110":2,"145":2}}],["mockpayment",{"2":{"10":1}}],["印刷処理や保存処理のテスト",{"2":{"145":1}}],["印刷や保存",{"2":{"145":1}}],["印刷しました",{"2":{"19":2,"24":2}}],["印刷",{"2":{"17":1,"154":1,"157":1}}],["を支えるものです",{"2":{"169":1}}],["をしていないか",{"2":{"162":1,"166":1}}],["を利用して柔軟に設計されているか",{"2":{"162":1,"165":1}}],["を頻繁に修正していないか",{"2":{"162":1,"165":1}}],["を持つことになります",{"2":{"161":1}}],["を定義する",{"2":{"111":1}}],["を自然に満たしている",{"2":{"108":1}}],["を柔軟に管理できる",{"2":{"94":1}}],["を用いて",{"2":{"79":1}}],["を避けている",{"2":{"75":1}}],["を関数単位で分離して注入するため",{"2":{"71":1}}],["を通じてこの原則を実現しますが",{"2":{"61":1}}],["を呼び出せるようになるため",{"2":{"35":1,"74":1}}],["を呼ぶと",{"2":{"31":1}}],["を分けて扱うようにします",{"2":{"33":1}}],["を正しく扱えないためバグの原因になります",{"2":{"32":1}}],["を実装し",{"2":{"24":1}}],["を見えてしまう",{"2":{"20":1}}],["を考えてみましょう",{"2":{"17":1,"100":1}}],["を注入することで柔軟なテストが可能",{"2":{"10":1}}],["➡️",{"2":{"16":1}}],["インターフェースが1つの関心事",{"2":{"162":1,"167":1}}],["インターフェースは肥大化していないか",{"2":{"162":1,"167":1}}],["インターフェース分離",{"2":{"162":1}}],["インターフェース分離の原則と依存性逆転の原則は互いに補完し合い",{"2":{"133":1}}],["インターフェース分離の原則とは",{"0":{"16":1}}],["インターフェース分離の原則はどちらのパラダイムでも自然に適用できます",{"2":{"72":1}}],["インターフェース分離の原則に準拠した設計になります",{"2":{"24":1}}],["インターフェース分離の原則に違反した例",{"0":{"17":1},"1":{"18":1,"19":1,"20":1}}],["インターフェース分離の原則",{"0":{"15":1,"69":1,"126":1,"167":1},"1":{"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"70":1,"71":1,"72":1,"127":1,"128":1},"2":{"12":1,"14":1,"67":1,"69":1,"93":1,"161":1,"169":1}}],["インターフェース設計が重要",{"2":{"111":1}}],["インターフェースで通知手段を抽象化し",{"2":{"105":1}}],["インターフェースに依存し",{"2":{"93":1}}],["インターフェースに用意されている不必要なフィールドやメソッドにクライアントが依存しなくてもいいようにインターフェースは適切に分割すべき",{"2":{"16":1}}],["インターフェースの変更を要求し得るもの",{"2":{"138":1}}],["インターフェースの継承における意味的な互換性の保証",{"2":{"93":1}}],["インターフェースのクライアントにとって利用しないフィールドやメソッドへの依存を矯正してはならない",{"2":{"16":1}}],["インターフェースと継承で拡張",{"2":{"93":1}}],["インターフェースを使った責任の分離",{"0":{"159":1},"1":{"160":1,"161":1}}],["インターフェースを通じた拡張",{"2":{"87":1}}],["インターフェースを実装したクラスを追加するだけでよい",{"2":{"78":1}}],["インターフェースを定義し",{"2":{"17":1}}],["インターフェース追加と実装切り替え",{"2":{"72":1}}],["インターフェース",{"2":{"64":1,"72":1,"162":2,"165":1,"168":1}}],["インターフェースや抽象クラスの抽象メソッドは未実装のままではエラーとなり",{"2":{"16":1}}],["|",{"2":{"14":4,"75":1,"80":2,"85":3}}],["ケーススタディ",{"0":{"13":1}}],["d",{"2":{"169":1}}],["don",{"2":{"151":1}}],["dry",{"2":{"151":1}}],["dry原則との関係",{"0":{"151":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1}}],["dba",{"2":{"138":1,"139":1}}],["data",{"2":{"89":4,"90":4}}],["diコンテナ",{"2":{"162":1,"168":1}}],["di",{"2":{"61":1}}],["dipにおけるoopとfpの比較",{"2":{"67":1}}],["dip",{"0":{"61":1,"129":1,"168":1},"1":{"62":1,"63":1,"64":1,"130":1,"131":1},"2":{"12":1,"14":1,"61":1,"67":1,"92":1,"93":1,"132":1,"162":1}}],["dev",{"2":{"174":1}}],["development",{"2":{"174":1}}],["design",{"2":{"174":1}}],["describe",{"2":{"55":1}}],["dependency",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"61":1}}],["l",{"2":{"169":1}}],["length",{"2":{"59":6}}],["liskov",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1},"2":{"73":1}}],["lspのリスクを低減できます",{"2":{"76":1}}],["lsp違反の危険",{"2":{"76":1}}],["lsp違反を事前に防ぎやすくなっています",{"2":{"75":1}}],["lspにおけるoopとfpの比較",{"2":{"67":1}}],["lsp",{"0":{"73":1,"123":1,"166":1},"1":{"74":1,"75":1,"76":1,"124":1,"125":1},"2":{"12":1,"14":1,"67":1,"73":1,"92":1,"93":1,"162":1}}],["logs",{"2":{"63":1}}],["logger",{"2":{"62":6,"63":7,"157":10,"158":5}}],["log",{"2":{"4":1,"6":1,"9":2,"19":4,"24":4,"30":1,"35":1,"53":2,"59":1,"62":4,"63":1,"70":3,"74":1,"79":5,"81":5,"84":6,"86":6,"89":1,"90":1,"102":3,"107":3,"110":1,"118":3,"125":3,"131":1,"142":3,"145":3,"148":3,"154":9,"157":9}}],["loading",{"2":{"3":1,"8":1,"18":1,"23":1,"27":1,"29":1,"34":1,"40":1,"52":1,"58":1,"101":1,"106":1,"109":1,"117":1,"121":1,"124":1,"127":1,"130":1,"134":1,"139":1,"141":1,"147":1,"153":1,"156":1,"160":1}}],["ood",{"2":{"174":1}}],["oopは構造",{"2":{"94":1}}],["oopの拡張例",{"0":{"83":1}}],["oopの例",{"2":{"78":1,"89":1}}],["oopでは",{"2":{"77":1}}],["oopでは継承の安全性が問われるのに対し",{"2":{"73":1}}],["oopではインターフェースの肥大化を避け",{"2":{"72":1}}],["oopではインターフェースの分割と実装によって",{"2":{"69":1}}],["oopではインターフェースと依存性注入",{"2":{"61":1}}],["oopとfpは対立するものではなく",{"2":{"96":1}}],["oopとfpでは異なるアプローチを取りますが",{"2":{"86":1}}],["oopとfpそれぞれにおけるocpの捉え方と実装スタイルを比較します",{"2":{"77":1}}],["oopとfpの両方に関心があるソフトウェア開発者",{"2":{"68":1}}],["oopと関数型における設計原則のまとめ",{"0":{"92":1},"1":{"93":1,"94":1,"95":1,"96":1},"2":{"14":1}}],["oopと関数型の比較",{"0":{"14":1,"65":1},"1":{"66":1,"67":1,"68":1}}],["oopにおける実践",{"2":{"93":1}}],["oopにおけるsrpの実装例",{"0":{"89":1}}],["oopにおけるocpの実装例",{"0":{"78":1},"1":{"79":1}}],["oopにおけるlspの実装例",{"0":{"74":1}}],["oopにおけるispの実装例",{"0":{"70":1}}],["oopにおける原則",{"2":{"66":1}}],["oopにおけるdipの典型例",{"0":{"62":1}}],["oop",{"2":{"64":1,"72":1,"76":1,"87":1,"88":1,"91":1,"92":1}}],["of",{"2":{"174":1}}],["o",{"2":{"169":1}}],["one",{"2":{"137":1}}],["only",{"2":{"137":1}}],["order",{"2":{"118":1,"122":7,"125":11,"131":5}}],["orderservice",{"2":{"2":1,"4":1,"5":1,"6":1,"9":1,"10":1,"131":1}}],["open",{"0":{"97":1},"1":{"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1},"2":{"77":1}}],["ostrich",{"2":{"75":4}}],["oldheight",{"2":{"48":1}}],["ok",{"2":{"46":1,"74":1}}],["ocpの適用が容易になる",{"2":{"112":1}}],["ocpの達成方法",{"2":{"87":1}}],["ocpにおける比較まとめ",{"0":{"87":1}}],["ocpにおけるoopとfpの比較",{"2":{"67":1}}],["ocpに近い形式を保つことができます",{"2":{"84":1}}],["ocp",{"0":{"77":1,"123":1,"165":1},"1":{"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"124":1,"125":1},"2":{"12":1,"14":1,"67":1,"77":1,"92":1,"93":1,"104":1,"108":1,"132":1,"162":1}}],["software",{"2":{"174":2}}],["solid",{"2":{"174":2}}],["solidなコードのメリット",{"0":{"173":1}}],["solid原則は",{"2":{"169":1,"170":1}}],["solid原則とは",{"0":{"169":1},"1":{"170":1,"171":1,"172":1,"173":1,"174":1}}],["solid原則",{"0":{"163":1},"1":{"164":1,"165":1,"166":1,"167":1,"168":1}}],["solid原則の関連図",{"0":{"134":1}}],["solid原則に準拠したリファクタリング",{"0":{"119":1},"1":{"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1}}],["solid原則に代表されるオブジェクト指向設計と",{"2":{"65":1}}],["solid原則ケーススタディ",{"0":{"114":1},"1":{"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1}}],["solid原則を適用することで",{"2":{"171":1}}],["solid原則を適用するメリット",{"0":{"171":1},"1":{"172":1,"173":1}}],["solid原則を関数型でどう適用できるか知りたい人",{"2":{"68":1}}],["solid原則を具体例と共に解説し",{"2":{"11":1}}],["solid原則間の関連性",{"0":{"133":1},"1":{"134":1},"2":{"12":1}}],["solidの原則とは",{"2":{"11":1}}],["switch文など",{"2":{"162":1,"165":1}}],["saveable",{"2":{"161":1}}],["saver",{"2":{"150":2,"158":2}}],["save",{"2":{"148":1,"150":1,"154":1,"157":1,"158":1,"161":1}}],["savetofile",{"2":{"142":1,"143":1,"145":1}}],["savetodatabase",{"2":{"139":1}}],["should",{"2":{"137":1}}],["shapes",{"2":{"78":2,"79":3,"80":2,"81":3,"84":3,"86":3}}],["shape",{"2":{"59":5,"78":7,"79":3,"80":7,"81":5,"83":1,"84":3,"85":2,"86":5}}],["smsnotifier",{"2":{"107":1,"110":1}}],["sms",{"2":{"102":1}}],["s",{"2":{"80":7,"85":8,"169":1,"174":1}}],["single",{"0":{"135":1},"1":{"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1},"2":{"88":1,"136":1}}],["side",{"2":{"78":3,"80":2,"81":1,"85":2,"86":1}}],["simpleprinter",{"2":{"19":1,"20":1,"21":1,"24":1,"70":1}}],["structure",{"2":{"174":1}}],["stringify",{"2":{"89":1,"90":1}}],["string",{"2":{"62":2,"63":1,"75":2,"78":1,"89":2,"90":2,"102":2,"107":5,"110":1,"118":1,"122":1,"142":2,"145":2,"148":2,"154":1,"157":2}}],["started",{"2":{"62":1,"63":1}}],["squrare",{"2":{"53":2,"55":1}}],["square",{"2":{"36":1,"39":2,"55":2,"59":5,"78":2,"79":2,"80":2,"81":2,"84":2,"85":2,"86":2}}],["sum",{"2":{"78":2,"80":2}}],["super",{"2":{"49":2,"53":4}}],["substitution",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1},"2":{"73":1}}],["sender",{"2":{"150":2,"158":2}}],["sendemail",{"2":{"139":1,"142":1,"143":1,"145":1}}],["sendconfirmationemail",{"2":{"118":1,"122":1,"131":1}}],["send",{"2":{"107":5,"110":1,"148":1,"150":1,"154":1,"157":1,"158":1,"161":1}}],["service",{"2":{"104":3,"110":2}}],["setlength",{"2":{"59":2}}],["sethight",{"2":{"49":1}}],["setheight",{"2":{"38":1,"53":5,"59":2}}],["setwidth",{"2":{"38":1,"49":1,"53":5,"59":2}}],["segregation",{"0":{"15":1},"1":{"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"2":{"69":1}}],["sparrow",{"2":{"30":1,"35":1,"74":4}}],["scanning",{"2":{"70":1}}],["scanner",{"2":{"24":2,"70":2}}],["scan",{"2":{"19":3,"21":1,"24":2,"70":2,"71":4}}],["srp違反",{"2":{"139":1}}],["srp違反の構造",{"0":{"139":1},"1":{"141":1,"142":1}}],["srpにおける比較まとめ",{"0":{"91":1}}],["srpにおけるoopとfpの比較",{"2":{"67":1}}],["srp",{"0":{"88":1,"120":1,"164":1},"1":{"89":1,"90":1,"91":1,"121":1,"122":1},"2":{"12":1,"14":1,"67":1,"88":1,"92":1,"93":1,"132":1,"151":1,"162":1}}],["単一のインターフェース",{"2":{"161":1}}],["単一の責任を持つべき",{"2":{"136":1}}],["単一責任",{"2":{"162":1}}],["単一責任に違反している例",{"0":{"140":1},"1":{"141":1,"142":1,"143":1}}],["単一責任の原則に違反しています",{"2":{"143":1}}],["単一責任の原則にも違反している",{"2":{"103":1}}],["単一責任の原則は",{"2":{"137":1,"144":1}}],["単一責任の原則とは",{"0":{"136":1}}],["単一責任の原則を守ることで",{"2":{"133":1}}],["単一責任の原則",{"0":{"88":1,"120":1,"135":1,"164":1},"1":{"89":1,"90":1,"91":1,"121":1,"122":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1},"2":{"12":1,"14":1,"67":1,"88":1,"93":1,"112":1,"136":1,"151":1,"169":1}}],["単位",{"2":{"91":1}}],["単体テスト時に支払い部分を差し替えられない",{"2":{"5":1}}],["👍",{"0":{"173":1}}],["👎",{"0":{"172":1}}],["🔗solid原則間の関連性",{"2":{"169":1}}],["👈",{"2":{"32":1,"39":1,"46":2,"48":1,"49":1,"55":1,"84":1}}],["🛠",{"0":{"13":1}}],["🔎",{"0":{"12":1,"139":1},"1":{"141":1,"142":1}}],["📘solidの原則",{"0":{"11":1},"1":{"12":1,"13":1,"14":1}}],["実はいくつかの表現方法があります",{"2":{"136":1}}],["実務で役立つヒント",{"0":{"111":1}}],["実行例",{"0":{"150":1,"158":1}}],["実行結果",{"0":{"54":1,"56":1,"60":1}}],["実行時に現れる",{"2":{"76":1}}],["実行時にエラー",{"2":{"21":1}}],["実行時エラーの原因となり",{"2":{"21":1}}],["実際には両者を併用するミックススタイルが現代的であり",{"2":{"95":1}}],["実際には",{"2":{"32":1}}],["実装に依存せず",{"2":{"169":1}}],["実装ではなく抽象",{"2":{"162":1,"168":1}}],["実装ではなく抽象に依存しているか",{"2":{"162":1,"168":1}}],["実装上の理由で変更を要求する人々",{"2":{"138":1}}],["実装",{"2":{"87":1}}],["実装方法",{"2":{"72":1}}],["実装例を比較したい技術者や学生",{"2":{"68":1}}],["実装クラスが必要なものを選択",{"2":{"72":1}}],["実装クラスの追加で対応",{"2":{"64":1}}],["実装クラスに関係ないメソッドがあったしても実装しなければいけない",{"2":{"16":1}}],["実装チェックリスト",{"2":{"12":1}}],["実装の詳細が",{"2":{"1":1}}],["実践的な理解を促すことを目的としています",{"2":{"11":1}}],["は1種類に限定されているか",{"2":{"162":1,"164":1}}],["は次のように述べています",{"2":{"137":1}}],["は実装しない",{"2":{"35":1,"74":1}}],["は実装の詳細に依存してはならない",{"2":{"1":1}}],["は鳥ではあるが",{"2":{"31":1}}],["はスキャンもfaxもできないのに",{"2":{"20":1}}],["は",{"2":{"10":1,"61":1,"62":1,"63":1,"69":1,"73":1,"77":1,"88":1,"136":2}}],["✅",{"0":{"10":1,"108":1,"120":1,"123":1,"126":1,"129":1,"132":1,"155":1,"163":1},"1":{"109":1,"110":1,"121":1,"122":1,"124":1,"125":1,"127":1,"128":1,"130":1,"131":1,"156":1,"157":1,"158":1,"160":1,"161":1,"164":1,"165":1,"166":1,"167":1,"168":1},"2":{"12":1,"74":1,"169":1}}],["items",{"2":{"118":1,"122":1}}],["if文",{"2":{"162":1,"165":1}}],["if",{"2":{"102":3,"118":2}}],["id",{"2":{"89":1,"90":1}}],["i",{"2":{"75":1,"169":1}}],["isbird",{"2":{"75":2}}],["is",{"2":{"26":1,"75":1}}],["ispにおけるoopとfpの比較",{"2":{"67":1}}],["isp",{"0":{"69":1,"126":1,"167":1},"1":{"70":1,"71":1,"72":1,"127":1,"128":1},"2":{"12":1,"14":1,"67":1,"69":1,"92":1,"93":1,"132":1,"161":1,"162":1}}],["index",{"2":{"55":1}}],["instanceof",{"2":{"36":1}}],["interface",{"0":{"15":1},"1":{"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"2":{"24":2,"69":1,"70":1,"78":1,"161":2}}],["inversion",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"61":1}}],["implements",{"2":{"9":2,"19":2,"24":2,"35":1,"59":1,"62":1,"70":2,"74":1,"78":2,"83":1,"107":3,"110":1,"125":3,"128":2}}],["解決策",{"0":{"7":1,"22":1,"33":1,"57":1,"105":1,"146":1},"1":{"8":1,"9":1,"10":1,"23":1,"24":1,"34":1,"35":1,"58":1,"59":1,"60":1,"106":1,"107":1,"108":1,"109":1,"110":1,"147":1,"148":1}}],["側で直接paypalpaymentに書き換える必要がある",{"2":{"6":1}}],["問題点",{"0":{"5":1,"20":1,"31":1,"103":1,"143":1},"1":{"8":1,"9":1,"23":1,"24":1,"34":1,"35":1,"38":1,"39":1,"106":1,"107":1,"147":1,"148":1}}],["❌",{"0":{"5":1,"20":1,"31":1,"103":1,"152":1},"1":{"8":1,"9":1,"23":1,"24":1,"34":1,"35":1,"38":1,"39":1,"106":1,"107":1,"153":1,"154":1},"2":{"74":1}}],["t",{"2":{"151":1}}],["txt`",{"2":{"142":1,"145":1,"148":1,"154":1,"157":1}}],["title",{"2":{"142":4,"145":4,"148":4,"154":3,"157":4}}],["triangle",{"2":{"83":2,"84":2,"85":2,"86":2}}],["typescriptで学ぶsolid原則",{"2":{"174":1}}],["typescriptでは",{"2":{"159":1}}],["typescript",{"0":{"159":1},"1":{"160":1,"161":1},"2":{"174":1}}],["type",{"2":{"71":1,"75":2,"80":1,"102":4}}],["tyepscriptコード例",{"0":{"50":1},"1":{"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1}}],["to=$",{"2":{"145":1}}],["to",{"2":{"137":1,"174":2}}],["totalprice",{"2":{"118":2,"122":1,"131":1}}],["totalarea",{"2":{"78":2,"79":1,"80":1,"81":1,"84":1,"86":1}}],["total",{"2":{"56":1,"79":2,"81":2,"84":2,"86":2}}],["tobe",{"2":{"39":2,"55":2}}],["testlogger",{"2":{"63":1}}],["testsuites",{"2":{"56":1}}],["test",{"2":{"39":3,"55":3}}],["the",{"2":{"174":1}}],["throwなど",{"2":{"162":1,"166":1}}],["throw",{"2":{"19":2}}],["this",{"2":{"4":1,"9":1,"48":3,"49":1,"53":4,"59":7,"62":1,"78":4,"83":2,"107":1,"118":1,"125":1,"131":3,"142":4,"145":5,"154":3,"157":3}}],["tstype",{"2":{"63":1,"71":1,"75":1,"85":1}}],["ts",{"2":{"53":1,"78":1,"80":1,"83":1,"89":1,"90":1,"145":1}}],["tssetwidth",{"2":{"48":1,"49":1}}],["tsmethoda",{"2":{"45":1,"46":1}}],["tsdescribe",{"2":{"39":1}}],["tsexport",{"2":{"38":1}}],["tsimport",{"2":{"55":1}}],["tsif",{"2":{"36":1}}],["tsinterface",{"2":{"9":1,"19":1,"24":1,"35":1,"59":1,"62":1,"70":1,"74":1,"107":1,"125":1,"128":1,"161":1}}],["tsfunction",{"2":{"32":1,"74":1}}],["tsconst",{"2":{"21":1,"63":1,"79":1,"81":1,"84":1,"86":1,"104":1,"150":1,"158":1}}],["tsclass",{"2":{"4":1,"6":1,"30":1,"102":1,"110":1,"118":1,"122":1,"131":1,"139":1,"142":1,"148":1,"154":1,"157":1}}],["n本文",{"2":{"145":1}}],["n$",{"2":{"142":1,"145":2,"148":1}}],["note",{"2":{"136":1}}],["notifiers",{"2":{"107":2}}],["notifier",{"2":{"107":7,"110":1}}],["notificationserviceの中身を書き換える必要がある",{"2":{"103":1}}],["notificationservice",{"2":{"102":1,"104":1,"107":1,"110":1}}],["notifyall",{"2":{"107":1,"110":1}}],["notify",{"2":{"102":1,"104":2}}],["ng",{"2":{"46":1,"49":1}}],["nubmer",{"2":{"45":1,"46":1,"48":1,"49":1}}],["number>",{"2":{"80":1,"85":1}}],["number",{"2":{"4":2,"6":1,"9":4,"38":3,"53":8,"59":9,"78":6,"80":4,"83":3,"85":4,"128":6}}],["new",{"2":{"4":1,"19":2,"21":1,"32":1,"39":2,"53":2,"55":2,"59":2,"62":2,"74":2,"79":2,"84":3,"89":2,"104":1,"110":4,"150":4,"158":5}}],["=1人のアクター",{"2":{"136":1}}],["===",{"2":{"48":2,"49":1,"75":1,"102":3,"118":2}}],["=>",{"2":{"38":1,"39":3,"53":2,"55":3,"59":2,"63":4,"71":4,"75":3,"78":1,"79":1,"80":6,"81":1,"84":1,"85":4,"86":1,"90":2,"107":1}}],["=",{"2":{"4":1,"21":1,"26":1,"32":1,"38":1,"39":2,"48":1,"53":6,"55":2,"59":10,"62":1,"63":4,"71":4,"74":2,"75":5,"78":2,"79":1,"80":4,"81":1,"83":1,"84":1,"85":2,"86":1,"89":4,"90":4,"104":1,"110":1,"118":3,"122":3,"131":1,"145":2,"150":4,"158":5}}],["`送信",{"2":{"154":1,"157":1}}],["`保存",{"2":{"154":1,"157":1}}],["`新メール仕様で送信",{"2":{"145":1}}],["`件名",{"2":{"145":1}}],["`ファイル保存",{"2":{"142":1,"145":1,"148":1}}],["`印刷",{"2":{"142":1,"145":1,"148":1,"154":1,"157":1}}],["`ポイント付与",{"2":{"131":1}}],["`fax送信",{"2":{"110":1}}],["`プッシュ通知",{"2":{"102":1,"107":1}}],["`sms送信",{"2":{"102":1,"107":1}}],["`メール送信",{"2":{"102":1,"107":1,"142":1,"148":1}}],["`report",{"2":{"89":1,"90":1}}],["`$",{"2":{"81":1,"86":1}}],["`paypalで$",{"2":{"6":1,"9":1}}],["`",{"2":{"4":1,"6":1,"9":2,"81":1,"86":1,"89":1,"90":1,"102":3,"107":3,"110":1,"142":2,"145":3,"148":2,"154":4,"157":4}}],["`クレジットカードで$",{"2":{"4":1,"9":1}}],["円支払いました",{"2":{"4":1,"6":1,"9":2}}],["craftsman",{"2":{"174":1}}],["credit",{"2":{"118":1}}],["creditcardpayment",{"2":{"2":1,"4":2,"5":1,"9":1,"125":1}}],["createsimpleprinter",{"2":{"71":1}}],["createmultifunctionprinter",{"2":{"71":1}}],["change",{"2":{"137":1}}],["c",{"2":{"136":1,"137":1,"169":1,"174":3}}],["com",{"2":{"145":1}}],["completeorder",{"2":{"131":1}}],["content",{"2":{"89":1,"90":1,"142":2,"145":3,"148":2}}],["const",{"2":{"32":1,"38":1,"39":2,"53":2,"55":2,"59":4,"62":1,"63":2,"71":2,"74":2,"75":2,"80":3,"85":1,"89":4,"90":4,"110":1,"131":1,"145":2,"150":3,"158":4}}],["constructor",{"2":{"9":1,"59":2,"62":1,"78":2,"83":1,"107":1,"125":1,"131":1,"142":1,"145":1,"148":1,"157":4}}],["consolelogger",{"2":{"62":3,"63":2}}],["console",{"2":{"4":1,"6":1,"9":2,"19":4,"24":4,"30":1,"35":1,"53":2,"59":1,"62":1,"63":1,"70":3,"74":1,"79":2,"81":2,"84":2,"86":2,"89":1,"90":1,"102":3,"107":3,"110":1,"118":3,"125":3,"131":1,"142":3,"145":3,"148":3,"154":4,"157":4}}],["caution",{"2":{"136":1}}],["calculatepoints",{"2":{"118":1,"122":1,"128":3,"131":1}}],["cannot",{"2":{"75":1}}],["circle",{"2":{"78":2,"79":2,"80":2,"81":2,"84":2,"85":2,"86":2}}],["clean",{"2":{"174":1}}],["closed",{"0":{"97":1},"1":{"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1},"2":{"77":1}}],["class",{"2":{"4":1,"9":3,"19":2,"24":2,"30":2,"35":3,"53":2,"59":2,"62":2,"70":2,"74":3,"78":2,"83":1,"89":2,"107":4,"122":3,"125":4,"128":2,"137":1,"145":1,"148":3,"157":4}}],["void",{"2":{"4":2,"6":1,"9":4,"19":3,"24":3,"30":1,"35":2,"62":2,"63":1,"70":5,"71":2,"74":3,"89":1,"90":1,"107":4,"110":1,"125":4,"161":3}}],["patterns",{"2":{"174":1}}],["paypal処理",{"2":{"125":1}}],["paypalpayment",{"2":{"6":1,"9":1,"125":1}}],["paymentprocessor",{"2":{"122":1,"125":1,"131":3}}],["paymenttype",{"2":{"118":3,"122":1}}],["paymentmethod",{"2":{"9":4,"10":1,"125":7}}],["payment",{"2":{"4":2,"9":2}}],["pay",{"2":{"4":2,"6":1,"9":4}}],["public",{"2":{"148":2,"157":1}}],["pushnotifier",{"2":{"107":1}}],["push",{"2":{"63":1,"102":1}}],["pt`",{"2":{"131":1}}],["points",{"2":{"131":2}}],["pointscalculator",{"2":{"122":1,"128":3,"131":3}}],["pi",{"2":{"78":1,"80":1,"85":1}}],["penguin",{"2":{"28":1,"30":1,"31":2,"32":4,"35":1,"74":4}}],["practices",{"2":{"174":1}}],["premiumcustomerpoints",{"2":{"128":1}}],["process",{"2":{"125":5}}],["processpayment",{"2":{"118":1,"122":1,"125":1,"131":1}}],["processorder",{"2":{"4":1,"9":1}}],["printable",{"2":{"161":1}}],["printreport",{"2":{"90":2}}],["printing",{"2":{"70":2}}],["printer",{"2":{"21":2,"24":3,"70":3,"89":2,"148":1,"150":3,"157":1,"158":3}}],["print",{"2":{"19":3,"24":3,"70":3,"71":7,"89":2,"142":1,"143":1,"145":1,"148":1,"150":1,"154":1,"157":1,"158":1,"161":1}}],["principles",{"2":{"174":3}}],["principle",{"0":{"0":1,"15":1,"25":1,"97":1,"135":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1},"2":{"61":1,"69":1,"73":1,"77":1,"88":1,"136":1}}],["private",{"2":{"4":1,"9":1,"59":3,"62":1,"78":2,"83":2,"107":1,"125":1,"131":3,"142":2,"145":2,"154":1,"157":3}}],["に特化しているか",{"2":{"162":1,"167":1}}],["にもつながります",{"2":{"161":1}}],["にも影響する",{"2":{"145":1}}],["にも関係します",{"2":{"144":1}}],["によって提唱された概念ですが",{"2":{"136":1}}],["により",{"2":{"75":1}}],["に対してのみ責任を持つ",{"2":{"136":1}}],["に対して責任を持つべき",{"2":{"136":1,"169":1}}],["に対して責任を持つべきという原則です",{"2":{"136":1}}],["に違反している状態",{"2":{"104":1}}],["における設計原則",{"2":{"92":1}}],["におけるsrpの捉え方と実装方法を比較します",{"2":{"88":1}}],["におけるoopとfpの比較",{"0":{"61":1,"69":1,"73":1,"77":1,"88":1},"1":{"62":1,"63":1,"64":1,"70":1,"71":1,"72":1,"74":1,"75":1,"76":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"89":1,"90":1,"91":1},"2":{"14":5}}],["に直接依存していません",{"2":{"62":1}}],["に直接依存している場合を考えます",{"2":{"2":1}}],["に依存しているか",{"2":{"162":1,"168":1}}],["に依存できるようになります",{"2":{"24":1}}],["に依存すべきである",{"2":{"1":1}}],["に依存すべき",{"2":{"1":1}}],["に強く依存しており",{"2":{"5":1}}],["が他の処理",{"2":{"145":1}}],["がsrpの応用となります",{"2":{"90":1}}],["が",{"2":{"2":1,"5":1,"32":1,"136":1}}],["抽象クラス",{"2":{"162":1,"168":1}}],["抽象の乱用",{"2":{"87":1}}],["抽象化手段",{"2":{"76":1}}],["抽象化の単位",{"2":{"64":1}}],["抽象と具象のバランス",{"2":{"64":1}}],["抽象に依存することで",{"2":{"112":1}}],["抽象に依存する",{"0":{"7":1},"1":{"8":1,"9":1,"10":1}}],["抽象",{"2":{"1":3,"111":1,"162":1,"165":1}}]],"serializationVersion":2}';export{i as default};
