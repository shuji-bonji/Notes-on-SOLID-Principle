import{_ as r,c as d,o as e,a2 as a}from"./chunks/framework.M5Qft685.js";const n=JSON.parse('{"title":"各原則のチェックリスト（基本 + 詳細）","description":"","frontmatter":{},"headers":[],"relativePath":"solid-checklist.md","filePath":"solid-checklist.md"}'),o={name:"solid-checklist.md"};function s(i,t,b,l,c,h){return e(),d("div",null,t[0]||(t[0]=[a('<h1 id="各原則のチェックリスト-基本-詳細" tabindex="-1">各原則のチェックリスト（基本 + 詳細） <a class="header-anchor" href="#各原則のチェックリスト-基本-詳細" aria-label="Permalink to &quot;各原則のチェックリスト（基本 + 詳細）&quot;">​</a></h1><table tabindex="0"><thead><tr><th>原則</th><th>基本項目</th><th>詳細項目</th></tr></thead><tbody><tr><td>単一責任<br>（SRP）</td><td>□ このクラスは1つの理由でしか変更されないか？<br>□ 責務が複数混在していないか？</td><td>□ クラスやモジュールに複数の役割が混在していないか？<br>□ テストしやすいように、責務が明確に分離されているか？<br>□ そのクラスの「変更理由」は1種類に限定されているか？</td></tr><tr><td>オープンクローズド<br>（OCP）</td><td>□ 新しい機能追加の際に既存クラスを修正していないか？<br>□ ポリモーフィズムや拡張ポイントを利用しているか？</td><td>□ 拡張のために既存のコード（if文・switch文など）を頻繁に修正していないか？<br>□ 新しい振る舞いを既存コードの変更なしに追加できる構成か？<br>□ 抽象（インターフェース・基底クラス）を利用して柔軟に設計されているか？</td></tr><tr><td>リスコフの置換原則<br>（LSP）</td><td>□ 派生クラスは親クラスとして振る舞えるか？<br>□ クライアントコードに影響なく置き換えられるか？</td><td>□ サブクラスが親クラスの期待する振る舞いをすべて満たしているか？<br>□ サブクラスで例外的な動作（throwなど）をしていないか？<br>□ クライアントコードがサブクラスと親クラスを区別せず使えているか？</td></tr><tr><td>インターフェース分離<br>（ISP）</td><td>□ インターフェースは肥大化していないか？<br>□ クライアントが不要なメソッドに依存していないか？</td><td>□ インターフェースが1つの関心事（責任）に特化しているか？<br>□ 不要なメソッドの空実装や例外的実装が発生していないか？<br>□ 利用側に応じた適切な粒度のインターフェースが提供されているか？</td></tr><tr><td>依存性逆転<br>（DIP）</td><td>□ 実装ではなく抽象に依存しているか？<br>□ 上位モジュールが下位モジュールに依存していないか？</td><td>□ 高レベルモジュールが低レベルの具体実装に依存していないか？<br>□ 実装ではなく抽象（インターフェース、抽象クラス）に依存しているか？<br>□ コンストラクタ注入、DIコンテナ、ファクトリなどで依存関係を外部化しているか？</td></tr></tbody></table><p><a href="./solid-checklist.text.html">テキスト版はこちら</a></p>',3)]))}const p=r(o,[["render",s]]);export{n as __pageData,p as default};
