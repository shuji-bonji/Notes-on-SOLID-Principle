import{_ as l,c as i,o as e,a2 as t}from"./chunks/framework.M5Qft685.js";const P=JSON.parse('{"title":"実装チェックリスト","description":"","frontmatter":{},"headers":[],"relativePath":"solid-checklist.text.md","filePath":"solid-checklist.text.md"}'),r={name:"solid-checklist.text.md"};function o(h,a,s,d,n,c){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="実装チェックリスト" tabindex="-1">実装チェックリスト <a class="header-anchor" href="#実装チェックリスト" aria-label="Permalink to &quot;実装チェックリスト&quot;">​</a></h1><h2 id="各原則のチェックリスト-コードレビュー時の確認用" tabindex="-1">各原則のチェックリスト（コードレビュー時の確認用） <a class="header-anchor" href="#各原則のチェックリスト-コードレビュー時の確認用" aria-label="Permalink to &quot;各原則のチェックリスト（コードレビュー時の確認用）&quot;">​</a></h2><h3 id="☑︎-単一責任の原則-srp" tabindex="-1">☑︎ 単一責任の原則（SRP） <a class="header-anchor" href="#☑︎-単一責任の原則-srp" aria-label="Permalink to &quot;☑︎ 単一責任の原則（SRP）&quot;">​</a></h3><ul><li>[ ] このクラスは1つの理由でしか変更されないか？</li><li>[ ] 責務が複数混在していないか？</li></ul><h3 id="☑︎-オープンクローズドの原則-ocp" tabindex="-1">☑︎ オープンクローズドの原則（OCP） <a class="header-anchor" href="#☑︎-オープンクローズドの原則-ocp" aria-label="Permalink to &quot;☑︎ オープンクローズドの原則（OCP）&quot;">​</a></h3><ul><li>[ ] 新しい機能追加の際に既存クラスを修正していないか？</li><li>[ ] ポリモーフィズムや拡張ポイントを利用しているか？</li></ul><h3 id="☑︎-リスコフの置換原則-lsp" tabindex="-1">☑︎ リスコフの置換原則（LSP） <a class="header-anchor" href="#☑︎-リスコフの置換原則-lsp" aria-label="Permalink to &quot;☑︎ リスコフの置換原則（LSP）&quot;">​</a></h3><ul><li>[ ] 派生クラスは親クラスとして振る舞えるか？</li><li>[ ] クライアントコードに影響なく置き換えられるか？</li></ul><h3 id="☑︎-インターフェース分離の原則-isp" tabindex="-1">☑︎ インターフェース分離の原則（ISP） <a class="header-anchor" href="#☑︎-インターフェース分離の原則-isp" aria-label="Permalink to &quot;☑︎ インターフェース分離の原則（ISP）&quot;">​</a></h3><ul><li>[ ] インターフェースは肥大化していないか？</li><li>[ ] クライアントが不要なメソッドに依存していないか？</li></ul><h3 id="☑︎-依存性逆転の原則-dip" tabindex="-1">☑︎ 依存性逆転の原則（DIP） <a class="header-anchor" href="#☑︎-依存性逆転の原則-dip" aria-label="Permalink to &quot;☑︎ 依存性逆転の原則（DIP）&quot;">​</a></h3><ul><li>[ ] 実装ではなく抽象に依存しているか？</li><li>[ ] 上位モジュールが下位モジュールに依存していないか？</li></ul><p>各項目は最小限の基本観点を押さえています。<br> より深いレビューや設計判断を行いたい場合は、以下の詳細チェックリストも参考にしてください.</p><h2 id="詳細チェック" tabindex="-1">詳細チェック <a class="header-anchor" href="#詳細チェック" aria-label="Permalink to &quot;詳細チェック&quot;">​</a></h2><h3 id="🔍-単一責任の原則-srp-詳細チェック" tabindex="-1">🔍 単一責任の原則（SRP）: 詳細チェック <a class="header-anchor" href="#🔍-単一責任の原則-srp-詳細チェック" aria-label="Permalink to &quot;🔍 単一責任の原則（SRP）: 詳細チェック&quot;">​</a></h3><ul><li>[ ] クラスやモジュールに複数の役割が混在していないか？</li><li>[ ] テストしやすいように、責務が明確に分離されているか？</li><li>[ ] そのクラスの「変更理由」は1種類に限定されているか？</li></ul><h3 id="🔍-オープンクローズドの原則-ocp-詳細チェック" tabindex="-1">🔍 オープンクローズドの原則（OCP）: 詳細チェック <a class="header-anchor" href="#🔍-オープンクローズドの原則-ocp-詳細チェック" aria-label="Permalink to &quot;🔍 オープンクローズドの原則（OCP）: 詳細チェック&quot;">​</a></h3><ul><li>[ ] 拡張のために既存のコード（if文・switch文など）を頻繁に修正していないか？</li><li>[ ] 新しい振る舞いを既存コードの変更なしに追加できる構成か？</li><li>[ ] 抽象（インターフェース・基底クラス）を利用して柔軟に設計されているか？</li></ul><h3 id="🔍-リスコフの置換原則-lsp-詳細チェック" tabindex="-1">🔍 リスコフの置換原則（LSP）: 詳細チェック <a class="header-anchor" href="#🔍-リスコフの置換原則-lsp-詳細チェック" aria-label="Permalink to &quot;🔍 リスコフの置換原則（LSP）: 詳細チェック&quot;">​</a></h3><ul><li>[ ] サブクラスが親クラスの期待する振る舞いをすべて満たしているか？</li><li>[ ] サブクラスで例外的な動作（throwなど）をしていないか？</li><li>[ ] クライアントコードがサブクラスと親クラスを区別せず使えているか？</li></ul><h3 id="🔍-インターフェース分離の原則-isp-詳細チェック" tabindex="-1">🔍 インターフェース分離の原則（ISP）: 詳細チェック <a class="header-anchor" href="#🔍-インターフェース分離の原則-isp-詳細チェック" aria-label="Permalink to &quot;🔍 インターフェース分離の原則（ISP）: 詳細チェック&quot;">​</a></h3><ul><li>[ ] インターフェースが1つの関心事（責任）に特化しているか？</li><li>[ ] 不要なメソッドの空実装や例外的実装が発生していないか？</li><li>[ ] 利用側に応じた適切な粒度のインターフェースが提供されているか？</li></ul><h3 id="🔍-依存性逆転の原則-dip-詳細チェック" tabindex="-1">🔍 依存性逆転の原則（DIP）: 詳細チェック <a class="header-anchor" href="#🔍-依存性逆転の原則-dip-詳細チェック" aria-label="Permalink to &quot;🔍 依存性逆転の原則（DIP）: 詳細チェック&quot;">​</a></h3><ul><li>[ ] 高レベルモジュールが低レベルの具体実装に依存していないか？</li><li>[ ] 実装ではなく抽象（インターフェース、抽象クラス）に依存しているか？</li><li>[ ] コンストラクタ注入、DIコンテナ、ファクトリなどで依存関係を外部化しているか？</li></ul>',24)]))}const p=l(r,[["render",o]]);export{P as __pageData,p as default};
