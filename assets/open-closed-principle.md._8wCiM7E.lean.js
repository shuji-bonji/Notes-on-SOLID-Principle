import{_ as E,C as r,c as d,o as l,a2 as k,b as t,j as i,w as a,a as n,G as p,a3 as e}from"./chunks/framework.M5Qft685.js";const u=JSON.parse('{"title":"オープンクローズドの原則 (Open-Closed Principle)","description":"オープンクローズドの原則（OCP）を実例で学ぶ。拡張に開き修正に閉じた設計により、既存コードを変更せず新機能を追加する方法をTypeScriptで解説します。","frontmatter":{"description":"オープンクローズドの原則（OCP）を実例で学ぶ。拡張に開き修正に閉じた設計により、既存コードを変更せず新機能を追加する方法をTypeScriptで解説します。"},"headers":[],"relativePath":"open-closed-principle.md","filePath":"open-closed-principle.md"}'),g={name:"open-closed-principle.md"};function y(o,s,F,c,A,C){const h=r("Mermaid");return l(),d("div",null,[s[4]||(s[4]=k("",9)),(l(),t(e,null,{default:a(()=>[p(h,{id:"mermaid-54",class:"mermaid",graph:"classDiagram%0A%20%20class%20NotificationService%20%7B%0A%20%20%20%20%2Bnotify(type%3A%20string%2C%20message%3A%20string)%0A%20%20%7D%0A"})]),fallback:a(()=>s[0]||(s[0]=[n(" Loading... ")])),_:1})),s[5]||(s[5]=k("",10)),(l(),t(e,null,{default:a(()=>[p(h,{id:"mermaid-104",class:"mermaid",graph:"classDiagram%0A%20%20class%20Notifier%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bsend(message%3A%20string)%0A%20%20%7D%0A%0A%20%20class%20EmailNotifier%20%7B%0A%20%20%20%20%2Bsend(message%3A%20string)%0A%20%20%7D%0A%0A%20%20class%20SMSNotifier%20%7B%0A%20%20%20%20%2Bsend(message%3A%20string)%0A%20%20%7D%0A%0A%20%20class%20PushNotifier%20%7B%0A%20%20%20%20%2Bsend(message%3A%20string)%0A%20%20%7D%0A%0A%20%20class%20NotificationService%20%7B%0A%20%20%20%20-notifiers%3A%20Notifier%5B%5D%0A%20%20%20%20%2BnotifyAll(message%3A%20string)%0A%20%20%7D%0A%0A%20%20Notifier%20%3C%7C..%20EmailNotifier%0A%20%20Notifier%20%3C%7C..%20SMSNotifier%0A%20%20Notifier%20%3C%7C..%20PushNotifier%0A%20%20NotificationService%20--%3E%20Notifier%20%3A%20uses%0A"})]),fallback:a(()=>s[1]||(s[1]=[n(" Loading... ")])),_:1})),s[6]||(s[6]=k("",7)),(l(),t(e,null,{default:a(()=>[p(h,{id:"mermaid-136",class:"mermaid",graph:"classDiagram%0A%20%20class%20FaxNotifier%20%7B%0A%20%20%20%20%2Bsend(message%3A%20string)%0A%20%20%7D%0A%0A%20%20Notifier%20%3C%7C..%20FaxNotifier%0A"})]),fallback:a(()=>s[2]||(s[2]=[n(" Loading... ")])),_:1})),s[7]||(s[7]=k("",6)),(l(),t(e,null,{default:a(()=>[p(h,{id:"mermaid-174",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20S%5B%E5%8D%98%E4%B8%80%E8%B2%AC%E4%BB%BB%E3%81%AE%E5%8E%9F%E5%89%87%5D%20--%3E%20O%5B%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E3%83%89%E3%81%AE%E5%8E%9F%E5%89%87%5D%0A%20%20%20%20L%5B%E3%83%AA%E3%82%B9%E3%82%B3%E3%83%95%E3%81%AE%E7%BD%AE%E6%8F%9B%E5%8E%9F%E5%89%87%5D%20--%3E%20O%0A%20%20%20%20D%5B%E4%BE%9D%E5%AD%98%E6%80%A7%E9%80%86%E8%BB%A2%E3%81%AE%E5%8E%9F%E5%89%87%5D%20--%3E%20O%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E9%AB%98%E5%87%9D%E9%9B%86%22%0A%20%20%20%20%20%20%20%20S%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E6%8B%A1%E5%BC%B5%E6%80%A7%22%0A%20%20%20%20%20%20%20%20O%0A%20%20%20%20%20%20%20%20L%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22%E7%96%8E%E7%B5%90%E5%90%88%22%0A%20%20%20%20%20%20%20%20D%0A%20%20%20%20end%0A"})]),fallback:a(()=>s[3]||(s[3]=[n(" Loading... ")])),_:1})),s[8]||(s[8]=i("ul",null,[i("li",null,[i("strong",null,"単一責任の原則"),n(" は、責任を1つに絞ることで、変更理由を限定できる。これによりOCPの「既存コードを変更せずに拡張する」設計がしやすくなる。")]),i("li",null,[i("strong",null,"リスコフの置換原則"),n(" に従えば、サブタイプに置き換えても振る舞いが維持されるため、新しい実装の追加が安全に行える。OCPの前提として重要。")]),i("li",null,[i("strong",null,"依存性逆転の原則"),n(" により、具象クラスへの直接依存を避け、抽象（インターフェースなど）を通じて機能を切り替えることで、拡張しやすい構造を実現できる。")])],-1)),s[9]||(s[9]=i("h2",{id:"まとめ",tabindex:"-1"},[n("まとめ "),i("a",{class:"header-anchor",href:"#まとめ","aria-label":'Permalink to "まとめ"'},"​")],-1)),s[10]||(s[10]=i("p",null,"オープンクローズドの原則は、ソフトウェアの変更に対する柔軟性と安定性のバランスを実現します。 「拡張に開かれ、修正に閉じる」設計により、機能追加が容易で安全なコードベースを構築できます。",-1))])}const m=E(g,[["render",y]]);export{u as __pageData,m as default};
