import{_ as r,C as d,c as E,o as l,a2 as e,b as t,j as a,w as i,a as n,G as p,a3 as k}from"./chunks/framework.M5Qft685.js";const u=JSON.parse('{"title":"依存性逆転の原則 (Dependency Inversion Principle)","description":"依存性逆転の原則（DIP）は、モジュール間の依存関係を抽象に向けることで、拡張性と保守性を高める設計原則です。","frontmatter":{"description":"依存性逆転の原則（DIP）は、モジュール間の依存関係を抽象に向けることで、拡張性と保守性を高める設計原則です。"},"headers":[],"relativePath":"dependency-inversion-principle.md","filePath":"dependency-inversion-principle.md"}'),y={name:"dependency-inversion-principle.md"};function o(g,s,c,F,A,m){const h=d("Mermaid");return l(),E("div",null,[s[3]||(s[3]=e("",6)),(l(),t(k,null,{default:i(()=>[p(h,{id:"mermaid-27",class:"mermaid",graph:"classDiagram%0A%20%20class%20CreditCardPayment%20%7B%0A%20%20%20%20%2Bpay(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20class%20OrderService%20%7B%0A%20%20%20%20-payment%3A%20CreditCardPayment%0A%20%20%20%20%2BprocessOrder(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20OrderService%20--%3E%20CreditCardPayment%20%3A%20depends%20on%0A"})]),fallback:i(()=>s[0]||(s[0]=[n(" Loading... ")])),_:1})),s[4]||(s[4]=e("",8)),(l(),t(k,null,{default:i(()=>[p(h,{id:"mermaid-57",class:"mermaid",graph:"classDiagram%0A%20%20class%20PaymentMethod%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bpay(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20class%20CreditCardPayment%20%7B%0A%20%20%20%20%2Bpay(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20class%20PayPalPayment%20%7B%0A%20%20%20%20%2Bpay(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20class%20OrderService%20%7B%0A%20%20%20%20-payment%3A%20PaymentMethod%0A%20%20%20%20%2BprocessOrder(amount%3A%20number)%0A%20%20%7D%0A%0A%20%20PaymentMethod%20%3C%7C..%20CreditCardPayment%0A%20%20PaymentMethod%20%3C%7C..%20PayPalPayment%0A%20%20OrderService%20--%3E%20PaymentMethod%20%3A%20depends%20on%0A"})]),fallback:i(()=>s[1]||(s[1]=[n(" Loading... ")])),_:1})),s[5]||(s[5]=e("",6)),(l(),t(k,null,{default:i(()=>[p(h,{id:"mermaid-83",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20L%5B%E3%83%AA%E3%82%B9%E3%82%B3%E3%83%95%E3%81%AE%E7%BD%AE%E6%8F%9B%E5%8E%9F%E5%89%87%5D%20--%3E%20D%0A%20%20%20%20L%20--%3E%20O%0A%20%20%20%20D%5B%E4%BE%9D%E5%AD%98%E6%80%A7%E9%80%86%E8%BB%A2%E3%81%AE%E5%8E%9F%E5%89%87%5D%20--%3E%20O%5B%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E3%83%89%E3%81%AE%E5%8E%9F%E5%89%87%5D%0A%20%20%20%20subgraph%20%22%E7%96%8E%E7%B5%90%E5%90%88%22%0A%20%20%20%20%20%20%20%20D%0A%20%20%20%20end%0A%20%20%20%20subgraph%20%22%E6%8B%A1%E5%BC%B5%E6%80%A7%22%0A%20%20%20%20%20%20%20%20O%0A%20%20%20%20%20%20%20%20L%0A%20%20%20%20end%0A"})]),fallback:i(()=>s[2]||(s[2]=[n(" Loading... ")])),_:1})),s[6]||(s[6]=a("ul",null,[a("li",null,[a("strong",null,"オープンクローズドの原則"),n(" では、機能拡張時に既存コードを変更せずに済むことが重要ですが、DIPによって依存先を抽象化することで、その前提を作ることができます。")]),a("li",null,[a("strong",null,"リスコフの置換原則"),n(" を満たしていることで、DIPで注入された具体クラスが安全に置き換え可能となり、システムの安定性が保たれます。")])],-1))])}const B=r(y,[["render",o]]);export{u as __pageData,B as default};
