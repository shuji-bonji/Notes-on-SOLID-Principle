import{_ as i,c as l,o as a,a2 as t}from"./chunks/framework.M5Qft685.js";const f=JSON.parse('{"title":"SOLIDの原則","description":"","frontmatter":{"layout":"home","title":"SOLIDの原則","hero":{"name":"SOLIDの原則","text":"TypeScriptで学ぶSOLID設計原則","tagline":"具体例と共に理解を深める","image":{"src":"/images/solid.webp","alt":"SOLID Principles"},"actions":[{"theme":"brand","text":"SOLIDの原則とは？","link":"/solid-principles.md"}]}},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),o={name:"index.md"};function r(n,e,s,c,h,p){return a(),l("div",null,e[0]||(e[0]=[t('<p>このサイトは、SOLID原則を具体例と共に解説し、実践的な理解を促すことを目的としています。</p><h2 id="🔎-各原則の一覧" tabindex="-1">🔎 各原則の一覧 <a class="header-anchor" href="#🔎-各原則の一覧" aria-label="Permalink to &quot;🔎 各原則の一覧&quot;">​</a></h2><ul><li><a href="./single-responsibility-principle.html">単一責任の原則（SRP）</a></li><li><a href="./open-closed-principle.html">オープンクローズドの原則（OCP）</a></li><li><a href="./liskov-substitution-principle.html">リスコフの置換原則（LSP）</a></li><li><a href="./interface-segregation-principle.html">インターフェース分離の原則（ISP）</a></li><li><a href="./dependency-inversion-principle.html">依存性逆転の原則（DIP）</a></li></ul><hr><ul><li><a href="./relevance-of-solid-principles.html">SOLID原則間の関連性</a></li><li>✅ <a href="./solid-checklist.html">実装チェックリスト</a></li></ul><h2 id="🛠-ケーススタディ" tabindex="-1">🛠 ケーススタディ <a class="header-anchor" href="#🛠-ケーススタディ" aria-label="Permalink to &quot;🛠 ケーススタディ&quot;">​</a></h2><ul><li><a href="./practical-case-studies.html">ECサイトの責務分離と拡張設計</a></li></ul><h2 id="oopと関数型の比較" tabindex="-1">OOPと関数型の比較 <a class="header-anchor" href="#oopと関数型の比較" aria-label="Permalink to &quot;OOPと関数型の比較&quot;">​</a></h2><ul><li><a href="./object-oriented-vs-functional/srp-oop-vs-fp.html">単一責任の原則（SRP）におけるOOPとFPの比較</a> |</li><li><a href="./object-oriented-vs-functional/ocp-oop-vs-fp.html">開放/閉鎖原則（OCP）におけるOOPとFPの比較</a> |</li><li><a href="./object-oriented-vs-functional/lsp-oop-vs-fp.html">リスコフの置換原則（LSP）におけるOOPとFPの比較</a> |</li><li><a href="./object-oriented-vs-functional/isp-oop-vs-fp.html">インターフェース分離の原則（ISP）におけるOOPとFPの比較</a> |</li><li><a href="./object-oriented-vs-functional/dip-oop-vs-fp.html">依存性逆転の原則（DIP）におけるOOPとFPの比較</a></li><li><a href="./object-oriented-vs-functional/summary.html">OOPと関数型における設計原則のまとめ</a></li></ul><hr><ul><li>✅ <a href="./object-oriented-vs-functional/solid-checklist-fp.html">関数型チェックリスト</a></li></ul>',11)]))}const m=i(o,[["render",r]]);export{f as __pageData,m as default};
