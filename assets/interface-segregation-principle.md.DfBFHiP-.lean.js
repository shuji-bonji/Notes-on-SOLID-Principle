import{_ as r,C as E,c as d,o as l,a2 as h,b as e,j as a,w as i,a as n,G as p,a3 as k}from"./chunks/framework.M5Qft685.js";const u=JSON.parse('{"title":"インターフェース分離の原則 (Interface Segregation Principle)","description":"インターフェース分離の原則（ISP）を実践する方法。クライアントに不要なメソッド依存を強制しない設計により、疎結合で保守性の高いコードを実現します。","frontmatter":{"description":"インターフェース分離の原則（ISP）を実践する方法。クライアントに不要なメソッド依存を強制しない設計により、疎結合で保守性の高いコードを実現します。"},"headers":[],"relativePath":"interface-segregation-principle.md","filePath":"interface-segregation-principle.md"}'),g={name:"interface-segregation-principle.md"};function c(o,s,F,y,A,C){const t=E("Mermaid");return l(),d("div",null,[s[3]||(s[3]=h("",8)),(l(),e(k,null,{default:i(()=>[p(t,{id:"mermaid-31",class:"mermaid",graph:"classDiagram%0A%20%20class%20MultiFunctionDevice%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bprint()%0A%20%20%20%20%2Bscan()%0A%20%20%20%20%2Bfax()%0A%20%20%7D%0A%0A%20%20class%20AllInOnePrinter%20%7B%0A%20%20%20%20%2Bprint()%0A%20%20%20%20%2Bscan()%0A%20%20%20%20%2Bfax()%0A%20%20%7D%0A%0A%20%20class%20SimplePrinter%20%7B%0A%20%20%20%20%2Bprint()%0A%20%20%20%20%2Bscan()%0A%20%20%20%20%2Bfax()%0A%20%20%7D%0A%0A%20%20MultiFunctionDevice%20%3C%7C..%20AllInOnePrinter%0A%20%20MultiFunctionDevice%20%3C%7C..%20SimplePrinter%0A"})]),fallback:i(()=>s[0]||(s[0]=[n(" Loading... ")])),_:1})),s[4]||(s[4]=h("",9)),(l(),e(k,null,{default:i(()=>[p(t,{id:"mermaid-82",class:"mermaid",graph:"classDiagram%0A%20%20class%20Printer%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bprint()%0A%20%20%7D%0A%0A%20%20class%20Scanner%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bscan()%0A%20%20%7D%0A%0A%20%20class%20Fax%20%7B%0A%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%2Bfax()%0A%20%20%7D%0A%0A%20%20class%20AllInOnePrinter%20%7B%0A%20%20%20%20%2Bprint()%0A%20%20%20%20%2Bscan()%0A%20%20%20%20%2Bfax()%0A%20%20%7D%0A%0A%20%20class%20SimplePrinter%20%7B%0A%20%20%20%20%2Bprint()%0A%20%20%7D%0A%0A%20%20Printer%20%3C%7C..%20AllInOnePrinter%0A%20%20Scanner%20%3C%7C..%20AllInOnePrinter%0A%20%20Fax%20%3C%7C..%20AllInOnePrinter%0A%20%20Printer%20%3C%7C..%20SimplePrinter%0A"})]),fallback:i(()=>s[1]||(s[1]=[n(" Loading... ")])),_:1})),s[5]||(s[5]=h("",6)),(l(),e(k,null,{default:i(()=>[p(t,{id:"mermaid-99",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20I%5B%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%AE%E5%8E%9F%E5%89%87%5D%20--%3E%20D%5B%E4%BE%9D%E5%AD%98%E6%80%A7%E9%80%86%E8%BB%A2%E3%81%AE%E5%8E%9F%E5%89%87%5D%0A%20%20%20%20subgraph%20%22%E7%96%8E%E7%B5%90%E5%90%88%22%0A%20%20%20%20%20%20%20%20I%0A%20%20%20%20%20%20%20%20D%0A%20%20%20%20end%0A"})]),fallback:i(()=>s[2]||(s[2]=[n(" Loading... ")])),_:1})),s[6]||(s[6]=a("ul",null,[a("li",null,[a("strong",null,"依存性逆転の原則（DIP）"),n(" では、具象クラスではなく抽象に依存する設計が求められます。 その際、インターフェースが肥大化していると、利用者に不要な依存を強制することになります。")]),a("li",null,[a("strong",null,"インターフェース分離の原則（ISP）"),n(" を適用することで、必要最小限のインターフェースに依存できるようになり、DIPの柔軟性と保守性をさらに高めます。")])],-1))])}const m=r(g,[["render",c]]);export{u as __pageData,m as default};
