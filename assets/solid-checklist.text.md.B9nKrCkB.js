import{_ as i,c as a,o as e,a2 as t}from"./chunks/framework.M5Qft685.js";const _=JSON.parse('{"title":"✅ SOLID原則 チェックリスト","description":"","frontmatter":{},"headers":[],"relativePath":"solid-checklist.text.md","filePath":"solid-checklist.text.md"}'),r={name:"solid-checklist.text.md"};function o(s,l,h,d,c,n){return e(),a("div",null,l[0]||(l[0]=[t('<h1 id="✅-solid原則-チェックリスト" tabindex="-1">✅ SOLID原則 チェックリスト <a class="header-anchor" href="#✅-solid原則-チェックリスト" aria-label="Permalink to &quot;✅ SOLID原則 チェックリスト&quot;">​</a></h1><h2 id="☑︎-単一責任の原則-srp" tabindex="-1">☑︎ 単一責任の原則（SRP） <a class="header-anchor" href="#☑︎-単一責任の原則-srp" aria-label="Permalink to &quot;☑︎ 単一責任の原則（SRP）&quot;">​</a></h2><ul><li>[ ] このクラスは1つの理由でしか変更されないか？</li><li>[ ] 責務が複数混在していないか？</li><li>[ ] クラスやモジュールに複数の役割が混在していないか？</li><li>[ ] テストしやすいように、責務が明確に分離されているか？</li><li>[ ] そのクラスの「変更理由」は1種類に限定されているか？</li></ul><h2 id="☑︎-オープンクローズドの原則-ocp" tabindex="-1">☑︎ オープンクローズドの原則（OCP） <a class="header-anchor" href="#☑︎-オープンクローズドの原則-ocp" aria-label="Permalink to &quot;☑︎ オープンクローズドの原則（OCP）&quot;">​</a></h2><ul><li>[ ] 新しい機能追加の際に既存クラスを修正していないか？</li><li>[ ] ポリモーフィズムや拡張ポイントを利用しているか？</li><li>[ ] 拡張のために既存のコード（if文・switch文など）を頻繁に修正していないか？</li><li>[ ] 新しい振る舞いを既存コードの変更なしに追加できる構成か？</li><li>[ ] 抽象（インターフェース・基底クラス）を利用して柔軟に設計されているか？</li></ul><h2 id="☑︎-リスコフの置換原則-lsp" tabindex="-1">☑︎ リスコフの置換原則（LSP） <a class="header-anchor" href="#☑︎-リスコフの置換原則-lsp" aria-label="Permalink to &quot;☑︎ リスコフの置換原則（LSP）&quot;">​</a></h2><ul><li>[ ] 派生クラスは親クラスとして振る舞えるか？</li><li>[ ] クライアントコードに影響なく置き換えられるか？</li><li>[ ] サブクラスが親クラスの期待する振る舞いをすべて満たしているか？</li><li>[ ] サブクラスで例外的な動作（throwなど）をしていないか？</li><li>[ ] クライアントコードがサブクラスと親クラスを区別せず使えているか？</li></ul><h2 id="☑︎-インターフェース分離の原則-isp" tabindex="-1">☑︎ インターフェース分離の原則（ISP） <a class="header-anchor" href="#☑︎-インターフェース分離の原則-isp" aria-label="Permalink to &quot;☑︎ インターフェース分離の原則（ISP）&quot;">​</a></h2><ul><li>[ ] インターフェースは肥大化していないか？</li><li>[ ] クライアントが不要なメソッドに依存していないか？</li><li>[ ] インターフェースが1つの関心事（責任）に特化しているか？</li><li>[ ] 不要なメソッドの空実装や例外的実装が発生していないか？</li><li>[ ] 利用側に応じた適切な粒度のインターフェースが提供されているか？</li></ul><h2 id="☑︎-依存性逆転の原則-dip" tabindex="-1">☑︎ 依存性逆転の原則（DIP） <a class="header-anchor" href="#☑︎-依存性逆転の原則-dip" aria-label="Permalink to &quot;☑︎ 依存性逆転の原則（DIP）&quot;">​</a></h2><ul><li>[ ] 実装ではなく抽象に依存しているか？</li><li>[ ] 上位モジュールが下位モジュールに依存していないか？</li><li>[ ] 高レベルモジュールが低レベルの具体実装に依存していないか？</li><li>[ ] 実装ではなく抽象（インターフェース、抽象クラス）に依存しているか？</li><li>[ ] コンストラクタ注入、DIコンテナ、ファクトリなどで依存関係を外部化しているか？</li></ul>',11)]))}const p=i(r,[["render",o]]);export{_ as __pageData,p as default};
